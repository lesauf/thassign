{"ast":null,"code":"import { Injectable, EventEmitter, InjectionToken, Inject, Directive, ElementRef, ChangeDetectorRef, Input, Pipe, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.loader.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass TranslateLoader {}\nif (false) {\n  /**\n   * @abstract\n   * @param {?} lang\n   * @return {?}\n   */\n  TranslateLoader.prototype.getTranslation = function (lang) {};\n}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\nclass TranslateFakeLoader extends TranslateLoader {\n  /**\n   * @param {?} lang\n   * @return {?}\n   */\n  getTranslation(lang) {\n    return of({});\n  }\n}\nTranslateFakeLoader.decorators = [{\n  type: Injectable\n}];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/missing-translation-handler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction MissingTranslationHandlerParams() {}\nif (false) {\n  /**\n   * the key that's missing in translation files\n   * @type {?}\n   */\n  MissingTranslationHandlerParams.prototype.key;\n  /**\n   * an instance of the service that was unable to translate the key.\n   * @type {?}\n   */\n  MissingTranslationHandlerParams.prototype.translateService;\n  /**\n   * interpolation params that were passed along for translating the given key.\n   * @type {?|undefined}\n   */\n  MissingTranslationHandlerParams.prototype.interpolateParams;\n}\n/**\n * @abstract\n */\nclass MissingTranslationHandler {}\nif (false) {\n  /**\n   * A function that handles missing translations.\n   *\n   * @abstract\n   * @param {?} params context for resolving a missing translation\n   * @return {?} a value or an observable\n   * If it returns a value, then this value is used.\n   * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n   * If it doesn't return then the key will be used as a value\n   */\n  MissingTranslationHandler.prototype.handle = function (params) {};\n}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\nclass FakeMissingTranslationHandler {\n  /**\n   * @param {?} params\n   * @return {?}\n   */\n  handle(params) {\n    return params.key;\n  }\n}\nFakeMissingTranslationHandler.decorators = [{\n  type: Injectable\n}];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/util.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/* tslint:disable */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param {?} o1 Object or value to compare.\n * @param {?} o2 Object or value to compare.\n * @return {?} true if arguments are equal.\n */\nfunction equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  // NaN === NaN\n  /** @type {?} */\n  let t1 = typeof o1;\n  /** @type {?} */\n  let t2 = typeof o2;\n  /** @type {?} */\n  let length;\n  /** @type {?} */\n  let key;\n  /** @type {?} */\n  let keySet;\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n      keySet = Object.create(null);\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n        keySet[key] = true;\n      }\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}\n/* tslint:enable */\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isDefined(value) {\n  return typeof value !== 'undefined' && value !== null;\n}\n/**\n * @param {?} item\n * @return {?}\n */\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n/**\n * @param {?} target\n * @param {?} source\n * @return {?}\n */\nfunction mergeDeep(target, source) {\n  /** @type {?} */\n  let output = Object.assign({}, target);\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(\n    /**\n    * @param {?} key\n    * @return {?}\n    */\n    key => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, {\n            [key]: source[key]\n          });\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, {\n          [key]: source[key]\n        });\n      }\n    });\n  }\n  return output;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.parser.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass TranslateParser {}\nif (false) {\n  /**\n   * Interpolates a string to replace parameters\n   * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n   * @abstract\n   * @param {?} expr\n   * @param {?=} params\n   * @return {?}\n   */\n  TranslateParser.prototype.interpolate = function (expr, params) {};\n  /**\n   * Gets a value from an object by composed key\n   * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n   * @abstract\n   * @param {?} target\n   * @param {?} key\n   * @return {?}\n   */\n  TranslateParser.prototype.getValue = function (target, key) {};\n}\nclass TranslateDefaultParser extends TranslateParser {\n  constructor() {\n    super(...arguments);\n    this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n  }\n  /**\n   * @param {?} expr\n   * @param {?=} params\n   * @return {?}\n   */\n  interpolate(expr, params) {\n    /** @type {?} */\n    let result;\n    if (typeof expr === 'string') {\n      result = this.interpolateString(expr, params);\n    } else if (typeof expr === 'function') {\n      result = this.interpolateFunction(expr, params);\n    } else {\n      // this should not happen, but an unrelated TranslateService test depends on it\n      result = /** @type {?} */expr;\n    }\n    return result;\n  }\n  /**\n   * @param {?} target\n   * @param {?} key\n   * @return {?}\n   */\n  getValue(target, key) {\n    /** @type {?} */\n    let keys = typeof key === 'string' ? key.split('.') : [key];\n    key = '';\n    do {\n      key += keys.shift();\n      if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n        target = target[key];\n        key = '';\n      } else if (!keys.length) {\n        target = undefined;\n      } else {\n        key += '.';\n      }\n    } while (keys.length);\n    return target;\n  }\n  /**\n   * @private\n   * @param {?} fn\n   * @param {?=} params\n   * @return {?}\n   */\n  interpolateFunction(fn, params) {\n    return fn(params);\n  }\n  /**\n   * @private\n   * @param {?} expr\n   * @param {?=} params\n   * @return {?}\n   */\n  interpolateString(expr, params) {\n    if (!params) {\n      return expr;\n    }\n    return expr.replace(this.templateMatcher,\n    /**\n    * @param {?} substring\n    * @param {?} b\n    * @return {?}\n    */\n    (substring, b) => {\n      /** @type {?} */\n      let r = this.getValue(params, b);\n      return isDefined(r) ? r : substring;\n    });\n  }\n}\nTranslateDefaultParser.decorators = [{\n  type: Injectable\n}];\nif (false) {\n  /** @type {?} */\n  TranslateDefaultParser.prototype.templateMatcher;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.compiler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass TranslateCompiler {}\nif (false) {\n  /**\n   * @abstract\n   * @param {?} value\n   * @param {?} lang\n   * @return {?}\n   */\n  TranslateCompiler.prototype.compile = function (value, lang) {};\n  /**\n   * @abstract\n   * @param {?} translations\n   * @param {?} lang\n   * @return {?}\n   */\n  TranslateCompiler.prototype.compileTranslations = function (translations, lang) {};\n}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\nclass TranslateFakeCompiler extends TranslateCompiler {\n  /**\n   * @param {?} value\n   * @param {?} lang\n   * @return {?}\n   */\n  compile(value, lang) {\n    return value;\n  }\n  /**\n   * @param {?} translations\n   * @param {?} lang\n   * @return {?}\n   */\n  compileTranslations(translations, lang) {\n    return translations;\n  }\n}\nTranslateFakeCompiler.decorators = [{\n  type: Injectable\n}];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.store.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TranslateStore {\n  constructor() {\n    /**\n     * The lang currently used\n     */\n    this.currentLang = this.defaultLang;\n    /**\n     * a list of translations per lang\n     */\n    this.translations = {};\n    /**\n     * an array of langs\n     */\n    this.langs = [];\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     */\n    this.onTranslationChange = new EventEmitter();\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     */\n    this.onLangChange = new EventEmitter();\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     */\n    this.onDefaultLangChange = new EventEmitter();\n  }\n}\nif (false) {\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   * @type {?}\n   */\n  TranslateStore.prototype.defaultLang;\n  /**\n   * The lang currently used\n   * @type {?}\n   */\n  TranslateStore.prototype.currentLang;\n  /**\n   * a list of translations per lang\n   * @type {?}\n   */\n  TranslateStore.prototype.translations;\n  /**\n   * an array of langs\n   * @type {?}\n   */\n  TranslateStore.prototype.langs;\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n   *     // do something\n   * });\n   * @type {?}\n   */\n  TranslateStore.prototype.onTranslationChange;\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n   *     // do something\n   * });\n   * @type {?}\n   */\n  TranslateStore.prototype.onLangChange;\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n   *     // do something\n   * });\n   * @type {?}\n   */\n  TranslateStore.prototype.onDefaultLangChange;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst USE_STORE = new InjectionToken('USE_STORE');\n/** @type {?} */\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\n/** @type {?} */\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\n/** @type {?} */\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\n/**\n * @record\n */\nfunction TranslationChangeEvent() {}\nif (false) {\n  /** @type {?} */\n  TranslationChangeEvent.prototype.translations;\n  /** @type {?} */\n  TranslationChangeEvent.prototype.lang;\n}\n/**\n * @record\n */\nfunction LangChangeEvent() {}\nif (false) {\n  /** @type {?} */\n  LangChangeEvent.prototype.lang;\n  /** @type {?} */\n  LangChangeEvent.prototype.translations;\n}\n/**\n * @record\n */\nfunction DefaultLangChangeEvent() {}\nif (false) {\n  /** @type {?} */\n  DefaultLangChangeEvent.prototype.lang;\n  /** @type {?} */\n  DefaultLangChangeEvent.prototype.translations;\n}\nclass TranslateService {\n  /**\n   *\n   * @param {?} store an instance of the store (that is supposed to be unique)\n   * @param {?} currentLoader An instance of the loader currently used\n   * @param {?} compiler An instance of the compiler currently used\n   * @param {?} parser An instance of the parser currently used\n   * @param {?} missingTranslationHandler A handler for missing translations.\n   * @param {?=} useDefaultLang whether we should use default language translation when current language translation is missing.\n   * @param {?=} isolate whether this service should use the store or not\n   * @param {?=} extend To make a child module extend (and use) translations from parent modules.\n   * @param {?=} defaultLanguage Set the default language using configuration\n   */\n  constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\n    this.store = store;\n    this.currentLoader = currentLoader;\n    this.compiler = compiler;\n    this.parser = parser;\n    this.missingTranslationHandler = missingTranslationHandler;\n    this.useDefaultLang = useDefaultLang;\n    this.isolate = isolate;\n    this.extend = extend;\n    this.pending = false;\n    this._onTranslationChange = new EventEmitter();\n    this._onLangChange = new EventEmitter();\n    this._onDefaultLangChange = new EventEmitter();\n    this._langs = [];\n    this._translations = {};\n    this._translationRequests = {};\n    /** set the default language from configuration */\n    if (defaultLanguage) {\n      this.setDefaultLang(defaultLanguage);\n    }\n  }\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n   *     // do something\n   * });\n   * @return {?}\n   */\n  get onTranslationChange() {\n    return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n  }\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n   *     // do something\n   * });\n   * @return {?}\n   */\n  get onLangChange() {\n    return this.isolate ? this._onLangChange : this.store.onLangChange;\n  }\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n   *     // do something\n   * });\n   * @return {?}\n   */\n  get onDefaultLangChange() {\n    return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n  }\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   * @return {?}\n   */\n  get defaultLang() {\n    return this.isolate ? this._defaultLang : this.store.defaultLang;\n  }\n  /**\n   * @param {?} defaultLang\n   * @return {?}\n   */\n  set defaultLang(defaultLang) {\n    if (this.isolate) {\n      this._defaultLang = defaultLang;\n    } else {\n      this.store.defaultLang = defaultLang;\n    }\n  }\n  /**\n   * The lang currently used\n   * @return {?}\n   */\n  get currentLang() {\n    return this.isolate ? this._currentLang : this.store.currentLang;\n  }\n  /**\n   * @param {?} currentLang\n   * @return {?}\n   */\n  set currentLang(currentLang) {\n    if (this.isolate) {\n      this._currentLang = currentLang;\n    } else {\n      this.store.currentLang = currentLang;\n    }\n  }\n  /**\n   * an array of langs\n   * @return {?}\n   */\n  get langs() {\n    return this.isolate ? this._langs : this.store.langs;\n  }\n  /**\n   * @param {?} langs\n   * @return {?}\n   */\n  set langs(langs) {\n    if (this.isolate) {\n      this._langs = langs;\n    } else {\n      this.store.langs = langs;\n    }\n  }\n  /**\n   * a list of translations per lang\n   * @return {?}\n   */\n  get translations() {\n    return this.isolate ? this._translations : this.store.translations;\n  }\n  /**\n   * @param {?} translations\n   * @return {?}\n   */\n  set translations(translations) {\n    if (this.isolate) {\n      this._translations = translations;\n    } else {\n      this.store.translations = translations;\n    }\n  }\n  /**\n   * Sets the default language to use as a fallback\n   * @param {?} lang\n   * @return {?}\n   */\n  setDefaultLang(lang) {\n    if (lang === this.defaultLang) {\n      return;\n    }\n    /** @type {?} */\n    let pending = this.retrieveTranslations(lang);\n    if (typeof pending !== \"undefined\") {\n      // on init set the defaultLang immediately\n      if (this.defaultLang == null) {\n        this.defaultLang = lang;\n      }\n      pending.pipe(take(1)).subscribe(\n      /**\n      * @param {?} res\n      * @return {?}\n      */\n      res => {\n        this.changeDefaultLang(lang);\n      });\n    } else {\n      // we already have this language\n      this.changeDefaultLang(lang);\n    }\n  }\n  /**\n   * Gets the default language used\n   * @return {?}\n   */\n  getDefaultLang() {\n    return this.defaultLang;\n  }\n  /**\n   * Changes the lang currently used\n   * @param {?} lang\n   * @return {?}\n   */\n  use(lang) {\n    // don't change the language if the language given is already selected\n    if (lang === this.currentLang) {\n      return of(this.translations[lang]);\n    }\n    /** @type {?} */\n    let pending = this.retrieveTranslations(lang);\n    if (typeof pending !== \"undefined\") {\n      // on init set the currentLang immediately\n      if (!this.currentLang) {\n        this.currentLang = lang;\n      }\n      pending.pipe(take(1)).subscribe(\n      /**\n      * @param {?} res\n      * @return {?}\n      */\n      res => {\n        this.changeLang(lang);\n      });\n      return pending;\n    } else {\n      // we have this language, return an Observable\n      this.changeLang(lang);\n      return of(this.translations[lang]);\n    }\n  }\n  /**\n   * Retrieves the given translations\n   * @private\n   * @param {?} lang\n   * @return {?}\n   */\n  retrieveTranslations(lang) {\n    /** @type {?} */\n    let pending;\n    // if this language is unavailable or extend is true, ask for it\n    if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n      this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n      pending = this._translationRequests[lang];\n    }\n    return pending;\n  }\n  /**\n   * Gets an object of translations for a given language with the current loader\n   * and passes it through the compiler\n   * @param {?} lang\n   * @return {?}\n   */\n  getTranslation(lang) {\n    this.pending = true;\n    /** @type {?} */\n    const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\n    this.loadingTranslations = loadingTranslations.pipe(map(\n    /**\n    * @param {?} res\n    * @return {?}\n    */\n    res => this.compiler.compileTranslations(res, lang)), shareReplay(1), take(1));\n    this.loadingTranslations.subscribe({\n      next:\n      /**\n      * @param {?} res\n      * @return {?}\n      */\n      res => {\n        this.translations[lang] = this.extend && this.translations[lang] ? Object.assign(Object.assign({}, res), this.translations[lang]) : res;\n        this.updateLangs();\n        this.pending = false;\n      },\n      error:\n      /**\n      * @param {?} err\n      * @return {?}\n      */\n      err => {\n        this.pending = false;\n      }\n    });\n    return loadingTranslations;\n  }\n  /**\n   * Manually sets an object of translations for a given language\n   * after passing it through the compiler\n   * @param {?} lang\n   * @param {?} translations\n   * @param {?=} shouldMerge\n   * @return {?}\n   */\n  setTranslation(lang, translations, shouldMerge = false) {\n    translations = this.compiler.compileTranslations(translations, lang);\n    if ((shouldMerge || this.extend) && this.translations[lang]) {\n      this.translations[lang] = mergeDeep(this.translations[lang], translations);\n    } else {\n      this.translations[lang] = translations;\n    }\n    this.updateLangs();\n    this.onTranslationChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\n   * Returns an array of currently available langs\n   * @return {?}\n   */\n  getLangs() {\n    return this.langs;\n  }\n  /**\n   * Add available langs\n   * @param {?} langs\n   * @return {?}\n   */\n  addLangs(langs) {\n    langs.forEach(\n    /**\n    * @param {?} lang\n    * @return {?}\n    */\n    lang => {\n      if (this.langs.indexOf(lang) === -1) {\n        this.langs.push(lang);\n      }\n    });\n  }\n  /**\n   * Update the list of available langs\n   * @private\n   * @return {?}\n   */\n  updateLangs() {\n    this.addLangs(Object.keys(this.translations));\n  }\n  /**\n   * Returns the parsed result of the translations\n   * @param {?} translations\n   * @param {?} key\n   * @param {?=} interpolateParams\n   * @return {?}\n   */\n  getParsedResult(translations, key, interpolateParams) {\n    /** @type {?} */\n    let res;\n    if (key instanceof Array) {\n      /** @type {?} */\n      let result = {};\n      /** @type {?} */\n      let observables = false;\n      for (let k of key) {\n        result[k] = this.getParsedResult(translations, k, interpolateParams);\n        if (isObservable(result[k])) {\n          observables = true;\n        }\n      }\n      if (observables) {\n        /** @type {?} */\n        const sources = key.map(\n        /**\n        * @param {?} k\n        * @return {?}\n        */\n        k => isObservable(result[k]) ? result[k] : of( /** @type {?} */result[k]));\n        return forkJoin(sources).pipe(map(\n        /**\n        * @param {?} arr\n        * @return {?}\n        */\n        arr => {\n          /** @type {?} */\n          let obj = {};\n          arr.forEach(\n          /**\n          * @param {?} value\n          * @param {?} index\n          * @return {?}\n          */\n          (value, index) => {\n            obj[key[index]] = value;\n          });\n          return obj;\n        }));\n      }\n      return result;\n    }\n    if (translations) {\n      res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n    }\n    if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n      res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n    }\n    if (typeof res === \"undefined\") {\n      /** @type {?} */\n      let params = {\n        key,\n        translateService: this\n      };\n      if (typeof interpolateParams !== 'undefined') {\n        params.interpolateParams = interpolateParams;\n      }\n      res = this.missingTranslationHandler.handle(params);\n    }\n    return typeof res !== \"undefined\" ? res : key;\n  }\n  /**\n   * Gets the translated value of a key (or an array of keys)\n   * @param {?} key\n   * @param {?=} interpolateParams\n   * @return {?} the translated key, or an object of translated keys\n   */\n  get(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    // check if we are loading a new translation to use\n    if (this.pending) {\n      return this.loadingTranslations.pipe(concatMap(\n      /**\n      * @param {?} res\n      * @return {?}\n      */\n      res => {\n        res = this.getParsedResult(res, key, interpolateParams);\n        return isObservable(res) ? res : of(res);\n      }));\n    } else {\n      /** @type {?} */\n      let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n      return isObservable(res) ? res : of(res);\n    }\n  }\n  /**\n   * Returns a stream of translated values of a key (or an array of keys) which updates\n   * whenever the translation changes.\n   * @param {?} key\n   * @param {?=} interpolateParams\n   * @return {?} A stream of the translated key, or an object of translated keys\n   */\n  getStreamOnTranslationChange(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    return concat(defer(\n    /**\n    * @return {?}\n    */\n    () => this.get(key, interpolateParams)), this.onTranslationChange.pipe(switchMap(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      /** @type {?} */\n      const res = this.getParsedResult(event.translations, key, interpolateParams);\n      if (typeof res.subscribe === 'function') {\n        return res;\n      } else {\n        return of(res);\n      }\n    })));\n  }\n  /**\n   * Returns a stream of translated values of a key (or an array of keys) which updates\n   * whenever the language changes.\n   * @param {?} key\n   * @param {?=} interpolateParams\n   * @return {?} A stream of the translated key, or an object of translated keys\n   */\n  stream(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    return concat(defer(\n    /**\n    * @return {?}\n    */\n    () => this.get(key, interpolateParams)), this.onLangChange.pipe(switchMap(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      /** @type {?} */\n      const res = this.getParsedResult(event.translations, key, interpolateParams);\n      return isObservable(res) ? res : of(res);\n    })));\n  }\n  /**\n   * Returns a translation instantly from the internal state of loaded translation.\n   * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n   * @param {?} key\n   * @param {?=} interpolateParams\n   * @return {?}\n   */\n  instant(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    /** @type {?} */\n    let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n    if (isObservable(res)) {\n      if (key instanceof Array) {\n        /** @type {?} */\n        let obj = {};\n        key.forEach(\n        /**\n        * @param {?} value\n        * @param {?} index\n        * @return {?}\n        */\n        (value, index) => {\n          obj[key[index]] = key[index];\n        });\n        return obj;\n      }\n      return key;\n    } else {\n      return res;\n    }\n  }\n  /**\n   * Sets the translated value of a key, after compiling it\n   * @param {?} key\n   * @param {?} value\n   * @param {?=} lang\n   * @return {?}\n   */\n  set(key, value, lang = this.currentLang) {\n    this.translations[lang][key] = this.compiler.compile(value, lang);\n    this.updateLangs();\n    this.onTranslationChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\n   * Changes the current lang\n   * @private\n   * @param {?} lang\n   * @return {?}\n   */\n  changeLang(lang) {\n    this.currentLang = lang;\n    this.onLangChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n    // if there is no default lang, use the one that we just set\n    if (this.defaultLang == null) {\n      this.changeDefaultLang(lang);\n    }\n  }\n  /**\n   * Changes the default lang\n   * @private\n   * @param {?} lang\n   * @return {?}\n   */\n  changeDefaultLang(lang) {\n    this.defaultLang = lang;\n    this.onDefaultLangChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\n   * Allows to reload the lang file from the file\n   * @param {?} lang\n   * @return {?}\n   */\n  reloadLang(lang) {\n    this.resetLang(lang);\n    return this.getTranslation(lang);\n  }\n  /**\n   * Deletes inner translation\n   * @param {?} lang\n   * @return {?}\n   */\n  resetLang(lang) {\n    this._translationRequests[lang] = undefined;\n    this.translations[lang] = undefined;\n  }\n  /**\n   * Returns the language code name from the browser, e.g. \"de\"\n   * @return {?}\n   */\n  getBrowserLang() {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n    /** @type {?} */\n    let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n    if (typeof browserLang === 'undefined') {\n      return undefined;\n    }\n    if (browserLang.indexOf('-') !== -1) {\n      browserLang = browserLang.split('-')[0];\n    }\n    if (browserLang.indexOf('_') !== -1) {\n      browserLang = browserLang.split('_')[0];\n    }\n    return browserLang;\n  }\n  /**\n   * Returns the culture language code name from the browser, e.g. \"de-DE\"\n   * @return {?}\n   */\n  getBrowserCultureLang() {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n    /** @type {?} */\n    let browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n    return browserCultureLang;\n  }\n}\nTranslateService.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\nTranslateService.ctorParameters = () => [{\n  type: TranslateStore\n}, {\n  type: TranslateLoader\n}, {\n  type: TranslateCompiler\n}, {\n  type: TranslateParser\n}, {\n  type: MissingTranslationHandler\n}, {\n  type: Boolean,\n  decorators: [{\n    type: Inject,\n    args: [USE_DEFAULT_LANG]\n  }]\n}, {\n  type: Boolean,\n  decorators: [{\n    type: Inject,\n    args: [USE_STORE]\n  }]\n}, {\n  type: Boolean,\n  decorators: [{\n    type: Inject,\n    args: [USE_EXTEND]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Inject,\n    args: [DEFAULT_LANGUAGE]\n  }]\n}];\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslateService.prototype.loadingTranslations;\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslateService.prototype.pending;\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslateService.prototype._onTranslationChange;\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslateService.prototype._onLangChange;\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslateService.prototype._onDefaultLangChange;\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslateService.prototype._defaultLang;\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslateService.prototype._currentLang;\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslateService.prototype._langs;\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslateService.prototype._translations;\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslateService.prototype._translationRequests;\n  /** @type {?} */\n  TranslateService.prototype.store;\n  /** @type {?} */\n  TranslateService.prototype.currentLoader;\n  /** @type {?} */\n  TranslateService.prototype.compiler;\n  /** @type {?} */\n  TranslateService.prototype.parser;\n  /** @type {?} */\n  TranslateService.prototype.missingTranslationHandler;\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslateService.prototype.useDefaultLang;\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslateService.prototype.isolate;\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslateService.prototype.extend;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TranslateDirective {\n  /**\n   * @param {?} translateService\n   * @param {?} element\n   * @param {?} _ref\n   */\n  constructor(translateService, element, _ref) {\n    this.translateService = translateService;\n    this.element = element;\n    this._ref = _ref;\n    // subscribe to onTranslationChange event, in case the translations of the current lang change\n    if (!this.onTranslationChangeSub) {\n      this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        if (event.lang === this.translateService.currentLang) {\n          this.checkNodes(true, event.translations);\n        }\n      });\n    }\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChangeSub) {\n      this.onLangChangeSub = this.translateService.onLangChange.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        this.checkNodes(true, event.translations);\n      });\n    }\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        this.checkNodes(true);\n      });\n    }\n  }\n  /**\n   * @param {?} key\n   * @return {?}\n   */\n  set translate(key) {\n    if (key) {\n      this.key = key;\n      this.checkNodes();\n    }\n  }\n  /**\n   * @param {?} params\n   * @return {?}\n   */\n  set translateParams(params) {\n    if (!equals(this.currentParams, params)) {\n      this.currentParams = params;\n      this.checkNodes(true);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterViewChecked() {\n    this.checkNodes();\n  }\n  /**\n   * @param {?=} forceUpdate\n   * @param {?=} translations\n   * @return {?}\n   */\n  checkNodes(forceUpdate = false, translations) {\n    /** @type {?} */\n    let nodes = this.element.nativeElement.childNodes;\n    // if the element is empty\n    if (!nodes.length) {\n      // we add the key as content\n      this.setContent(this.element.nativeElement, this.key);\n      nodes = this.element.nativeElement.childNodes;\n    }\n    for (let i = 0; i < nodes.length; ++i) {\n      /** @type {?} */\n      let node = nodes[i];\n      if (node.nodeType === 3) {\n        // node type 3 is a text node\n        // node type 3 is a text node\n        /** @type {?} */\n        let key;\n        if (forceUpdate) {\n          node.lastKey = null;\n        }\n        if (isDefined(node.lookupKey)) {\n          key = node.lookupKey;\n        } else if (this.key) {\n          key = this.key;\n        } else {\n          /** @type {?} */\n          let content = this.getContent(node);\n          /** @type {?} */\n          let trimmedContent = content.trim();\n          if (trimmedContent.length) {\n            node.lookupKey = trimmedContent;\n            // we want to use the content as a key, not the translation value\n            if (content !== node.currentValue) {\n              key = trimmedContent;\n              // the content was changed from the user, we'll use it as a reference if needed\n              node.originalContent = content || node.originalContent;\n            } else if (node.originalContent) {\n              // the content seems ok, but the lang has changed\n              // the current content is the translation, not the key, use the last real content as key\n              key = node.originalContent.trim();\n            } else if (content !== node.currentValue) {\n              // we want to use the content as a key, not the translation value\n              key = trimmedContent;\n              // the content was changed from the user, we'll use it as a reference if needed\n              node.originalContent = content || node.originalContent;\n            }\n          }\n        }\n        this.updateValue(key, node, translations);\n      }\n    }\n  }\n  /**\n   * @param {?} key\n   * @param {?} node\n   * @param {?} translations\n   * @return {?}\n   */\n  updateValue(key, node, translations) {\n    if (key) {\n      if (node.lastKey === key && this.lastParams === this.currentParams) {\n        return;\n      }\n      this.lastParams = this.currentParams;\n      /** @type {?} */\n      let onTranslation =\n      /**\n      * @param {?} res\n      * @return {?}\n      */\n      res => {\n        if (res !== key) {\n          node.lastKey = key;\n        }\n        if (!node.originalContent) {\n          node.originalContent = this.getContent(node);\n        }\n        node.currentValue = isDefined(res) ? res : node.originalContent || key;\n        // we replace in the original content to preserve spaces that we might have trimmed\n        this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n        this._ref.markForCheck();\n      };\n      if (isDefined(translations)) {\n        /** @type {?} */\n        let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n        if (isObservable(res)) {\n          res.subscribe(onTranslation);\n        } else {\n          onTranslation(res);\n        }\n      } else {\n        this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n      }\n    }\n  }\n  /**\n   * @param {?} node\n   * @return {?}\n   */\n  getContent(node) {\n    return isDefined(node.textContent) ? node.textContent : node.data;\n  }\n  /**\n   * @param {?} node\n   * @param {?} content\n   * @return {?}\n   */\n  setContent(node, content) {\n    if (isDefined(node.textContent)) {\n      node.textContent = content;\n    } else {\n      node.data = content;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (this.onLangChangeSub) {\n      this.onLangChangeSub.unsubscribe();\n    }\n    if (this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub.unsubscribe();\n    }\n    if (this.onTranslationChangeSub) {\n      this.onTranslationChangeSub.unsubscribe();\n    }\n  }\n}\nTranslateDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[translate],[ngx-translate]'\n  }]\n}];\n/** @nocollapse */\nTranslateDirective.ctorParameters = () => [{\n  type: TranslateService\n}, {\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}];\nTranslateDirective.propDecorators = {\n  translate: [{\n    type: Input\n  }],\n  translateParams: [{\n    type: Input\n  }]\n};\nif (false) {\n  /** @type {?} */\n  TranslateDirective.prototype.key;\n  /** @type {?} */\n  TranslateDirective.prototype.lastParams;\n  /** @type {?} */\n  TranslateDirective.prototype.currentParams;\n  /** @type {?} */\n  TranslateDirective.prototype.onLangChangeSub;\n  /** @type {?} */\n  TranslateDirective.prototype.onDefaultLangChangeSub;\n  /** @type {?} */\n  TranslateDirective.prototype.onTranslationChangeSub;\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslateDirective.prototype.translateService;\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslateDirective.prototype.element;\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslateDirective.prototype._ref;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TranslatePipe {\n  /**\n   * @param {?} translate\n   * @param {?} _ref\n   */\n  constructor(translate, _ref) {\n    this.translate = translate;\n    this._ref = _ref;\n    this.value = '';\n  }\n  /**\n   * @param {?} key\n   * @param {?=} interpolateParams\n   * @param {?=} translations\n   * @return {?}\n   */\n  updateValue(key, interpolateParams, translations) {\n    /** @type {?} */\n    let onTranslation =\n    /**\n    * @param {?} res\n    * @return {?}\n    */\n    res => {\n      this.value = res !== undefined ? res : key;\n      this.lastKey = key;\n      this._ref.markForCheck();\n    };\n    if (translations) {\n      /** @type {?} */\n      let res = this.translate.getParsedResult(translations, key, interpolateParams);\n      if (isObservable(res.subscribe)) {\n        res.subscribe(onTranslation);\n      } else {\n        onTranslation(res);\n      }\n    }\n    this.translate.get(key, interpolateParams).subscribe(onTranslation);\n  }\n  /**\n   * @param {?} query\n   * @param {...?} args\n   * @return {?}\n   */\n  transform(query, ...args) {\n    if (!query || !query.length) {\n      return query;\n    }\n    // if we ask another time for the same key, return the last value\n    if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n      return this.value;\n    }\n    /** @type {?} */\n    let interpolateParams;\n    if (isDefined(args[0]) && args.length) {\n      if (typeof args[0] === 'string' && args[0].length) {\n        // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n        // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n        /** @type {?} */\n        let validArgs = args[0].replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":').replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n        try {\n          interpolateParams = JSON.parse(validArgs);\n        } catch (e) {\n          throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n        }\n      } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n        interpolateParams = args[0];\n      }\n    }\n    // store the query, in case it changes\n    this.lastKey = query;\n    // store the params, in case they change\n    this.lastParams = args;\n    // set the value\n    this.updateValue(query, interpolateParams);\n    // if there is a subscription to onLangChange, clean it\n    this._dispose();\n    // subscribe to onTranslationChange event, in case the translations change\n    if (!this.onTranslationChange) {\n      this.onTranslationChange = this.translate.onTranslationChange.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        if (this.lastKey && event.lang === this.translate.currentLang) {\n          this.lastKey = null;\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChange) {\n      this.onLangChange = this.translate.onLangChange.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChange) {\n      this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams);\n        }\n      });\n    }\n    return this.value;\n  }\n  /**\n   * Clean any existing subscription to change events\n   * @private\n   * @return {?}\n   */\n  _dispose() {\n    if (typeof this.onTranslationChange !== 'undefined') {\n      this.onTranslationChange.unsubscribe();\n      this.onTranslationChange = undefined;\n    }\n    if (typeof this.onLangChange !== 'undefined') {\n      this.onLangChange.unsubscribe();\n      this.onLangChange = undefined;\n    }\n    if (typeof this.onDefaultLangChange !== 'undefined') {\n      this.onDefaultLangChange.unsubscribe();\n      this.onDefaultLangChange = undefined;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._dispose();\n  }\n}\nTranslatePipe.decorators = [{\n  type: Injectable\n}, {\n  type: Pipe,\n  args: [{\n    name: 'translate',\n    pure: false // required to update the value when the promise is resolved\n  }]\n}];\n/** @nocollapse */\nTranslatePipe.ctorParameters = () => [{\n  type: TranslateService\n}, {\n  type: ChangeDetectorRef\n}];\nif (false) {\n  /** @type {?} */\n  TranslatePipe.prototype.value;\n  /** @type {?} */\n  TranslatePipe.prototype.lastKey;\n  /** @type {?} */\n  TranslatePipe.prototype.lastParams;\n  /** @type {?} */\n  TranslatePipe.prototype.onTranslationChange;\n  /** @type {?} */\n  TranslatePipe.prototype.onLangChange;\n  /** @type {?} */\n  TranslatePipe.prototype.onDefaultLangChange;\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslatePipe.prototype.translate;\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslatePipe.prototype._ref;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction TranslateModuleConfig() {}\nif (false) {\n  /** @type {?|undefined} */\n  TranslateModuleConfig.prototype.loader;\n  /** @type {?|undefined} */\n  TranslateModuleConfig.prototype.compiler;\n  /** @type {?|undefined} */\n  TranslateModuleConfig.prototype.parser;\n  /** @type {?|undefined} */\n  TranslateModuleConfig.prototype.missingTranslationHandler;\n  /** @type {?|undefined} */\n  TranslateModuleConfig.prototype.isolate;\n  /** @type {?|undefined} */\n  TranslateModuleConfig.prototype.extend;\n  /** @type {?|undefined} */\n  TranslateModuleConfig.prototype.useDefaultLang;\n  /** @type {?|undefined} */\n  TranslateModuleConfig.prototype.defaultLanguage;\n}\nclass TranslateModule {\n  /**\n   * Use this method in your root module to provide the TranslateService\n   * @param {?=} config\n   * @return {?}\n   */\n  static forRoot(config = {}) {\n    return {\n      ngModule: TranslateModule,\n      providers: [config.loader || {\n        provide: TranslateLoader,\n        useClass: TranslateFakeLoader\n      }, config.compiler || {\n        provide: TranslateCompiler,\n        useClass: TranslateFakeCompiler\n      }, config.parser || {\n        provide: TranslateParser,\n        useClass: TranslateDefaultParser\n      }, config.missingTranslationHandler || {\n        provide: MissingTranslationHandler,\n        useClass: FakeMissingTranslationHandler\n      }, TranslateStore, {\n        provide: USE_STORE,\n        useValue: config.isolate\n      }, {\n        provide: USE_DEFAULT_LANG,\n        useValue: config.useDefaultLang\n      }, {\n        provide: USE_EXTEND,\n        useValue: config.extend\n      }, {\n        provide: DEFAULT_LANGUAGE,\n        useValue: config.defaultLanguage\n      }, TranslateService]\n    };\n  }\n  /**\n   * Use this method in your other (non root) modules to import the directive/pipe\n   * @param {?=} config\n   * @return {?}\n   */\n  static forChild(config = {}) {\n    return {\n      ngModule: TranslateModule,\n      providers: [config.loader || {\n        provide: TranslateLoader,\n        useClass: TranslateFakeLoader\n      }, config.compiler || {\n        provide: TranslateCompiler,\n        useClass: TranslateFakeCompiler\n      }, config.parser || {\n        provide: TranslateParser,\n        useClass: TranslateDefaultParser\n      }, config.missingTranslationHandler || {\n        provide: MissingTranslationHandler,\n        useClass: FakeMissingTranslationHandler\n      }, {\n        provide: USE_STORE,\n        useValue: config.isolate\n      }, {\n        provide: USE_DEFAULT_LANG,\n        useValue: config.useDefaultLang\n      }, {\n        provide: USE_EXTEND,\n        useValue: config.extend\n      }, {\n        provide: DEFAULT_LANGUAGE,\n        useValue: config.defaultLanguage\n      }, TranslateService]\n    };\n  }\n}\nTranslateModule.decorators = [{\n  type: NgModule,\n  args: [{\n    declarations: [TranslatePipe, TranslateDirective],\n    exports: [TranslatePipe, TranslateDirective]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngx-translate-core.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, USE_STORE };","map":{"version":3,"names":["Injectable","EventEmitter","InjectionToken","Inject","Directive","ElementRef","ChangeDetectorRef","Input","Pipe","NgModule","of","isObservable","forkJoin","concat","defer","take","shareReplay","map","concatMap","switchMap","TranslateLoader","prototype","getTranslation","lang","TranslateFakeLoader","decorators","type","MissingTranslationHandlerParams","key","translateService","interpolateParams","MissingTranslationHandler","handle","params","FakeMissingTranslationHandler","equals","o1","o2","t1","t2","length","keySet","Array","isArray","Object","create","isDefined","value","isObject","item","mergeDeep","target","source","output","assign","keys","forEach","TranslateParser","interpolate","expr","getValue","TranslateDefaultParser","constructor","arguments","templateMatcher","result","interpolateString","interpolateFunction","split","shift","undefined","fn","replace","substring","b","r","TranslateCompiler","compile","compileTranslations","translations","TranslateFakeCompiler","TranslateStore","currentLang","defaultLang","langs","onTranslationChange","onLangChange","onDefaultLangChange","USE_STORE","USE_DEFAULT_LANG","DEFAULT_LANGUAGE","USE_EXTEND","TranslationChangeEvent","LangChangeEvent","DefaultLangChangeEvent","TranslateService","store","currentLoader","compiler","parser","missingTranslationHandler","useDefaultLang","isolate","extend","defaultLanguage","pending","_onTranslationChange","_onLangChange","_onDefaultLangChange","_langs","_translations","_translationRequests","setDefaultLang","_defaultLang","_currentLang","retrieveTranslations","pipe","subscribe","res","changeDefaultLang","getDefaultLang","use","changeLang","loadingTranslations","next","updateLangs","error","err","setTranslation","shouldMerge","emit","getLangs","addLangs","indexOf","push","getParsedResult","observables","k","sources","arr","obj","index","get","Error","getStreamOnTranslationChange","event","stream","instant","set","reloadLang","resetLang","getBrowserLang","window","navigator","browserLang","languages","language","browserLanguage","userLanguage","getBrowserCultureLang","browserCultureLang","ctorParameters","Boolean","args","String","TranslateDirective","element","_ref","onTranslationChangeSub","checkNodes","onLangChangeSub","onDefaultLangChangeSub","translate","translateParams","currentParams","ngAfterViewChecked","forceUpdate","nodes","nativeElement","childNodes","setContent","i","node","nodeType","lastKey","lookupKey","content","getContent","trimmedContent","trim","currentValue","originalContent","updateValue","lastParams","onTranslation","markForCheck","textContent","data","ngOnDestroy","unsubscribe","selector","propDecorators","TranslatePipe","transform","query","validArgs","JSON","parse","e","SyntaxError","_dispose","name","pure","TranslateModuleConfig","loader","TranslateModule","forRoot","config","ngModule","providers","provide","useClass","useValue","forChild","declarations","exports"],"sources":["C:/Users/CSEG/Desktop/thassign/node_modules/@ngx-translate/core/fesm2015/ngx-translate-core.js"],"sourcesContent":["import { Injectable, EventEmitter, InjectionToken, Inject, Directive, ElementRef, ChangeDetectorRef, Input, Pipe, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.loader.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass TranslateLoader {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateLoader.prototype.getTranslation = function (lang) { };\n}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\nclass TranslateFakeLoader extends TranslateLoader {\n    /**\n     * @param {?} lang\n     * @return {?}\n     */\n    getTranslation(lang) {\n        return of({});\n    }\n}\nTranslateFakeLoader.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/missing-translation-handler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction MissingTranslationHandlerParams() { }\nif (false) {\n    /**\n     * the key that's missing in translation files\n     * @type {?}\n     */\n    MissingTranslationHandlerParams.prototype.key;\n    /**\n     * an instance of the service that was unable to translate the key.\n     * @type {?}\n     */\n    MissingTranslationHandlerParams.prototype.translateService;\n    /**\n     * interpolation params that were passed along for translating the given key.\n     * @type {?|undefined}\n     */\n    MissingTranslationHandlerParams.prototype.interpolateParams;\n}\n/**\n * @abstract\n */\nclass MissingTranslationHandler {\n}\nif (false) {\n    /**\n     * A function that handles missing translations.\n     *\n     * @abstract\n     * @param {?} params context for resolving a missing translation\n     * @return {?} a value or an observable\n     * If it returns a value, then this value is used.\n     * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n     * If it doesn't return then the key will be used as a value\n     */\n    MissingTranslationHandler.prototype.handle = function (params) { };\n}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\nclass FakeMissingTranslationHandler {\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    handle(params) {\n        return params.key;\n    }\n}\nFakeMissingTranslationHandler.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/util.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/* tslint:disable */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param {?} o1 Object or value to compare.\n * @param {?} o2 Object or value to compare.\n * @return {?} true if arguments are equal.\n */\nfunction equals(o1, o2) {\n    if (o1 === o2)\n        return true;\n    if (o1 === null || o2 === null)\n        return false;\n    if (o1 !== o1 && o2 !== o2)\n        return true; // NaN === NaN\n    // NaN === NaN\n    /** @type {?} */\n    let t1 = typeof o1;\n    /** @type {?} */\n    let t2 = typeof o2;\n    /** @type {?} */\n    let length;\n    /** @type {?} */\n    let key;\n    /** @type {?} */\n    let keySet;\n    if (t1 == t2 && t1 == 'object') {\n        if (Array.isArray(o1)) {\n            if (!Array.isArray(o2))\n                return false;\n            if ((length = o1.length) == o2.length) {\n                for (key = 0; key < length; key++) {\n                    if (!equals(o1[key], o2[key]))\n                        return false;\n                }\n                return true;\n            }\n        }\n        else {\n            if (Array.isArray(o2)) {\n                return false;\n            }\n            keySet = Object.create(null);\n            for (key in o1) {\n                if (!equals(o1[key], o2[key])) {\n                    return false;\n                }\n                keySet[key] = true;\n            }\n            for (key in o2) {\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\n/* tslint:enable */\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isDefined(value) {\n    return typeof value !== 'undefined' && value !== null;\n}\n/**\n * @param {?} item\n * @return {?}\n */\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n/**\n * @param {?} target\n * @param {?} source\n * @return {?}\n */\nfunction mergeDeep(target, source) {\n    /** @type {?} */\n    let output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        (key) => {\n            if (isObject(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, { [key]: source[key] });\n                }\n                else {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n            }\n            else {\n                Object.assign(output, { [key]: source[key] });\n            }\n        }));\n    }\n    return output;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.parser.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass TranslateParser {\n}\nif (false) {\n    /**\n     * Interpolates a string to replace parameters\n     * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n     * @abstract\n     * @param {?} expr\n     * @param {?=} params\n     * @return {?}\n     */\n    TranslateParser.prototype.interpolate = function (expr, params) { };\n    /**\n     * Gets a value from an object by composed key\n     * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n     * @abstract\n     * @param {?} target\n     * @param {?} key\n     * @return {?}\n     */\n    TranslateParser.prototype.getValue = function (target, key) { };\n}\nclass TranslateDefaultParser extends TranslateParser {\n    constructor() {\n        super(...arguments);\n        this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n    }\n    /**\n     * @param {?} expr\n     * @param {?=} params\n     * @return {?}\n     */\n    interpolate(expr, params) {\n        /** @type {?} */\n        let result;\n        if (typeof expr === 'string') {\n            result = this.interpolateString(expr, params);\n        }\n        else if (typeof expr === 'function') {\n            result = this.interpolateFunction(expr, params);\n        }\n        else {\n            // this should not happen, but an unrelated TranslateService test depends on it\n            result = (/** @type {?} */ (expr));\n        }\n        return result;\n    }\n    /**\n     * @param {?} target\n     * @param {?} key\n     * @return {?}\n     */\n    getValue(target, key) {\n        /** @type {?} */\n        let keys = typeof key === 'string' ? key.split('.') : [key];\n        key = '';\n        do {\n            key += keys.shift();\n            if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n                target = target[key];\n                key = '';\n            }\n            else if (!keys.length) {\n                target = undefined;\n            }\n            else {\n                key += '.';\n            }\n        } while (keys.length);\n        return target;\n    }\n    /**\n     * @private\n     * @param {?} fn\n     * @param {?=} params\n     * @return {?}\n     */\n    interpolateFunction(fn, params) {\n        return fn(params);\n    }\n    /**\n     * @private\n     * @param {?} expr\n     * @param {?=} params\n     * @return {?}\n     */\n    interpolateString(expr, params) {\n        if (!params) {\n            return expr;\n        }\n        return expr.replace(this.templateMatcher, (/**\n         * @param {?} substring\n         * @param {?} b\n         * @return {?}\n         */\n        (substring, b) => {\n            /** @type {?} */\n            let r = this.getValue(params, b);\n            return isDefined(r) ? r : substring;\n        }));\n    }\n}\nTranslateDefaultParser.decorators = [\n    { type: Injectable }\n];\nif (false) {\n    /** @type {?} */\n    TranslateDefaultParser.prototype.templateMatcher;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.compiler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass TranslateCompiler {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} value\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateCompiler.prototype.compile = function (value, lang) { };\n    /**\n     * @abstract\n     * @param {?} translations\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateCompiler.prototype.compileTranslations = function (translations, lang) { };\n}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\nclass TranslateFakeCompiler extends TranslateCompiler {\n    /**\n     * @param {?} value\n     * @param {?} lang\n     * @return {?}\n     */\n    compile(value, lang) {\n        return value;\n    }\n    /**\n     * @param {?} translations\n     * @param {?} lang\n     * @return {?}\n     */\n    compileTranslations(translations, lang) {\n        return translations;\n    }\n}\nTranslateFakeCompiler.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.store.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TranslateStore {\n    constructor() {\n        /**\n         * The lang currently used\n         */\n        this.currentLang = this.defaultLang;\n        /**\n         * a list of translations per lang\n         */\n        this.translations = {};\n        /**\n         * an array of langs\n         */\n        this.langs = [];\n        /**\n         * An EventEmitter to listen to translation change events\n         * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n         *     // do something\n         * });\n         */\n        this.onTranslationChange = new EventEmitter();\n        /**\n         * An EventEmitter to listen to lang change events\n         * onLangChange.subscribe((params: LangChangeEvent) => {\n         *     // do something\n         * });\n         */\n        this.onLangChange = new EventEmitter();\n        /**\n         * An EventEmitter to listen to default lang change events\n         * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n         *     // do something\n         * });\n         */\n        this.onDefaultLangChange = new EventEmitter();\n    }\n}\nif (false) {\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     * @type {?}\n     */\n    TranslateStore.prototype.defaultLang;\n    /**\n     * The lang currently used\n     * @type {?}\n     */\n    TranslateStore.prototype.currentLang;\n    /**\n     * a list of translations per lang\n     * @type {?}\n     */\n    TranslateStore.prototype.translations;\n    /**\n     * an array of langs\n     * @type {?}\n     */\n    TranslateStore.prototype.langs;\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @type {?}\n     */\n    TranslateStore.prototype.onTranslationChange;\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {?}\n     */\n    TranslateStore.prototype.onLangChange;\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {?}\n     */\n    TranslateStore.prototype.onDefaultLangChange;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst USE_STORE = new InjectionToken('USE_STORE');\n/** @type {?} */\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\n/** @type {?} */\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\n/** @type {?} */\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\n/**\n * @record\n */\nfunction TranslationChangeEvent() { }\nif (false) {\n    /** @type {?} */\n    TranslationChangeEvent.prototype.translations;\n    /** @type {?} */\n    TranslationChangeEvent.prototype.lang;\n}\n/**\n * @record\n */\nfunction LangChangeEvent() { }\nif (false) {\n    /** @type {?} */\n    LangChangeEvent.prototype.lang;\n    /** @type {?} */\n    LangChangeEvent.prototype.translations;\n}\n/**\n * @record\n */\nfunction DefaultLangChangeEvent() { }\nif (false) {\n    /** @type {?} */\n    DefaultLangChangeEvent.prototype.lang;\n    /** @type {?} */\n    DefaultLangChangeEvent.prototype.translations;\n}\nclass TranslateService {\n    /**\n     *\n     * @param {?} store an instance of the store (that is supposed to be unique)\n     * @param {?} currentLoader An instance of the loader currently used\n     * @param {?} compiler An instance of the compiler currently used\n     * @param {?} parser An instance of the parser currently used\n     * @param {?} missingTranslationHandler A handler for missing translations.\n     * @param {?=} useDefaultLang whether we should use default language translation when current language translation is missing.\n     * @param {?=} isolate whether this service should use the store or not\n     * @param {?=} extend To make a child module extend (and use) translations from parent modules.\n     * @param {?=} defaultLanguage Set the default language using configuration\n     */\n    constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\n        this.store = store;\n        this.currentLoader = currentLoader;\n        this.compiler = compiler;\n        this.parser = parser;\n        this.missingTranslationHandler = missingTranslationHandler;\n        this.useDefaultLang = useDefaultLang;\n        this.isolate = isolate;\n        this.extend = extend;\n        this.pending = false;\n        this._onTranslationChange = new EventEmitter();\n        this._onLangChange = new EventEmitter();\n        this._onDefaultLangChange = new EventEmitter();\n        this._langs = [];\n        this._translations = {};\n        this._translationRequests = {};\n        /** set the default language from configuration */\n        if (defaultLanguage) {\n            this.setDefaultLang(defaultLanguage);\n        }\n    }\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n    get onTranslationChange() {\n        return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n    get onLangChange() {\n        return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n    get onDefaultLangChange() {\n        return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     * @return {?}\n     */\n    get defaultLang() {\n        return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n    /**\n     * @param {?} defaultLang\n     * @return {?}\n     */\n    set defaultLang(defaultLang) {\n        if (this.isolate) {\n            this._defaultLang = defaultLang;\n        }\n        else {\n            this.store.defaultLang = defaultLang;\n        }\n    }\n    /**\n     * The lang currently used\n     * @return {?}\n     */\n    get currentLang() {\n        return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n    /**\n     * @param {?} currentLang\n     * @return {?}\n     */\n    set currentLang(currentLang) {\n        if (this.isolate) {\n            this._currentLang = currentLang;\n        }\n        else {\n            this.store.currentLang = currentLang;\n        }\n    }\n    /**\n     * an array of langs\n     * @return {?}\n     */\n    get langs() {\n        return this.isolate ? this._langs : this.store.langs;\n    }\n    /**\n     * @param {?} langs\n     * @return {?}\n     */\n    set langs(langs) {\n        if (this.isolate) {\n            this._langs = langs;\n        }\n        else {\n            this.store.langs = langs;\n        }\n    }\n    /**\n     * a list of translations per lang\n     * @return {?}\n     */\n    get translations() {\n        return this.isolate ? this._translations : this.store.translations;\n    }\n    /**\n     * @param {?} translations\n     * @return {?}\n     */\n    set translations(translations) {\n        if (this.isolate) {\n            this._translations = translations;\n        }\n        else {\n            this.store.translations = translations;\n        }\n    }\n    /**\n     * Sets the default language to use as a fallback\n     * @param {?} lang\n     * @return {?}\n     */\n    setDefaultLang(lang) {\n        if (lang === this.defaultLang) {\n            return;\n        }\n        /** @type {?} */\n        let pending = this.retrieveTranslations(lang);\n        if (typeof pending !== \"undefined\") {\n            // on init set the defaultLang immediately\n            if (this.defaultLang == null) {\n                this.defaultLang = lang;\n            }\n            pending.pipe(take(1))\n                .subscribe((/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                this.changeDefaultLang(lang);\n            }));\n        }\n        else { // we already have this language\n            this.changeDefaultLang(lang);\n        }\n    }\n    /**\n     * Gets the default language used\n     * @return {?}\n     */\n    getDefaultLang() {\n        return this.defaultLang;\n    }\n    /**\n     * Changes the lang currently used\n     * @param {?} lang\n     * @return {?}\n     */\n    use(lang) {\n        // don't change the language if the language given is already selected\n        if (lang === this.currentLang) {\n            return of(this.translations[lang]);\n        }\n        /** @type {?} */\n        let pending = this.retrieveTranslations(lang);\n        if (typeof pending !== \"undefined\") {\n            // on init set the currentLang immediately\n            if (!this.currentLang) {\n                this.currentLang = lang;\n            }\n            pending.pipe(take(1))\n                .subscribe((/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                this.changeLang(lang);\n            }));\n            return pending;\n        }\n        else { // we have this language, return an Observable\n            this.changeLang(lang);\n            return of(this.translations[lang]);\n        }\n    }\n    /**\n     * Retrieves the given translations\n     * @private\n     * @param {?} lang\n     * @return {?}\n     */\n    retrieveTranslations(lang) {\n        /** @type {?} */\n        let pending;\n        // if this language is unavailable or extend is true, ask for it\n        if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n            this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n            pending = this._translationRequests[lang];\n        }\n        return pending;\n    }\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     * @param {?} lang\n     * @return {?}\n     */\n    getTranslation(lang) {\n        this.pending = true;\n        /** @type {?} */\n        const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\n        this.loadingTranslations = loadingTranslations.pipe(map((/**\n         * @param {?} res\n         * @return {?}\n         */\n        (res) => this.compiler.compileTranslations(res, lang))), shareReplay(1), take(1));\n        this.loadingTranslations\n            .subscribe({\n            next: (/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                this.translations[lang] = this.extend && this.translations[lang] ? Object.assign(Object.assign({}, res), this.translations[lang]) : res;\n                this.updateLangs();\n                this.pending = false;\n            }),\n            error: (/**\n             * @param {?} err\n             * @return {?}\n             */\n            (err) => {\n                this.pending = false;\n            })\n        });\n        return loadingTranslations;\n    }\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     * @param {?} lang\n     * @param {?} translations\n     * @param {?=} shouldMerge\n     * @return {?}\n     */\n    setTranslation(lang, translations, shouldMerge = false) {\n        translations = this.compiler.compileTranslations(translations, lang);\n        if ((shouldMerge || this.extend) && this.translations[lang]) {\n            this.translations[lang] = mergeDeep(this.translations[lang], translations);\n        }\n        else {\n            this.translations[lang] = translations;\n        }\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Returns an array of currently available langs\n     * @return {?}\n     */\n    getLangs() {\n        return this.langs;\n    }\n    /**\n     * Add available langs\n     * @param {?} langs\n     * @return {?}\n     */\n    addLangs(langs) {\n        langs.forEach((/**\n         * @param {?} lang\n         * @return {?}\n         */\n        (lang) => {\n            if (this.langs.indexOf(lang) === -1) {\n                this.langs.push(lang);\n            }\n        }));\n    }\n    /**\n     * Update the list of available langs\n     * @private\n     * @return {?}\n     */\n    updateLangs() {\n        this.addLangs(Object.keys(this.translations));\n    }\n    /**\n     * Returns the parsed result of the translations\n     * @param {?} translations\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?}\n     */\n    getParsedResult(translations, key, interpolateParams) {\n        /** @type {?} */\n        let res;\n        if (key instanceof Array) {\n            /** @type {?} */\n            let result = {};\n            /** @type {?} */\n            let observables = false;\n            for (let k of key) {\n                result[k] = this.getParsedResult(translations, k, interpolateParams);\n                if (isObservable(result[k])) {\n                    observables = true;\n                }\n            }\n            if (observables) {\n                /** @type {?} */\n                const sources = key.map((/**\n                 * @param {?} k\n                 * @return {?}\n                 */\n                k => isObservable(result[k]) ? result[k] : of((/** @type {?} */ (result[k])))));\n                return forkJoin(sources).pipe(map((/**\n                 * @param {?} arr\n                 * @return {?}\n                 */\n                (arr) => {\n                    /** @type {?} */\n                    let obj = {};\n                    arr.forEach((/**\n                     * @param {?} value\n                     * @param {?} index\n                     * @return {?}\n                     */\n                    (value, index) => {\n                        obj[key[index]] = value;\n                    }));\n                    return obj;\n                })));\n            }\n            return result;\n        }\n        if (translations) {\n            res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n        }\n        if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n            res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n        }\n        if (typeof res === \"undefined\") {\n            /** @type {?} */\n            let params = { key, translateService: this };\n            if (typeof interpolateParams !== 'undefined') {\n                params.interpolateParams = interpolateParams;\n            }\n            res = this.missingTranslationHandler.handle(params);\n        }\n        return typeof res !== \"undefined\" ? res : key;\n    }\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} the translated key, or an object of translated keys\n     */\n    get(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        // check if we are loading a new translation to use\n        if (this.pending) {\n            return this.loadingTranslations.pipe(concatMap((/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                res = this.getParsedResult(res, key, interpolateParams);\n                return isObservable(res) ? res : of(res);\n            })));\n        }\n        else {\n            /** @type {?} */\n            let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n            return isObservable(res) ? res : of(res);\n        }\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the translation changes.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} A stream of the translated key, or an object of translated keys\n     */\n    getStreamOnTranslationChange(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        return concat(defer((/**\n         * @return {?}\n         */\n        () => this.get(key, interpolateParams))), this.onTranslationChange.pipe(switchMap((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            /** @type {?} */\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\n            if (typeof res.subscribe === 'function') {\n                return res;\n            }\n            else {\n                return of(res);\n            }\n        }))));\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} A stream of the translated key, or an object of translated keys\n     */\n    stream(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        return concat(defer((/**\n         * @return {?}\n         */\n        () => this.get(key, interpolateParams))), this.onLangChange.pipe(switchMap((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            /** @type {?} */\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\n            return isObservable(res) ? res : of(res);\n        }))));\n    }\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?}\n     */\n    instant(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        /** @type {?} */\n        let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        if (isObservable(res)) {\n            if (key instanceof Array) {\n                /** @type {?} */\n                let obj = {};\n                key.forEach((/**\n                 * @param {?} value\n                 * @param {?} index\n                 * @return {?}\n                 */\n                (value, index) => {\n                    obj[key[index]] = key[index];\n                }));\n                return obj;\n            }\n            return key;\n        }\n        else {\n            return res;\n        }\n    }\n    /**\n     * Sets the translated value of a key, after compiling it\n     * @param {?} key\n     * @param {?} value\n     * @param {?=} lang\n     * @return {?}\n     */\n    set(key, value, lang = this.currentLang) {\n        this.translations[lang][key] = this.compiler.compile(value, lang);\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Changes the current lang\n     * @private\n     * @param {?} lang\n     * @return {?}\n     */\n    changeLang(lang) {\n        this.currentLang = lang;\n        this.onLangChange.emit({ lang: lang, translations: this.translations[lang] });\n        // if there is no default lang, use the one that we just set\n        if (this.defaultLang == null) {\n            this.changeDefaultLang(lang);\n        }\n    }\n    /**\n     * Changes the default lang\n     * @private\n     * @param {?} lang\n     * @return {?}\n     */\n    changeDefaultLang(lang) {\n        this.defaultLang = lang;\n        this.onDefaultLangChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Allows to reload the lang file from the file\n     * @param {?} lang\n     * @return {?}\n     */\n    reloadLang(lang) {\n        this.resetLang(lang);\n        return this.getTranslation(lang);\n    }\n    /**\n     * Deletes inner translation\n     * @param {?} lang\n     * @return {?}\n     */\n    resetLang(lang) {\n        this._translationRequests[lang] = undefined;\n        this.translations[lang] = undefined;\n    }\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     * @return {?}\n     */\n    getBrowserLang() {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        /** @type {?} */\n        let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n        if (typeof browserLang === 'undefined') {\n            return undefined;\n        }\n        if (browserLang.indexOf('-') !== -1) {\n            browserLang = browserLang.split('-')[0];\n        }\n        if (browserLang.indexOf('_') !== -1) {\n            browserLang = browserLang.split('_')[0];\n        }\n        return browserLang;\n    }\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     * @return {?}\n     */\n    getBrowserCultureLang() {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        /** @type {?} */\n        let browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n        return browserCultureLang;\n    }\n}\nTranslateService.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nTranslateService.ctorParameters = () => [\n    { type: TranslateStore },\n    { type: TranslateLoader },\n    { type: TranslateCompiler },\n    { type: TranslateParser },\n    { type: MissingTranslationHandler },\n    { type: Boolean, decorators: [{ type: Inject, args: [USE_DEFAULT_LANG,] }] },\n    { type: Boolean, decorators: [{ type: Inject, args: [USE_STORE,] }] },\n    { type: Boolean, decorators: [{ type: Inject, args: [USE_EXTEND,] }] },\n    { type: String, decorators: [{ type: Inject, args: [DEFAULT_LANGUAGE,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.loadingTranslations;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.pending;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._onTranslationChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._onLangChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._onDefaultLangChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._defaultLang;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._currentLang;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._langs;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._translations;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._translationRequests;\n    /** @type {?} */\n    TranslateService.prototype.store;\n    /** @type {?} */\n    TranslateService.prototype.currentLoader;\n    /** @type {?} */\n    TranslateService.prototype.compiler;\n    /** @type {?} */\n    TranslateService.prototype.parser;\n    /** @type {?} */\n    TranslateService.prototype.missingTranslationHandler;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.useDefaultLang;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.isolate;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.extend;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TranslateDirective {\n    /**\n     * @param {?} translateService\n     * @param {?} element\n     * @param {?} _ref\n     */\n    constructor(translateService, element, _ref) {\n        this.translateService = translateService;\n        this.element = element;\n        this._ref = _ref;\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\n        if (!this.onTranslationChangeSub) {\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                if (event.lang === this.translateService.currentLang) {\n                    this.checkNodes(true, event.translations);\n                }\n            }));\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChangeSub) {\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                this.checkNodes(true, event.translations);\n            }));\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                this.checkNodes(true);\n            }));\n        }\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    set translate(key) {\n        if (key) {\n            this.key = key;\n            this.checkNodes();\n        }\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    set translateParams(params) {\n        if (!equals(this.currentParams, params)) {\n            this.currentParams = params;\n            this.checkNodes(true);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        this.checkNodes();\n    }\n    /**\n     * @param {?=} forceUpdate\n     * @param {?=} translations\n     * @return {?}\n     */\n    checkNodes(forceUpdate = false, translations) {\n        /** @type {?} */\n        let nodes = this.element.nativeElement.childNodes;\n        // if the element is empty\n        if (!nodes.length) {\n            // we add the key as content\n            this.setContent(this.element.nativeElement, this.key);\n            nodes = this.element.nativeElement.childNodes;\n        }\n        for (let i = 0; i < nodes.length; ++i) {\n            /** @type {?} */\n            let node = nodes[i];\n            if (node.nodeType === 3) { // node type 3 is a text node\n                // node type 3 is a text node\n                /** @type {?} */\n                let key;\n                if (forceUpdate) {\n                    node.lastKey = null;\n                }\n                if (isDefined(node.lookupKey)) {\n                    key = node.lookupKey;\n                }\n                else if (this.key) {\n                    key = this.key;\n                }\n                else {\n                    /** @type {?} */\n                    let content = this.getContent(node);\n                    /** @type {?} */\n                    let trimmedContent = content.trim();\n                    if (trimmedContent.length) {\n                        node.lookupKey = trimmedContent;\n                        // we want to use the content as a key, not the translation value\n                        if (content !== node.currentValue) {\n                            key = trimmedContent;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = content || node.originalContent;\n                        }\n                        else if (node.originalContent) { // the content seems ok, but the lang has changed\n                            // the current content is the translation, not the key, use the last real content as key\n                            key = node.originalContent.trim();\n                        }\n                        else if (content !== node.currentValue) {\n                            // we want to use the content as a key, not the translation value\n                            key = trimmedContent;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = content || node.originalContent;\n                        }\n                    }\n                }\n                this.updateValue(key, node, translations);\n            }\n        }\n    }\n    /**\n     * @param {?} key\n     * @param {?} node\n     * @param {?} translations\n     * @return {?}\n     */\n    updateValue(key, node, translations) {\n        if (key) {\n            if (node.lastKey === key && this.lastParams === this.currentParams) {\n                return;\n            }\n            this.lastParams = this.currentParams;\n            /** @type {?} */\n            let onTranslation = (/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                if (res !== key) {\n                    node.lastKey = key;\n                }\n                if (!node.originalContent) {\n                    node.originalContent = this.getContent(node);\n                }\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n                // we replace in the original content to preserve spaces that we might have trimmed\n                this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n                this._ref.markForCheck();\n            });\n            if (isDefined(translations)) {\n                /** @type {?} */\n                let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n                if (isObservable(res)) {\n                    res.subscribe(onTranslation);\n                }\n                else {\n                    onTranslation(res);\n                }\n            }\n            else {\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n            }\n        }\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    getContent(node) {\n        return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n    /**\n     * @param {?} node\n     * @param {?} content\n     * @return {?}\n     */\n    setContent(node, content) {\n        if (isDefined(node.textContent)) {\n            node.textContent = content;\n        }\n        else {\n            node.data = content;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.onLangChangeSub) {\n            this.onLangChangeSub.unsubscribe();\n        }\n        if (this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub.unsubscribe();\n        }\n        if (this.onTranslationChangeSub) {\n            this.onTranslationChangeSub.unsubscribe();\n        }\n    }\n}\nTranslateDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[translate],[ngx-translate]'\n            },] }\n];\n/** @nocollapse */\nTranslateDirective.ctorParameters = () => [\n    { type: TranslateService },\n    { type: ElementRef },\n    { type: ChangeDetectorRef }\n];\nTranslateDirective.propDecorators = {\n    translate: [{ type: Input }],\n    translateParams: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    TranslateDirective.prototype.key;\n    /** @type {?} */\n    TranslateDirective.prototype.lastParams;\n    /** @type {?} */\n    TranslateDirective.prototype.currentParams;\n    /** @type {?} */\n    TranslateDirective.prototype.onLangChangeSub;\n    /** @type {?} */\n    TranslateDirective.prototype.onDefaultLangChangeSub;\n    /** @type {?} */\n    TranslateDirective.prototype.onTranslationChangeSub;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateDirective.prototype.translateService;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateDirective.prototype.element;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateDirective.prototype._ref;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TranslatePipe {\n    /**\n     * @param {?} translate\n     * @param {?} _ref\n     */\n    constructor(translate, _ref) {\n        this.translate = translate;\n        this._ref = _ref;\n        this.value = '';\n    }\n    /**\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @param {?=} translations\n     * @return {?}\n     */\n    updateValue(key, interpolateParams, translations) {\n        /** @type {?} */\n        let onTranslation = (/**\n         * @param {?} res\n         * @return {?}\n         */\n        (res) => {\n            this.value = res !== undefined ? res : key;\n            this.lastKey = key;\n            this._ref.markForCheck();\n        });\n        if (translations) {\n            /** @type {?} */\n            let res = this.translate.getParsedResult(translations, key, interpolateParams);\n            if (isObservable(res.subscribe)) {\n                res.subscribe(onTranslation);\n            }\n            else {\n                onTranslation(res);\n            }\n        }\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n    /**\n     * @param {?} query\n     * @param {...?} args\n     * @return {?}\n     */\n    transform(query, ...args) {\n        if (!query || !query.length) {\n            return query;\n        }\n        // if we ask another time for the same key, return the last value\n        if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n            return this.value;\n        }\n        /** @type {?} */\n        let interpolateParams;\n        if (isDefined(args[0]) && args.length) {\n            if (typeof args[0] === 'string' && args[0].length) {\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n                /** @type {?} */\n                let validArgs = args[0]\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n                try {\n                    interpolateParams = JSON.parse(validArgs);\n                }\n                catch (e) {\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n                }\n            }\n            else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n                interpolateParams = args[0];\n            }\n        }\n        // store the query, in case it changes\n        this.lastKey = query;\n        // store the params, in case they change\n        this.lastParams = args;\n        // set the value\n        this.updateValue(query, interpolateParams);\n        // if there is a subscription to onLangChange, clean it\n        this._dispose();\n        // subscribe to onTranslationChange event, in case the translations change\n        if (!this.onTranslationChange) {\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                if (this.lastKey && event.lang === this.translate.currentLang) {\n                    this.lastKey = null;\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            }));\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChange) {\n            this.onLangChange = this.translate.onLangChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                if (this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            }));\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChange) {\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe((/**\n             * @return {?}\n             */\n            () => {\n                if (this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams);\n                }\n            }));\n        }\n        return this.value;\n    }\n    /**\n     * Clean any existing subscription to change events\n     * @private\n     * @return {?}\n     */\n    _dispose() {\n        if (typeof this.onTranslationChange !== 'undefined') {\n            this.onTranslationChange.unsubscribe();\n            this.onTranslationChange = undefined;\n        }\n        if (typeof this.onLangChange !== 'undefined') {\n            this.onLangChange.unsubscribe();\n            this.onLangChange = undefined;\n        }\n        if (typeof this.onDefaultLangChange !== 'undefined') {\n            this.onDefaultLangChange.unsubscribe();\n            this.onDefaultLangChange = undefined;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._dispose();\n    }\n}\nTranslatePipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{\n                name: 'translate',\n                pure: false // required to update the value when the promise is resolved\n            },] }\n];\n/** @nocollapse */\nTranslatePipe.ctorParameters = () => [\n    { type: TranslateService },\n    { type: ChangeDetectorRef }\n];\nif (false) {\n    /** @type {?} */\n    TranslatePipe.prototype.value;\n    /** @type {?} */\n    TranslatePipe.prototype.lastKey;\n    /** @type {?} */\n    TranslatePipe.prototype.lastParams;\n    /** @type {?} */\n    TranslatePipe.prototype.onTranslationChange;\n    /** @type {?} */\n    TranslatePipe.prototype.onLangChange;\n    /** @type {?} */\n    TranslatePipe.prototype.onDefaultLangChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslatePipe.prototype.translate;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslatePipe.prototype._ref;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction TranslateModuleConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.loader;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.compiler;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.parser;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.missingTranslationHandler;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.isolate;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.extend;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.useDefaultLang;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.defaultLanguage;\n}\nclass TranslateModule {\n    /**\n     * Use this method in your root module to provide the TranslateService\n     * @param {?=} config\n     * @return {?}\n     */\n    static forRoot(config = {}) {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                TranslateStore,\n                { provide: USE_STORE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                { provide: USE_EXTEND, useValue: config.extend },\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\n                TranslateService\n            ]\n        };\n    }\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     * @param {?=} config\n     * @return {?}\n     */\n    static forChild(config = {}) {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                { provide: USE_STORE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                { provide: USE_EXTEND, useValue: config.extend },\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\n                TranslateService\n            ]\n        };\n    }\n}\nTranslateModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    TranslatePipe,\n                    TranslateDirective\n                ],\n                exports: [\n                    TranslatePipe,\n                    TranslateDirective\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngx-translate-core.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, USE_STORE };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}