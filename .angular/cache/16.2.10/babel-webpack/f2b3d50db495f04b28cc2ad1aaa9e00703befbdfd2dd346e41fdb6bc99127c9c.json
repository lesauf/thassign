{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport { parsePhoneNumberFromString } from 'libphonenumber-js';\nexport const IS_PHONE_NUMBER = 'isPhoneNumber';\n/**\n * Checks if the string is a valid phone number. To successfully validate any phone number the text must include\n * the intl. calling code, if the calling code wont be provided then the region must be set.\n *\n * @param value the potential phone number string to test\n * @param region 2 characters uppercase country code (e.g. DE, US, CH) for country specific validation.\n * If text doesn't start with the international calling code (e.g. +41), then you must set this parameter.\n */\nexport function isPhoneNumber(value, region) {\n  try {\n    const phoneNum = parsePhoneNumberFromString(value, region);\n    const result = phoneNum === null || phoneNum === void 0 ? void 0 : phoneNum.isValid();\n    return !!result;\n  } catch (error) {\n    // logging?\n    return false;\n  }\n}\n/**\n * Checks if the string is a valid phone number. To successfully validate any phone number the text must include\n * the intl. calling code, if the calling code wont be provided then the region must be set.\n *\n * @param region 2 characters uppercase country code (e.g. DE, US, CH) for country specific validation.\n * If text doesn't start with the international calling code (e.g. +41), then you must set this parameter.\n */\nexport function IsPhoneNumber(region, validationOptions) {\n  return ValidateBy({\n    name: IS_PHONE_NUMBER,\n    constraints: [region],\n    validator: {\n      validate: (value, args) => isPhoneNumber(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a valid phone number', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","parsePhoneNumberFromString","IS_PHONE_NUMBER","isPhoneNumber","value","region","phoneNum","result","isValid","error","IsPhoneNumber","validationOptions","name","constraints","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/CSEG/Desktop/thassign/node_modules/class-validator/esm2015/decorator/string/IsPhoneNumber.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport { parsePhoneNumberFromString } from 'libphonenumber-js';\nexport const IS_PHONE_NUMBER = 'isPhoneNumber';\n/**\n * Checks if the string is a valid phone number. To successfully validate any phone number the text must include\n * the intl. calling code, if the calling code wont be provided then the region must be set.\n *\n * @param value the potential phone number string to test\n * @param region 2 characters uppercase country code (e.g. DE, US, CH) for country specific validation.\n * If text doesn't start with the international calling code (e.g. +41), then you must set this parameter.\n */\nexport function isPhoneNumber(value, region) {\n    try {\n        const phoneNum = parsePhoneNumberFromString(value, region);\n        const result = phoneNum === null || phoneNum === void 0 ? void 0 : phoneNum.isValid();\n        return !!result;\n    }\n    catch (error) {\n        // logging?\n        return false;\n    }\n}\n/**\n * Checks if the string is a valid phone number. To successfully validate any phone number the text must include\n * the intl. calling code, if the calling code wont be provided then the region must be set.\n *\n * @param region 2 characters uppercase country code (e.g. DE, US, CH) for country specific validation.\n * If text doesn't start with the international calling code (e.g. +41), then you must set this parameter.\n */\nexport function IsPhoneNumber(region, validationOptions) {\n    return ValidateBy({\n        name: IS_PHONE_NUMBER,\n        constraints: [region],\n        validator: {\n            validate: (value, args) => isPhoneNumber(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a valid phone number', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,SAASC,0BAA0B,QAAQ,mBAAmB;AAC9D,OAAO,MAAMC,eAAe,GAAG,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,KAAK,EAAEC,MAAM,EAAE;EACzC,IAAI;IACA,MAAMC,QAAQ,GAAGL,0BAA0B,CAACG,KAAK,EAAEC,MAAM,CAAC;IAC1D,MAAME,MAAM,GAAGD,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACE,OAAO,CAAC,CAAC;IACrF,OAAO,CAAC,CAACD,MAAM;EACnB,CAAC,CACD,OAAOE,KAAK,EAAE;IACV;IACA,OAAO,KAAK;EAChB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACL,MAAM,EAAEM,iBAAiB,EAAE;EACrD,OAAOX,UAAU,CAAC;IACdY,IAAI,EAAEV,eAAe;IACrBW,WAAW,EAAE,CAACR,MAAM,CAAC;IACrBS,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACX,KAAK,EAAEY,IAAI,KAAKb,aAAa,CAACC,KAAK,EAAEY,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC,CAAC;MAChHI,cAAc,EAAElB,YAAY,CAACmB,UAAU,IAAIA,UAAU,GAAG,wCAAwC,EAAEP,iBAAiB;IACvH;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}