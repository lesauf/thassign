{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_ID, NgModule, Injectable, InjectionToken, Inject, inject, NgZone, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { Subject, BehaviorSubject, Observable, merge, asapScheduler, of, fromEvent } from 'rxjs';\nimport { filter, debounceTime, map, switchMap, takeUntil, take, tap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/browser-provider.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n * @param {?} _document\n * @param {?} platformId\n * @return {?}\n */\nfunction removeStyles(_document, platformId) {\n  return (\n    /**\n    * @return {?}\n    */\n    () => {\n      if (isPlatformBrowser(platformId)) {\n        /** @type {?} */\n        const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n        // RegExp constructor should only be used if passing a variable to the constructor.\n        // When using static regular expression it is more performant to use reg exp literal.\n        // This is also needed to provide Safari 9 compatibility, please see\n        // https://stackoverflow.com/questions/37919802 for more discussion.\n        /** @type {?} */\n        const classRegex = /\\bflex-layout-.+?\\b/g;\n        elements.forEach(\n        /**\n        * @param {?} el\n        * @return {?}\n        */\n        el => {\n          el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ? el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n        });\n      }\n    }\n  );\n}\n/**\n *  Provider to remove SSR styles on the browser\n * @type {?}\n */\nconst BROWSER_PROVIDER = {\n  provide: /** @type {?} */APP_BOOTSTRAP_LISTENER,\n  useFactory: removeStyles,\n  deps: [DOCUMENT, PLATFORM_ID],\n  multi: true\n};\n/** @type {?} */\nconst CLASS_NAME = 'flex-layout-';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * *****************************************************************\n * Define module for common Angular Layout utilities\n * *****************************************************************\n */\nclass CoreModule {}\nCoreModule.decorators = [{\n  type: NgModule,\n  args: [{\n    providers: [BROWSER_PROVIDER]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-change.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nclass MediaChange {\n  /**\n   * @param {?=} matches whether the mediaQuery is currently activated\n   * @param {?=} mediaQuery e.g. (min-width: 600px) and (max-width: 959px)\n   * @param {?=} mqAlias e.g. gt-sm, md, gt-lg\n   * @param {?=} suffix e.g. GtSM, Md, GtLg\n   * @param {?=} priority the priority of activation for the given breakpoint\n   */\n  constructor(matches = false, mediaQuery = 'all', mqAlias = '', suffix = '', priority = 0) {\n    this.matches = matches;\n    this.mediaQuery = mediaQuery;\n    this.mqAlias = mqAlias;\n    this.suffix = suffix;\n    this.priority = priority;\n    this.property = '';\n  }\n  /**\n   * Create an exact copy of the MediaChange\n   * @return {?}\n   */\n  clone() {\n    return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/stylesheet-map/stylesheet-map.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\nclass StylesheetMap {\n  constructor() {\n    this.stylesheet = new Map();\n  }\n  /**\n   * Add an individual style to an HTML element\n   * @param {?} element\n   * @param {?} style\n   * @param {?} value\n   * @return {?}\n   */\n  addStyleToElement(element, style, value) {\n    /** @type {?} */\n    const stylesheet = this.stylesheet.get(element);\n    if (stylesheet) {\n      stylesheet.set(style, value);\n    } else {\n      this.stylesheet.set(element, new Map([[style, value]]));\n    }\n  }\n  /**\n   * Clear the virtual stylesheet\n   * @return {?}\n   */\n  clearStyles() {\n    this.stylesheet.clear();\n  }\n  /**\n   * Retrieve a given style for an HTML element\n   * @param {?} el\n   * @param {?} styleName\n   * @return {?}\n   */\n  getStyleForElement(el, styleName) {\n    /** @type {?} */\n    const styles = this.stylesheet.get(el);\n    /** @type {?} */\n    let value = '';\n    if (styles) {\n      /** @type {?} */\n      const style = styles.get(styleName);\n      if (typeof style === 'number' || typeof style === 'string') {\n        value = style + '';\n      }\n    }\n    return value;\n  }\n}\n/** @nocollapse */\nStylesheetMap.ɵprov = ɵɵdefineInjectable({\n  factory: function StylesheetMap_Factory() {\n    return new StylesheetMap();\n  },\n  token: StylesheetMap,\n  providedIn: \"root\"\n});\nStylesheetMap.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/stylesheet-map/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/library-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DEFAULT_CONFIG = {\n  addFlexToParent: true,\n  addOrientationBps: false,\n  disableDefaultBps: false,\n  disableVendorPrefixes: false,\n  serverLoaded: false,\n  useColumnBasisZero: true,\n  printWithBreakpoints: [],\n  mediaTriggerAutoRestore: true,\n  ssrObserveBreakpoints: []\n};\n/** @type {?} */\nconst LAYOUT_CONFIG = new InjectionToken('Flex Layout token, config options for the library', {\n  providedIn: 'root',\n  factory:\n  /**\n  * @return {?}\n  */\n  () => DEFAULT_CONFIG\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/server-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n * @type {?}\n */\nconst SERVER_TOKEN = new InjectionToken('FlexLayoutServerLoaded', {\n  providedIn: 'root',\n  factory:\n  /**\n  * @return {?}\n  */\n  () => false\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/breakpoint-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst BREAKPOINT = new InjectionToken('Flex Layout token, collect all breakpoints into one provider', {\n  providedIn: 'root',\n  factory:\n  /**\n  * @return {?}\n  */\n  () => null\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/add-alias.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction mergeAlias(dest, source) {\n  dest = dest ? dest.clone() : new MediaChange();\n  if (source) {\n    dest.mqAlias = source.alias;\n    dest.mediaQuery = source.mediaQuery;\n    dest.suffix = /** @type {?} */source.suffix;\n    dest.priority = /** @type {?} */source.priority;\n  }\n  return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: utils/layout-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @type {?}\n */\nconst INLINE = 'inline';\n/** @type {?} */\nconst LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];\n/**\n * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles\n * @param {?} value\n * @return {?}\n */\nfunction buildLayoutCSS(value) {\n  let [direction, wrap, isInline] = validateValue(value);\n  return buildCSS(direction, wrap, isInline);\n}\n/**\n * Validate the value to be one of the acceptable value options\n * Use default fallback of 'row'\n * @param {?} value\n * @return {?}\n */\nfunction validateValue(value) {\n  value = value ? value.toLowerCase() : '';\n  let [direction, wrap, inline] = value.split(' ');\n  // First value must be the `flex-direction`\n  if (!LAYOUT_VALUES.find(\n  /**\n  * @param {?} x\n  * @return {?}\n  */\n  x => x === direction)) {\n    direction = LAYOUT_VALUES[0];\n  }\n  if (wrap === INLINE) {\n    wrap = inline !== INLINE ? inline : '';\n    inline = INLINE;\n  }\n  return [direction, validateWrapValue(wrap), !!inline];\n}\n/**\n * Convert layout-wrap='<value>' to expected flex-wrap style\n * @param {?} value\n * @return {?}\n */\nfunction validateWrapValue(value) {\n  if (!!value) {\n    switch (value.toLowerCase()) {\n      case 'reverse':\n      case 'wrap-reverse':\n      case 'reverse-wrap':\n        value = 'wrap-reverse';\n        break;\n      case 'no':\n      case 'none':\n      case 'nowrap':\n        value = 'nowrap';\n        break;\n      // All other values fallback to 'wrap'\n      default:\n        value = 'wrap';\n        break;\n    }\n  }\n  return value;\n}\n/**\n * Build the CSS that should be assigned to the element instance\n * BUG:\n *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.\n *      Use height instead if possible; height : <xxx>vh;\n *\n *  This way any padding or border specified on the child elements are\n *  laid out and drawn inside that element's specified width and height.\n * @param {?} direction\n * @param {?=} wrap\n * @param {?=} inline\n * @return {?}\n */\nfunction buildCSS(direction, wrap = null, inline = false) {\n  return {\n    'display': inline ? 'inline-flex' : 'flex',\n    'box-sizing': 'border-box',\n    'flex-direction': direction,\n    'flex-wrap': !!wrap ? wrap : null\n  };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/base/base2.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass BaseDirective2 {\n  /**\n   * @protected\n   * @param {?} elementRef\n   * @param {?} styleBuilder\n   * @param {?} styler\n   * @param {?} marshal\n   */\n  constructor(elementRef, styleBuilder, styler, marshal) {\n    this.elementRef = elementRef;\n    this.styleBuilder = styleBuilder;\n    this.styler = styler;\n    this.marshal = marshal;\n    this.DIRECTIVE_KEY = '';\n    this.inputs = [];\n    /**\n     * The most recently used styles for the builder\n     */\n    this.mru = {};\n    this.destroySubject = new Subject();\n    /**\n     * Cache map for style computation\n     */\n    this.styleCache = new Map();\n  }\n  /**\n   * Access to host element's parent DOM node\n   * @protected\n   * @return {?}\n   */\n  get parentElement() {\n    return this.elementRef.nativeElement.parentElement;\n  }\n  /**\n   * Access to the HTMLElement for the directive\n   * @protected\n   * @return {?}\n   */\n  get nativeElement() {\n    return this.elementRef.nativeElement;\n  }\n  /**\n   * Access to the activated value for the directive\n   * @return {?}\n   */\n  get activatedValue() {\n    return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set activatedValue(value) {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value, this.marshal.activatedAlias);\n  }\n  /**\n   * For \\@Input changes\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    Object.keys(changes).forEach(\n    /**\n    * @param {?} key\n    * @return {?}\n    */\n    key => {\n      if (this.inputs.indexOf(key) !== -1) {\n        /** @type {?} */\n        const bp = key.split('.').slice(1).join('.');\n        /** @type {?} */\n        const val = changes[key].currentValue;\n        this.setValue(val, bp);\n      }\n    });\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.destroySubject.next();\n    this.destroySubject.complete();\n    this.marshal.releaseElement(this.nativeElement);\n  }\n  /**\n   * Register with central marshaller service\n   * @protected\n   * @param {?=} extraTriggers\n   * @return {?}\n   */\n  init(extraTriggers = []) {\n    this.marshal.init(this.elementRef.nativeElement, this.DIRECTIVE_KEY, this.updateWithValue.bind(this), this.clearStyles.bind(this), extraTriggers);\n  }\n  /**\n   * Add styles to the element using predefined style builder\n   * @protected\n   * @param {?} input\n   * @param {?=} parent\n   * @return {?}\n   */\n  addStyles(input, parent) {\n    /** @type {?} */\n    const builder = this.styleBuilder;\n    /** @type {?} */\n    const useCache = builder.shouldCache;\n    /** @type {?} */\n    let genStyles = this.styleCache.get(input);\n    if (!genStyles || !useCache) {\n      genStyles = builder.buildStyles(input, parent);\n      if (useCache) {\n        this.styleCache.set(input, genStyles);\n      }\n    }\n    this.mru = Object.assign({}, genStyles);\n    this.applyStyleToElement(genStyles);\n    builder.sideEffect(input, genStyles, parent);\n  }\n  /**\n   * Remove generated styles from an element using predefined style builder\n   * @protected\n   * @return {?}\n   */\n  clearStyles() {\n    Object.keys(this.mru).forEach(\n    /**\n    * @param {?} k\n    * @return {?}\n    */\n    k => {\n      this.mru[k] = '';\n    });\n    this.applyStyleToElement(this.mru);\n    this.mru = {};\n  }\n  /**\n   * Force trigger style updates on DOM element\n   * @protected\n   * @return {?}\n   */\n  triggerUpdate() {\n    this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction).\n   *\n   * Check inline style first then check computed (stylesheet) style.\n   * And optionally add the flow value to element's inline style.\n   * @protected\n   * @param {?} target\n   * @param {?=} addIfMissing\n   * @return {?}\n   */\n  getFlexFlowDirection(target, addIfMissing = false) {\n    if (target) {\n      const [value, hasInlineValue] = this.styler.getFlowDirection(target);\n      if (!hasInlineValue && addIfMissing) {\n        /** @type {?} */\n        const style = buildLayoutCSS(value);\n        /** @type {?} */\n        const elements = [target];\n        this.styler.applyStyleToElements(style, elements);\n      }\n      return value.trim();\n    }\n    return 'row';\n  }\n  /**\n   * @protected\n   * @param {?} target\n   * @return {?}\n   */\n  hasWrap(target) {\n    return this.styler.hasWrap(target);\n  }\n  /**\n   * Applies styles given via string pair or object map to the directive element\n   * @protected\n   * @param {?} style\n   * @param {?=} value\n   * @param {?=} element\n   * @return {?}\n   */\n  applyStyleToElement(style, value, element = this.nativeElement) {\n    this.styler.applyStyleToElement(element, style, value);\n  }\n  /**\n   * @protected\n   * @param {?} val\n   * @param {?} bp\n   * @return {?}\n   */\n  setValue(val, bp) {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);\n  }\n  /**\n   * @protected\n   * @param {?} input\n   * @return {?}\n   */\n  updateWithValue(input) {\n    if (this.currentValue !== input) {\n      this.addStyles(input);\n      this.currentValue = input;\n    }\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/base/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/data/break-points.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * NOTE: Smaller ranges have HIGHER priority since the match is more specific\n * @type {?}\n */\nconst DEFAULT_BREAKPOINTS = [{\n  alias: 'xs',\n  mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.98px)',\n  priority: 1000\n}, {\n  alias: 'sm',\n  mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.98px)',\n  priority: 900\n}, {\n  alias: 'md',\n  mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.98px)',\n  priority: 800\n}, {\n  alias: 'lg',\n  mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.98px)',\n  priority: 700\n}, {\n  alias: 'xl',\n  mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.98px)',\n  priority: 600\n}, {\n  alias: 'lt-sm',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 599.98px)',\n  priority: 950\n}, {\n  alias: 'lt-md',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 959.98px)',\n  priority: 850\n}, {\n  alias: 'lt-lg',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 1279.98px)',\n  priority: 750\n}, {\n  alias: 'lt-xl',\n  overlapping: true,\n  priority: 650,\n  mediaQuery: 'screen and (max-width: 1919.98px)'\n}, {\n  alias: 'gt-xs',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 600px)',\n  priority: -950\n}, {\n  alias: 'gt-sm',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 960px)',\n  priority: -850\n}, {\n  alias: 'gt-md',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 1280px)',\n  priority: -750\n}, {\n  alias: 'gt-lg',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 1920px)',\n  priority: -650\n}];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/data/orientation-break-points.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/* tslint:disable */\n/** @type {?} */\nconst HANDSET_PORTRAIT = '(orientation: portrait) and (max-width: 599.98px)';\n/** @type {?} */\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959.98px)';\n/** @type {?} */\nconst TABLET_PORTRAIT = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.98px)';\n/** @type {?} */\nconst TABLET_LANDSCAPE = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.98px)';\n/** @type {?} */\nconst WEB_PORTRAIT = '(orientation: portrait) and (min-width: 840px)';\n/** @type {?} */\nconst WEB_LANDSCAPE = '(orientation: landscape) and (min-width: 1280px)';\n/** @type {?} */\nconst ScreenTypes = {\n  'HANDSET': `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n  'TABLET': `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n  'WEB': `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n  'HANDSET_PORTRAIT': `${HANDSET_PORTRAIT}`,\n  'TABLET_PORTRAIT': `${TABLET_PORTRAIT} `,\n  'WEB_PORTRAIT': `${WEB_PORTRAIT}`,\n  'HANDSET_LANDSCAPE': `${HANDSET_LANDSCAPE}`,\n  'TABLET_LANDSCAPE': `${TABLET_LANDSCAPE}`,\n  'WEB_LANDSCAPE': `${WEB_LANDSCAPE}`\n};\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n * @type {?}\n */\nconst ORIENTATION_BREAKPOINTS = [{\n  'alias': 'handset',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET\n}, {\n  'alias': 'handset.landscape',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE\n}, {\n  'alias': 'handset.portrait',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET_PORTRAIT\n}, {\n  'alias': 'tablet',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET\n}, {\n  'alias': 'tablet.landscape',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET_LANDSCAPE\n}, {\n  'alias': 'tablet.portrait',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET_PORTRAIT\n}, {\n  'alias': 'web',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB,\n  overlapping: true\n}, {\n  'alias': 'web.landscape',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB_LANDSCAPE,\n  overlapping: true\n}, {\n  'alias': 'web.portrait',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB_PORTRAIT,\n  overlapping: true\n}];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/break-point.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: utils/object-extend.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nfunction extendObject(dest, ...sources) {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n  for (let source of sources) {\n    if (source != null) {\n      for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n  return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/breakpoint-tools.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\n/**\n * @param {?} part\n * @return {?}\n */\nfunction firstUpperCase(part) {\n  /** @type {?} */\n  let first = part.length > 0 ? part.charAt(0) : '';\n  /** @type {?} */\n  let remainder = part.length > 1 ? part.slice(1) : '';\n  return first.toUpperCase() + remainder;\n}\n/**\n * Converts snake-case to SnakeCase.\n * @param {?} name Text to UpperCamelCase\n * @return {?}\n */\nfunction camelCase(name) {\n  return name.replace(ALIAS_DELIMITERS, '|').split('|').map(firstUpperCase).join('');\n}\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n * @param {?} list\n * @return {?}\n */\nfunction validateSuffixes(list) {\n  list.forEach(\n  /**\n  * @param {?} bp\n  * @return {?}\n  */\n  bp => {\n    if (!bp.suffix) {\n      bp.suffix = camelCase(bp.alias); // create Suffix value based on alias\n      bp.overlapping = !!bp.overlapping; // ensure default value\n    }\n  });\n\n  return list;\n}\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n * @param {?} defaults\n * @param {?=} custom\n * @return {?}\n */\nfunction mergeByAlias(defaults, custom = []) {\n  /** @type {?} */\n  const dict = {};\n  defaults.forEach(\n  /**\n  * @param {?} bp\n  * @return {?}\n  */\n  bp => {\n    dict[bp.alias] = bp;\n  });\n  // Merge custom breakpoints\n  custom.forEach(\n  /**\n  * @param {?} bp\n  * @return {?}\n  */\n  bp => {\n    if (dict[bp.alias]) {\n      extendObject(dict[bp.alias], bp);\n    } else {\n      dict[bp.alias] = bp;\n    }\n  });\n  return validateSuffixes(Object.keys(dict).map(\n  /**\n  * @param {?} k\n  * @return {?}\n  */\n  k => dict[k]));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/break-points-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n * @type {?}\n */\nconst BREAKPOINTS = new InjectionToken('Token (@angular/flex-layout) Breakpoints', {\n  providedIn: 'root',\n  factory:\n  /**\n  * @return {?}\n  */\n  () => {\n    /** @type {?} */\n    const breakpoints = inject(BREAKPOINT);\n    /** @type {?} */\n    const layoutConfig = inject(LAYOUT_CONFIG);\n    /** @type {?} */\n    const bpFlattenArray = [].concat.apply([], (breakpoints || []).map(\n    /**\n    * @param {?} v\n    * @return {?}\n    */\n    v => Array.isArray(v) ? v : [v]));\n    /** @type {?} */\n    const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS).concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n    return mergeByAlias(builtIns, bpFlattenArray);\n  }\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/utils/sort.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * HOF to sort the breakpoints by descending priority\n * @template T\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction sortDescendingPriority(a, b) {\n  /** @type {?} */\n  const priorityA = a ? a.priority || 0 : 0;\n  /** @type {?} */\n  const priorityB = b ? b.priority || 0 : 0;\n  return priorityB - priorityA;\n}\n/**\n * HOF to sort the breakpoints by ascending priority\n * @template T\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction sortAscendingPriority(a, b) {\n  /** @type {?} */\n  const pA = a.priority || 0;\n  /** @type {?} */\n  const pB = b.priority || 0;\n  return pA - pB;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/break-point-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\nclass BreakPointRegistry {\n  /**\n   * @param {?} list\n   */\n  constructor(list) {\n    /**\n     * Memoized BreakPoint Lookups\n     */\n    this.findByMap = new Map();\n    this.items = [...list].sort(sortAscendingPriority);\n  }\n  /**\n   * Search breakpoints by alias (e.g. gt-xs)\n   * @param {?} alias\n   * @return {?}\n   */\n  findByAlias(alias) {\n    return !alias ? null : this.findWithPredicate(alias,\n    /**\n    * @param {?} bp\n    * @return {?}\n    */\n    bp => bp.alias == alias);\n  }\n  /**\n   * @param {?} query\n   * @return {?}\n   */\n  findByQuery(query) {\n    return this.findWithPredicate(query,\n    /**\n    * @param {?} bp\n    * @return {?}\n    */\n    bp => bp.mediaQuery == query);\n  }\n  /**\n   * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n   * e.g. gt-sm overlaps md, lg, and xl\n   * @return {?}\n   */\n  get overlappings() {\n    return this.items.filter(\n    /**\n    * @param {?} it\n    * @return {?}\n    */\n    it => it.overlapping == true);\n  }\n  /**\n   * Get list of all registered (non-empty) breakpoint aliases\n   * @return {?}\n   */\n  get aliases() {\n    return this.items.map(\n    /**\n    * @param {?} it\n    * @return {?}\n    */\n    it => it.alias);\n  }\n  /**\n   * Aliases are mapped to properties using suffixes\n   * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n   * for property layoutGtSM.\n   * @return {?}\n   */\n  get suffixes() {\n    return this.items.map(\n    /**\n    * @param {?} it\n    * @return {?}\n    */\n    it => !!it.suffix ? it.suffix : '');\n  }\n  /**\n   * Memoized lookup using custom predicate function\n   * @private\n   * @param {?} key\n   * @param {?} searchFn\n   * @return {?}\n   */\n  findWithPredicate(key, searchFn) {\n    /** @type {?} */\n    let response = this.findByMap.get(key);\n    if (!response) {\n      response = this.items.find(searchFn) || null;\n      this.findByMap.set(key, response);\n    }\n    return response || null;\n  }\n}\n/** @nocollapse */\nBreakPointRegistry.ɵprov = ɵɵdefineInjectable({\n  factory: function BreakPointRegistry_Factory() {\n    return new BreakPointRegistry(ɵɵinject(BREAKPOINTS));\n  },\n  token: BreakPointRegistry,\n  providedIn: \"root\"\n});\nBreakPointRegistry.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n/** @nocollapse */\nBreakPointRegistry.ctorParameters = () => [{\n  type: Array,\n  decorators: [{\n    type: Inject,\n    args: [BREAKPOINTS]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/match-media/match-media.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\nclass MatchMedia {\n  /**\n   * @param {?} _zone\n   * @param {?} _platformId\n   * @param {?} _document\n   */\n  constructor(_zone, _platformId, _document) {\n    this._zone = _zone;\n    this._platformId = _platformId;\n    this._document = _document;\n    /**\n     * Initialize source with 'all' so all non-responsive APIs trigger style updates\n     */\n    this.source = new BehaviorSubject(new MediaChange(true));\n    this.registry = new Map();\n    this.pendingRemoveListenerFns = [];\n    this._observable$ = this.source.asObservable();\n  }\n  /**\n   * Publish list of all current activations\n   * @return {?}\n   */\n  get activations() {\n    /** @type {?} */\n    const results = [];\n    this.registry.forEach(\n    /**\n    * @param {?} mql\n    * @param {?} key\n    * @return {?}\n    */\n    (mql, key) => {\n      if (mql.matches) {\n        results.push(key);\n      }\n    });\n    return results;\n  }\n  /**\n   * For the specified mediaQuery?\n   * @param {?} mediaQuery\n   * @return {?}\n   */\n  isActive(mediaQuery) {\n    /** @type {?} */\n    const mql = this.registry.get(mediaQuery);\n    return !!mql ? mql.matches : this.registerQuery(mediaQuery).some(\n    /**\n    * @param {?} m\n    * @return {?}\n    */\n    m => m.matches);\n  }\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * Typically used by the MediaQueryAdaptor; optionally available to components\n   * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n   *\n   * Use deferred registration process to register breakpoints only on subscription\n   * This logic also enforces logic to register all mediaQueries BEFORE notify\n   * subscribers of notifications.\n   * @param {?=} mqList\n   * @param {?=} filterOthers\n   * @return {?}\n   */\n  observe(mqList, filterOthers = false) {\n    if (mqList && mqList.length) {\n      /** @type {?} */\n      const matchMedia$ = this._observable$.pipe(filter(\n      /**\n      * @param {?} change\n      * @return {?}\n      */\n      change => !filterOthers ? true : mqList.indexOf(change.mediaQuery) > -1));\n      /** @type {?} */\n      const registration$ = new Observable(\n      /**\n      * @param {?} observer\n      * @return {?}\n      */\n      observer => {\n        // tslint:disable-line:max-line-length\n        /** @type {?} */\n        const matches = this.registerQuery(mqList);\n        if (matches.length) {\n          /** @type {?} */\n          const lastChange = /** @type {?} */matches.pop();\n          matches.forEach(\n          /**\n          * @param {?} e\n          * @return {?}\n          */\n          e => {\n            observer.next(e);\n          });\n          this.source.next(lastChange); // last match is cached\n        }\n\n        observer.complete();\n      });\n      return merge(registration$, matchMedia$);\n    }\n    return this._observable$;\n  }\n  /**\n   * Based on the BreakPointRegistry provider, register internal listeners for each unique\n   * mediaQuery. Each listener emits specific MediaChange data to observers\n   * @param {?} mediaQuery\n   * @return {?}\n   */\n  registerQuery(mediaQuery) {\n    /** @type {?} */\n    const list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];\n    /** @type {?} */\n    const matches = [];\n    buildQueryCss(list, this._document);\n    list.forEach(\n    /**\n    * @param {?} query\n    * @return {?}\n    */\n    query => {\n      /** @type {?} */\n      const onMQLEvent =\n      /**\n      * @param {?} e\n      * @return {?}\n      */\n      e => {\n        this._zone.run(\n        /**\n        * @return {?}\n        */\n        () => this.source.next(new MediaChange(e.matches, query)));\n      };\n      /** @type {?} */\n      let mql = this.registry.get(query);\n      if (!mql) {\n        mql = this.buildMQL(query);\n        mql.addListener(onMQLEvent);\n        this.pendingRemoveListenerFns.push(\n        /**\n        * @return {?}\n        */\n        () => /** @type {?} */mql.removeListener(onMQLEvent));\n        this.registry.set(query, mql);\n      }\n      if (mql.matches) {\n        matches.push(new MediaChange(true, query));\n      }\n    });\n    return matches;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    /** @type {?} */\n    let fn;\n    while (fn = this.pendingRemoveListenerFns.pop()) {\n      fn();\n    }\n  }\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   * @protected\n   * @param {?} query\n   * @return {?}\n   */\n  buildMQL(query) {\n    return constructMql(query, isPlatformBrowser(this._platformId));\n  }\n}\n/** @nocollapse */\nMatchMedia.ɵprov = ɵɵdefineInjectable({\n  factory: function MatchMedia_Factory() {\n    return new MatchMedia(ɵɵinject(NgZone), ɵɵinject(PLATFORM_ID), ɵɵinject(DOCUMENT));\n  },\n  token: MatchMedia,\n  providedIn: \"root\"\n});\nMatchMedia.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n/** @nocollapse */\nMatchMedia.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: Object,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n * @type {?}\n */\nconst ALL_STYLES = {};\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param {?} mediaQueries\n * @param {?} _document\n * @return {?}\n */\nfunction buildQueryCss(mediaQueries, _document) {\n  /** @type {?} */\n  const list = mediaQueries.filter(\n  /**\n  * @param {?} it\n  * @return {?}\n  */\n  it => !ALL_STYLES[it]);\n  if (list.length > 0) {\n    /** @type {?} */\n    const query = list.join(', ');\n    try {\n      /** @type {?} */\n      const styleEl = _document.createElement('style');\n      styleEl.setAttribute('type', 'text/css');\n      if (! /** @type {?} */styleEl.styleSheet) {\n        /** @type {?} */\n        const cssText = `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n`;\n        styleEl.appendChild(_document.createTextNode(cssText));\n      }\n      /** @type {?} */_document.head.appendChild(styleEl);\n      // Store in private global registry\n      list.forEach(\n      /**\n      * @param {?} mq\n      * @return {?}\n      */\n      mq => ALL_STYLES[mq] = styleEl);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n/**\n * @param {?} query\n * @param {?} isBrowser\n * @return {?}\n */\nfunction constructMql(query, isBrowser) {\n  /** @type {?} */\n  const canListen = isBrowser && !! /** @type {?} */window.matchMedia('all').addListener;\n  return canListen ? /** @type {?} */window.matchMedia(query) : /** @type {?} */{\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener:\n    /**\n    * @return {?}\n    */\n    () => {},\n    removeListener:\n    /**\n    * @return {?}\n    */\n    () => {},\n    onchange: null,\n    /**\n     * @return {?}\n     */\n    addEventListener() {},\n    /**\n     * @return {?}\n     */\n    removeEventListener() {},\n    /**\n     * @return {?}\n     */\n    dispatchEvent() {\n      return false;\n    }\n  };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/match-media/mock/mock-match-media.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\nclass MockMatchMedia extends MatchMedia {\n  // Allow fallback to overlapping mediaQueries\n  /**\n   * @param {?} _zone\n   * @param {?} _platformId\n   * @param {?} _document\n   * @param {?} _breakpoints\n   */\n  constructor(_zone, _platformId, _document, _breakpoints) {\n    super(_zone, _platformId, _document);\n    this._breakpoints = _breakpoints;\n    this.autoRegisterQueries = true; // Used for testing BreakPoint registrations\n    // Used for testing BreakPoint registrations\n    this.useOverlaps = false; // Allow fallback to overlapping mediaQueries\n  }\n  /**\n   * Easy method to clear all listeners for all mediaQueries\n   * @return {?}\n   */\n  clearAll() {\n    this.registry.forEach(\n    /**\n    * @param {?} mql\n    * @return {?}\n    */\n    mql => {\n      /** @type {?} */mql.destroy();\n    });\n    this.registry.clear();\n    this.useOverlaps = false;\n  }\n  /**\n   * Feature to support manual, simulated activation of a mediaQuery.\n   * @param {?} mediaQuery\n   * @param {?=} useOverlaps\n   * @return {?}\n   */\n  activate(mediaQuery, useOverlaps = false) {\n    useOverlaps = useOverlaps || this.useOverlaps;\n    mediaQuery = this._validateQuery(mediaQuery);\n    if (useOverlaps || !this.isActive(mediaQuery)) {\n      this._deactivateAll();\n      this._registerMediaQuery(mediaQuery);\n      this._activateWithOverlaps(mediaQuery, useOverlaps);\n    }\n    return this.hasActivated;\n  }\n  /**\n   * Converts an optional mediaQuery alias to a specific, valid mediaQuery\n   * @param {?} queryOrAlias\n   * @return {?}\n   */\n  _validateQuery(queryOrAlias) {\n    /** @type {?} */\n    const bp = this._breakpoints.findByAlias(queryOrAlias);\n    return bp && bp.mediaQuery || queryOrAlias;\n  }\n  /**\n   * Manually onMediaChange any overlapping mediaQueries to simulate\n   * similar functionality in the window.matchMedia()\n   * @private\n   * @param {?} mediaQuery\n   * @param {?} useOverlaps\n   * @return {?}\n   */\n  _activateWithOverlaps(mediaQuery, useOverlaps) {\n    if (useOverlaps) {\n      /** @type {?} */\n      const bp = this._breakpoints.findByQuery(mediaQuery);\n      /** @type {?} */\n      const alias = bp ? bp.alias : 'unknown';\n      // Simulate activation of overlapping lt-<XXX> ranges\n      switch (alias) {\n        case 'lg':\n          this._activateByAlias(['lt-xl']);\n          break;\n        case 'md':\n          this._activateByAlias(['lt-xl', 'lt-lg']);\n          break;\n        case 'sm':\n          this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md']);\n          break;\n        case 'xs':\n          this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md', 'lt-sm']);\n          break;\n      }\n      // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges\n      switch (alias) {\n        case 'xl':\n          this._activateByAlias(['gt-lg', 'gt-md', 'gt-sm', 'gt-xs']);\n          break;\n        case 'lg':\n          this._activateByAlias(['gt-md', 'gt-sm', 'gt-xs']);\n          break;\n        case 'md':\n          this._activateByAlias(['gt-sm', 'gt-xs']);\n          break;\n        case 'sm':\n          this._activateByAlias(['gt-xs']);\n          break;\n      }\n    }\n    // Activate last since the responsiveActivation is watching *this* mediaQuery\n    return this._activateByQuery(mediaQuery);\n  }\n  /**\n   *\n   * @private\n   * @param {?} aliases\n   * @return {?}\n   */\n  _activateByAlias(aliases) {\n    /** @type {?} */\n    const activate =\n    /**\n    * @param {?} alias\n    * @return {?}\n    */\n    alias => {\n      /** @type {?} */\n      const bp = this._breakpoints.findByAlias(alias);\n      this._activateByQuery(bp ? bp.mediaQuery : alias);\n    };\n    aliases.forEach(activate);\n  }\n  /**\n   *\n   * @private\n   * @param {?} mediaQuery\n   * @return {?}\n   */\n  _activateByQuery(mediaQuery) {\n    if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this._registerMediaQuery(mediaQuery);\n    }\n    /** @type {?} */\n    const mql = /** @type {?} */this.registry.get(mediaQuery);\n    if (mql && !this.isActive(mediaQuery)) {\n      this.registry.set(mediaQuery, mql.activate());\n    }\n    return this.hasActivated;\n  }\n  /**\n   * Deactivate all current MQLs and reset the buffer\n   * @private\n   * @template THIS\n   * @this {THIS}\n   * @return {THIS}\n   */\n  _deactivateAll() {\n    /** @type {?} */this.registry.forEach(\n    /**\n    * @param {?} it\n    * @return {?}\n    */\n    it => {\n      /** @type {?} */it.deactivate();\n    });\n    return (/** @type {?} */this\n    );\n  }\n  /**\n   * Insure the mediaQuery is registered with MatchMedia\n   * @private\n   * @param {?} mediaQuery\n   * @return {?}\n   */\n  _registerMediaQuery(mediaQuery) {\n    if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this.registerQuery(mediaQuery);\n    }\n  }\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   * @protected\n   * @param {?} query\n   * @return {?}\n   */\n  buildMQL(query) {\n    return new MockMediaQueryList(query);\n  }\n  /**\n   * @protected\n   * @return {?}\n   */\n  get hasActivated() {\n    return this.activations.length > 0;\n  }\n}\nMockMatchMedia.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\nMockMatchMedia.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: Object,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: BreakPointRegistry\n}];\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nclass MockMediaQueryList {\n  /**\n   * @param {?} _mediaQuery\n   */\n  constructor(_mediaQuery) {\n    this._mediaQuery = _mediaQuery;\n    this._isActive = false;\n    this._listeners = [];\n    this.onchange = null;\n  }\n  /**\n   * @return {?}\n   */\n  get matches() {\n    return this._isActive;\n  }\n  /**\n   * @return {?}\n   */\n  get media() {\n    return this._mediaQuery;\n  }\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   * @return {?}\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n  /**\n   * Notify all listeners that 'matches === TRUE'\n   * @return {?}\n   */\n  activate() {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach(\n      /**\n      * @param {?} callback\n      * @return {?}\n      */\n      callback => {\n        /** @type {?} */\n        const cb = /** @type {?} */callback;\n        cb.call(this, /** @type {?} */{\n          matches: this.matches,\n          media: this.media\n        });\n      });\n    }\n    return this;\n  }\n  /**\n   * Notify all listeners that 'matches === false'\n   * @return {?}\n   */\n  deactivate() {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach(\n      /**\n      * @param {?} callback\n      * @return {?}\n      */\n      callback => {\n        /** @type {?} */\n        const cb = /** @type {?} */callback;\n        cb.call(this, /** @type {?} */{\n          matches: this.matches,\n          media: this.media\n        });\n      });\n    }\n    return this;\n  }\n  /**\n   * Add a listener to our internal list to activate later\n   * @param {?} listener\n   * @return {?}\n   */\n  addListener(listener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      /** @type {?} */\n      const cb = /** @type {?} */listener;\n      cb.call(this, /** @type {?} */{\n        matches: this.matches,\n        media: this.media\n      });\n    }\n  }\n  /**\n   * Don't need to remove listeners in the testing environment\n   * @param {?} _\n   * @return {?}\n   */\n  removeListener(_) {}\n  /**\n   * @param {?} _\n   * @param {?} __\n   * @param {?=} ___\n   * @return {?}\n   */\n  addEventListener(_, __, ___) {}\n  /**\n   * @param {?} _\n   * @param {?} __\n   * @param {?=} ___\n   * @return {?}\n   */\n  removeEventListener(_, __, ___) {}\n  /**\n   * @param {?} _\n   * @return {?}\n   */\n  dispatchEvent(_) {\n    return false;\n  }\n}\n/**\n * Pre-configured provider for MockMatchMedia\n * @type {?}\n */\nconst MockMatchMediaProvider = {\n  // tslint:disable-line:variable-name\n  provide: MatchMedia,\n  useClass: MockMatchMedia\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/match-media/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-marshaller/print-hook.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst PRINT = 'print';\n/** @type {?} */\nconst BREAKPOINT_PRINT = {\n  alias: PRINT,\n  mediaQuery: PRINT,\n  priority: 1000\n};\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\nclass PrintHook {\n  /**\n   * @param {?} breakpoints\n   * @param {?} layoutConfig\n   * @param {?} _document\n   */\n  constructor(breakpoints, layoutConfig, _document) {\n    this.breakpoints = breakpoints;\n    this.layoutConfig = layoutConfig;\n    this._document = _document;\n    // registeredBeforeAfterPrintHooks tracks if we registered the `beforeprint`\n    //  and `afterprint` event listeners.\n    this.registeredBeforeAfterPrintHooks = false;\n    // isPrintingBeforeAfterEvent is used to track if we are printing from within\n    // a `beforeprint` event handler. This prevents the typicall `stopPrinting`\n    // form `interceptEvents` so that printing is not stopped while the dialog\n    // is still open. This is an extension of the `isPrinting` property on\n    // browsers which support `beforeprint` and `afterprint` events.\n    this.isPrintingBeforeAfterEvent = false;\n    this.beforePrintEventListeners = [];\n    this.afterPrintEventListeners = [];\n    /**\n     * Is this service currently in Print-mode ?\n     */\n    this.isPrinting = false;\n    this.queue = new PrintQueue();\n    this.deactivations = [];\n  }\n  /**\n   * Add 'print' mediaQuery: to listen for matchMedia activations\n   * @param {?} queries\n   * @return {?}\n   */\n  withPrintQuery(queries) {\n    return [...queries, PRINT];\n  }\n  /**\n   * Is the MediaChange event for any 'print' \\@media\n   * @param {?} e\n   * @return {?}\n   */\n  isPrintEvent(e) {\n    return e.mediaQuery.startsWith(PRINT);\n  }\n  /**\n   * What is the desired mqAlias to use while printing?\n   * @return {?}\n   */\n  get printAlias() {\n    return this.layoutConfig.printWithBreakpoints || [];\n  }\n  /**\n   * Lookup breakpoints associated with print aliases.\n   * @return {?}\n   */\n  get printBreakPoints() {\n    return (/** @type {?} */this.printAlias.map(\n      /**\n      * @param {?} alias\n      * @return {?}\n      */\n      alias => this.breakpoints.findByAlias(alias)).filter(\n      /**\n      * @param {?} bp\n      * @return {?}\n      */\n      bp => bp !== null)\n    );\n  }\n  /**\n   * Lookup breakpoint associated with mediaQuery\n   * @param {?} __0\n   * @return {?}\n   */\n  getEventBreakpoints({\n    mediaQuery\n  }) {\n    /** @type {?} */\n    const bp = this.breakpoints.findByQuery(mediaQuery);\n    /** @type {?} */\n    const list = bp ? [...this.printBreakPoints, bp] : this.printBreakPoints;\n    return list.sort(sortDescendingPriority);\n  }\n  /**\n   * Update event with printAlias mediaQuery information\n   * @param {?} event\n   * @return {?}\n   */\n  updateEvent(event) {\n    /** @type {?} */\n    let bp = this.breakpoints.findByQuery(event.mediaQuery);\n    if (this.isPrintEvent(event)) {\n      // Reset from 'print' to first (highest priority) print breakpoint\n      bp = this.getEventBreakpoints(event)[0];\n      event.mediaQuery = bp ? bp.mediaQuery : '';\n    }\n    return mergeAlias(event, bp);\n  }\n  // registerBeforeAfterPrintHooks registers a `beforeprint` event hook so we can\n  // trigger print styles synchronously and apply proper layout styles.\n  // It is a noop if the hooks have already been registered or if the document's\n  // `defaultView` is not available.\n  /**\n   * @private\n   * @param {?} target\n   * @return {?}\n   */\n  registerBeforeAfterPrintHooks(target) {\n    // `defaultView` may be null when rendering on the server or in other contexts.\n    if (!this._document.defaultView || this.registeredBeforeAfterPrintHooks) {\n      return;\n    }\n    this.registeredBeforeAfterPrintHooks = true;\n    /** @type {?} */\n    const beforePrintListener =\n    /**\n    * @return {?}\n    */\n    () => {\n      // If we aren't already printing, start printing and update the styles as\n      // if there was a regular print `MediaChange`(from matchMedia).\n      if (!this.isPrinting) {\n        this.isPrintingBeforeAfterEvent = true;\n        this.startPrinting(target, this.getEventBreakpoints(new MediaChange(true, PRINT)));\n        target.updateStyles();\n      }\n    };\n    /** @type {?} */\n    const afterPrintListener =\n    /**\n    * @return {?}\n    */\n    () => {\n      // If we aren't already printing, start printing and update the styles as\n      // if there was a regular print `MediaChange`(from matchMedia).\n      this.isPrintingBeforeAfterEvent = false;\n      if (this.isPrinting) {\n        this.stopPrinting(target);\n        target.updateStyles();\n      }\n    };\n    // Could we have teardown logic to remove if there are no print listeners being used?\n    this._document.defaultView.addEventListener('beforeprint', beforePrintListener);\n    this._document.defaultView.addEventListener('afterprint', afterPrintListener);\n    this.beforePrintEventListeners.push(beforePrintListener);\n    this.afterPrintEventListeners.push(afterPrintListener);\n  }\n  /**\n   * Prepare RxJS filter operator with partial application\n   * @param {?} target\n   * @return {?} pipeable filter predicate\n   */\n  interceptEvents(target) {\n    this.registerBeforeAfterPrintHooks(target);\n    return (\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        if (this.isPrintEvent(event)) {\n          if (event.matches && !this.isPrinting) {\n            this.startPrinting(target, this.getEventBreakpoints(event));\n            target.updateStyles();\n          } else if (!event.matches && this.isPrinting && !this.isPrintingBeforeAfterEvent) {\n            this.stopPrinting(target);\n            target.updateStyles();\n          }\n        } else {\n          this.collectActivations(event);\n        }\n      }\n    );\n  }\n  /**\n   * Stop mediaChange event propagation in event streams\n   * @return {?}\n   */\n  blockPropagation() {\n    return (\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        return !(this.isPrinting || this.isPrintEvent(event));\n      }\n    );\n  }\n  /**\n   * Save current activateBreakpoints (for later restore)\n   * and substitute only the printAlias breakpoint\n   * @protected\n   * @param {?} target\n   * @param {?} bpList\n   * @return {?}\n   */\n  startPrinting(target, bpList) {\n    this.isPrinting = true;\n    target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);\n  }\n  /**\n   * For any print de-activations, reset the entire print queue\n   * @protected\n   * @param {?} target\n   * @return {?}\n   */\n  stopPrinting(target) {\n    target.activatedBreakpoints = this.deactivations;\n    this.deactivations = [];\n    this.queue.clear();\n    this.isPrinting = false;\n  }\n  /**\n   * To restore pre-Print Activations, we must capture the proper\n   * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n   * is supported; so 'print' mediaQuery activations are used as a fallback\n   * in browsers without `beforeprint` support.\n   *\n   * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n   *\n   * Let's capture all de-activations using the following logic:\n   *\n   *  When not printing:\n   *    - clear cache when activating non-print breakpoint\n   *    - update cache (and sort) when deactivating\n   *\n   *  When printing:\n   *    - sort and save when starting print\n   *    - restore as activatedTargets and clear when stop printing\n   * @param {?} event\n   * @return {?}\n   */\n  collectActivations(event) {\n    if (!this.isPrinting || this.isPrintingBeforeAfterEvent) {\n      if (!event.matches) {\n        /** @type {?} */\n        const bp = this.breakpoints.findByQuery(event.mediaQuery);\n        if (bp) {\n          // Deactivating a breakpoint\n          this.deactivations.push(bp);\n          this.deactivations.sort(sortDescendingPriority);\n        }\n      } else if (!this.isPrintingBeforeAfterEvent) {\n        // Only clear deactivations if we aren't printing from a `beforeprint` event.\n        // Otherwise this will clear before `stopPrinting()` is called to restore\n        // the pre-Print Activations.\n        this.deactivations = [];\n      }\n    }\n  }\n  /**\n   * Teardown logic for the service.\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (this._document.defaultView) {\n      this.beforePrintEventListeners.forEach(\n      /**\n      * @param {?} l\n      * @return {?}\n      */\n      l => this._document.defaultView.removeEventListener('beforeprint', l));\n      this.afterPrintEventListeners.forEach(\n      /**\n      * @param {?} l\n      * @return {?}\n      */\n      l => this._document.defaultView.removeEventListener('afterprint', l));\n    }\n  }\n}\n/** @nocollapse */\nPrintHook.ɵprov = ɵɵdefineInjectable({\n  factory: function PrintHook_Factory() {\n    return new PrintHook(ɵɵinject(BreakPointRegistry), ɵɵinject(LAYOUT_CONFIG), ɵɵinject(DOCUMENT));\n  },\n  token: PrintHook,\n  providedIn: \"root\"\n});\nPrintHook.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n/** @nocollapse */\nPrintHook.ctorParameters = () => [{\n  type: BreakPointRegistry\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [LAYOUT_CONFIG]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n// ************************************************************************\n// Internal Utility class 'PrintQueue'\n// ************************************************************************\n/**\n * Utility class to manage print breakpoints + activatedBreakpoints\n * with correct sorting WHILE printing\n */\nclass PrintQueue {\n  constructor() {\n    /**\n     * Sorted queue with prioritized print breakpoints\n     */\n    this.printBreakpoints = [];\n  }\n  /**\n   * @param {?} bpList\n   * @return {?}\n   */\n  addPrintBreakpoints(bpList) {\n    bpList.push(BREAKPOINT_PRINT);\n    bpList.sort(sortDescendingPriority);\n    bpList.forEach(\n    /**\n    * @param {?} bp\n    * @return {?}\n    */\n    bp => this.addBreakpoint(bp));\n    return this.printBreakpoints;\n  }\n  /**\n   * Add Print breakpoint to queue\n   * @param {?} bp\n   * @return {?}\n   */\n  addBreakpoint(bp) {\n    if (!!bp) {\n      /** @type {?} */\n      const bpInList = this.printBreakpoints.find(\n      /**\n      * @param {?} it\n      * @return {?}\n      */\n      it => it.mediaQuery === bp.mediaQuery);\n      if (bpInList === undefined) {\n        // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,\n        // register as highest priority in the queue\n        this.printBreakpoints = isPrintBreakPoint(bp) ? [bp, ...this.printBreakpoints] : [...this.printBreakpoints, bp];\n      }\n    }\n  }\n  /**\n   * Restore original activated breakpoints and clear internal caches\n   * @return {?}\n   */\n  clear() {\n    this.printBreakpoints = [];\n  }\n}\n// ************************************************************************\n// Internal Utility methods\n// ************************************************************************\n/**\n * Only support intercept queueing if the Breakpoint is a print \\@media query\n * @param {?} bp\n * @return {?}\n */\nfunction isPrintBreakPoint(bp) {\n  return bp ? bp.mediaQuery.startsWith(PRINT) : false;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/utils/array.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Wraps the provided value in an array, unless the provided value is an array.\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction coerceArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-observer/media-observer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n * if a mediaQuery is currently activated.\n *\n * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n * in 1 event notification. The reported activations will be sorted in descending priority order.\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * Note: Developers should note that only mediaChange activations (not de-activations)\n *       are announced by the MediaObserver.\n *\n * \\@usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '\\@angular/flex-layout';\n *\n * \\@Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const media$ = mediaObserver.asObservable().pipe(\n *        filter((changes: MediaChange[]) => true)   // silly noop filter\n *      );\n *\n *      media$.subscribe((changes: MediaChange[]) => {\n *        let status = '';\n *        changes.forEach( change => {\n *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n *        });\n *        this.status = status;\n *     });\n *\n *    }\n *  }\n */\nclass MediaObserver {\n  /**\n   * @param {?} breakpoints\n   * @param {?} matchMedia\n   * @param {?} hook\n   */\n  constructor(breakpoints, matchMedia, hook) {\n    this.breakpoints = breakpoints;\n    this.matchMedia = matchMedia;\n    this.hook = hook;\n    /**\n     * Filter MediaChange notifications for overlapping breakpoints\n     */\n    this.filterOverlaps = false;\n    this.destroyed$ = new Subject();\n    this._media$ = this.watchActivations();\n    this.media$ = this._media$.pipe(filter(\n    /**\n    * @param {?} changes\n    * @return {?}\n    */\n    changes => changes.length > 0), map(\n    /**\n    * @param {?} changes\n    * @return {?}\n    */\n    changes => changes[0]));\n  }\n  /**\n   * Completes the active subject, signalling to all complete for all\n   * MediaObserver subscribers\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n  // ************************************************\n  // Public Methods\n  // ************************************************\n  /**\n   * Observe changes to current activation 'list'\n   * @return {?}\n   */\n  asObservable() {\n    return this._media$;\n  }\n  /**\n   * Allow programmatic query to determine if one or more media query/alias match\n   * the current viewport size.\n   * @param {?} value One or more media queries (or aliases) to check.\n   * @return {?} Whether any of the media queries match.\n   */\n  isActive(value) {\n    /** @type {?} */\n    const aliases = splitQueries(coerceArray(value));\n    return aliases.some(\n    /**\n    * @param {?} alias\n    * @return {?}\n    */\n    alias => {\n      /** @type {?} */\n      const query = toMediaQuery(alias, this.breakpoints);\n      return query !== null && this.matchMedia.isActive(query);\n    });\n  }\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n  /**\n   * Register all the mediaQueries registered in the BreakPointRegistry\n   * This is needed so subscribers can be auto-notified of all standard, registered\n   * mediaQuery activations\n   * @private\n   * @return {?}\n   */\n  watchActivations() {\n    /** @type {?} */\n    const queries = this.breakpoints.items.map(\n    /**\n    * @param {?} bp\n    * @return {?}\n    */\n    bp => bp.mediaQuery);\n    return this.buildObservable(queries);\n  }\n  /**\n   * Only pass/announce activations (not de-activations)\n   *\n   * Since multiple-mediaQueries can be activation in a cycle,\n   * gather all current activations into a single list of changes to observers\n   *\n   * Inject associated (if any) alias information into the MediaChange event\n   * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n   * - Exclude print activations that do not have an associated mediaQuery\n   *\n   * NOTE: the raw MediaChange events [from MatchMedia] do not\n   *       contain important alias information; as such this info\n   *       must be injected into the MediaChange\n   * @private\n   * @param {?} mqList\n   * @return {?}\n   */\n  buildObservable(mqList) {\n    /** @type {?} */\n    const hasChanges =\n    /**\n    * @param {?} changes\n    * @return {?}\n    */\n    changes => {\n      /** @type {?} */\n      const isValidQuery =\n      /**\n      * @param {?} change\n      * @return {?}\n      */\n      change => change.mediaQuery.length > 0;\n      return changes.filter(isValidQuery).length > 0;\n    };\n    /** @type {?} */\n    const excludeOverlaps =\n    /**\n    * @param {?} changes\n    * @return {?}\n    */\n    changes => {\n      return !this.filterOverlaps ? changes : changes.filter(\n      /**\n      * @param {?} change\n      * @return {?}\n      */\n      change => {\n        /** @type {?} */\n        const bp = this.breakpoints.findByQuery(change.mediaQuery);\n        return !bp ? true : !bp.overlapping;\n      });\n    };\n    /**\n     */\n    return this.matchMedia.observe(this.hook.withPrintQuery(mqList)).pipe(filter(\n    /**\n    * @param {?} change\n    * @return {?}\n    */\n    change => change.matches), debounceTime(0, asapScheduler), switchMap(\n    /**\n    * @param {?} _\n    * @return {?}\n    */\n    _ => of(this.findAllActivations())), map(excludeOverlaps), filter(hasChanges), takeUntil(this.destroyed$));\n  }\n  /**\n   * Find all current activations and prepare single list of activations\n   * sorted by descending priority.\n   * @private\n   * @return {?}\n   */\n  findAllActivations() {\n    /** @type {?} */\n    const mergeMQAlias =\n    /**\n    * @param {?} change\n    * @return {?}\n    */\n    change => {\n      /** @type {?} */\n      let bp = this.breakpoints.findByQuery(change.mediaQuery);\n      return mergeAlias(change, bp);\n    };\n    /** @type {?} */\n    const replaceWithPrintAlias =\n    /**\n    * @param {?} change\n    * @return {?}\n    */\n    change => {\n      return this.hook.isPrintEvent(change) ? this.hook.updateEvent(change) : change;\n    };\n    return this.matchMedia.activations.map(\n    /**\n    * @param {?} query\n    * @return {?}\n    */\n    query => new MediaChange(true, query)).map(replaceWithPrintAlias).map(mergeMQAlias).sort(sortDescendingPriority);\n  }\n}\n/** @nocollapse */\nMediaObserver.ɵprov = ɵɵdefineInjectable({\n  factory: function MediaObserver_Factory() {\n    return new MediaObserver(ɵɵinject(BreakPointRegistry), ɵɵinject(MatchMedia), ɵɵinject(PrintHook));\n  },\n  token: MediaObserver,\n  providedIn: \"root\"\n});\nMediaObserver.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n/** @nocollapse */\nMediaObserver.ctorParameters = () => [{\n  type: BreakPointRegistry\n}, {\n  type: MatchMedia\n}, {\n  type: PrintHook\n}];\n/**\n * Find associated breakpoint (if any)\n * @param {?} query\n * @param {?} locator\n * @return {?}\n */\nfunction toMediaQuery(query, locator) {\n  /** @type {?} */\n  const bp = locator.findByAlias(query) || locator.findByQuery(query);\n  return bp ? bp.mediaQuery : null;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\nfunction splitQueries(queries) {\n  return queries.map(\n  /**\n  * @param {?} query\n  * @return {?}\n  */\n  query => query.split(',')).reduce(\n  /**\n  * @param {?} a1\n  * @param {?} a2\n  * @return {?}\n  */\n  (a1, a2) => a1.concat(a2)).map(\n  /**\n  * @param {?} query\n  * @return {?}\n  */\n  query => query.trim());\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-observer/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-trigger/media-trigger.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class\n */\nclass MediaTrigger {\n  /**\n   * @param {?} breakpoints\n   * @param {?} matchMedia\n   * @param {?} layoutConfig\n   * @param {?} _platformId\n   * @param {?} _document\n   */\n  constructor(breakpoints, matchMedia, layoutConfig, _platformId, _document) {\n    this.breakpoints = breakpoints;\n    this.matchMedia = matchMedia;\n    this.layoutConfig = layoutConfig;\n    this._platformId = _platformId;\n    this._document = _document;\n    this.hasCachedRegistryMatches = false;\n    this.originalActivations = [];\n    this.originalRegistry = new Map();\n  }\n  /**\n   * Manually activate range of breakpoints\n   * @param {?} list array of mediaQuery or alias strings\n   * @return {?}\n   */\n  activate(list) {\n    list = list.map(\n    /**\n    * @param {?} it\n    * @return {?}\n    */\n    it => it.trim()); // trim queries\n    this.saveActivations();\n    this.deactivateAll();\n    this.setActivations(list);\n    this.prepareAutoRestore();\n  }\n  /**\n   * Restore original, 'real' breakpoints and emit events\n   * to trigger stream notification\n   * @return {?}\n   */\n  restore() {\n    if (this.hasCachedRegistryMatches) {\n      /** @type {?} */\n      const extractQuery =\n      /**\n      * @param {?} change\n      * @return {?}\n      */\n      change => change.mediaQuery;\n      /** @type {?} */\n      const list = this.originalActivations.map(extractQuery);\n      try {\n        this.deactivateAll();\n        this.restoreRegistryMatches();\n        this.setActivations(list);\n      } finally {\n        this.originalActivations = [];\n        if (this.resizeSubscription) {\n          this.resizeSubscription.unsubscribe();\n        }\n      }\n    }\n  }\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n  /**\n   * Whenever window resizes, immediately auto-restore original\n   * activations (if we are simulating activations)\n   * @private\n   * @return {?}\n   */\n  prepareAutoRestore() {\n    /** @type {?} */\n    const isBrowser = isPlatformBrowser(this._platformId) && this._document;\n    /** @type {?} */\n    const enableAutoRestore = isBrowser && this.layoutConfig.mediaTriggerAutoRestore;\n    if (enableAutoRestore) {\n      /** @type {?} */\n      const resize$ = fromEvent(window, 'resize').pipe(take(1));\n      this.resizeSubscription = resize$.subscribe(this.restore.bind(this));\n    }\n  }\n  /**\n   * Notify all matchMedia subscribers of de-activations\n   *\n   * Note: we must force 'matches' updates for\n   *       future matchMedia::activation lookups\n   * @private\n   * @return {?}\n   */\n  deactivateAll() {\n    /** @type {?} */\n    const list = this.currentActivations;\n    this.forceRegistryMatches(list, false);\n    this.simulateMediaChanges(list, false);\n  }\n  /**\n   * Cache current activations as sorted, prioritized list of MediaChanges\n   * @private\n   * @return {?}\n   */\n  saveActivations() {\n    if (!this.hasCachedRegistryMatches) {\n      /** @type {?} */\n      const toMediaChange =\n      /**\n      * @param {?} query\n      * @return {?}\n      */\n      query => new MediaChange(true, query);\n      /** @type {?} */\n      const mergeMQAlias =\n      /**\n      * @param {?} change\n      * @return {?}\n      */\n      change => {\n        /** @type {?} */\n        const bp = this.breakpoints.findByQuery(change.mediaQuery);\n        return mergeAlias(change, bp);\n      };\n      this.originalActivations = this.currentActivations.map(toMediaChange).map(mergeMQAlias).sort(sortDescendingPriority);\n      this.cacheRegistryMatches();\n    }\n  }\n  /**\n   * Force set manual activations for specified mediaQuery list\n   * @private\n   * @param {?} list\n   * @return {?}\n   */\n  setActivations(list) {\n    if (!!this.originalRegistry) {\n      this.forceRegistryMatches(list, true);\n    }\n    this.simulateMediaChanges(list);\n  }\n  /**\n   * For specified mediaQuery list manually simulate activations or deactivations\n   * @private\n   * @param {?} queries\n   * @param {?=} matches\n   * @return {?}\n   */\n  simulateMediaChanges(queries, matches = true) {\n    /** @type {?} */\n    const toMediaQuery =\n    /**\n    * @param {?} query\n    * @return {?}\n    */\n    query => {\n      /** @type {?} */\n      const locator = this.breakpoints;\n      /** @type {?} */\n      const bp = locator.findByAlias(query) || locator.findByQuery(query);\n      return bp ? bp.mediaQuery : query;\n    };\n    /** @type {?} */\n    const emitChangeEvent =\n    /**\n    * @param {?} query\n    * @return {?}\n    */\n    query => this.emitChangeEvent(matches, query);\n    queries.map(toMediaQuery).forEach(emitChangeEvent);\n  }\n  /**\n   * Replace current registry with simulated registry...\n   * Note: this is required since MediaQueryList::matches is 'readOnly'\n   * @private\n   * @param {?} queries\n   * @param {?} matches\n   * @return {?}\n   */\n  forceRegistryMatches(queries, matches) {\n    /** @type {?} */\n    const registry = new Map();\n    queries.forEach(\n    /**\n    * @param {?} query\n    * @return {?}\n    */\n    query => {\n      registry.set(query, /** @type {?} */{\n        matches\n      });\n    });\n    this.matchMedia.registry = registry;\n  }\n  /**\n   * Save current MatchMedia::registry items.\n   * @private\n   * @return {?}\n   */\n  cacheRegistryMatches() {\n    /** @type {?} */\n    const target = this.originalRegistry;\n    target.clear();\n    this.matchMedia.registry.forEach(\n    /**\n    * @param {?} value\n    * @param {?} key\n    * @return {?}\n    */\n    (value, key) => {\n      target.set(key, value);\n    });\n    this.hasCachedRegistryMatches = true;\n  }\n  /**\n   * Restore original, 'true' registry\n   * @private\n   * @return {?}\n   */\n  restoreRegistryMatches() {\n    /** @type {?} */\n    const target = this.matchMedia.registry;\n    target.clear();\n    this.originalRegistry.forEach(\n    /**\n    * @param {?} value\n    * @param {?} key\n    * @return {?}\n    */\n    (value, key) => {\n      target.set(key, value);\n    });\n    this.originalRegistry.clear();\n    this.hasCachedRegistryMatches = false;\n  }\n  /**\n   * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n   * @private\n   * @param {?} matches\n   * @param {?} query\n   * @return {?}\n   */\n  emitChangeEvent(matches, query) {\n    this.matchMedia.source.next(new MediaChange(matches, query));\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  get currentActivations() {\n    return this.matchMedia.activations;\n  }\n}\n/** @nocollapse */\nMediaTrigger.ɵprov = ɵɵdefineInjectable({\n  factory: function MediaTrigger_Factory() {\n    return new MediaTrigger(ɵɵinject(BreakPointRegistry), ɵɵinject(MatchMedia), ɵɵinject(LAYOUT_CONFIG), ɵɵinject(PLATFORM_ID), ɵɵinject(DOCUMENT));\n  },\n  token: MediaTrigger,\n  providedIn: \"root\"\n});\nMediaTrigger.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n/** @nocollapse */\nMediaTrigger.ctorParameters = () => [{\n  type: BreakPointRegistry\n}, {\n  type: MatchMedia\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [LAYOUT_CONFIG]\n  }]\n}, {\n  type: Object,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-trigger/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/utils/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: utils/auto-prefixer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Applies CSS prefixes to appropriate style keys.\n *\n * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.\n *    {\n *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10\n *      display: flex;             NEW, Spec - Firefox, Chrome, Opera\n *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7\n *      // display: -ms-flexbox;   TWEENER - IE 10\n *      // display: -moz-flexbox;  OLD - Firefox\n *    }\n * @param {?} target\n * @return {?}\n */\nfunction applyCssPrefixes(target) {\n  for (let key in target) {\n    /** @type {?} */\n    let value = target[key] || '';\n    switch (key) {\n      case 'display':\n        if (value === 'flex') {\n          target['display'] = ['-webkit-flex', 'flex'];\n        } else if (value === 'inline-flex') {\n          target['display'] = ['-webkit-inline-flex', 'inline-flex'];\n        } else {\n          target['display'] = value;\n        }\n        break;\n      case 'align-items':\n      case 'align-self':\n      case 'align-content':\n      case 'flex':\n      case 'flex-basis':\n      case 'flex-flow':\n      case 'flex-grow':\n      case 'flex-shrink':\n      case 'flex-wrap':\n      case 'justify-content':\n        target['-webkit-' + key] = value;\n        break;\n      case 'flex-direction':\n        value = value || 'row';\n        target['-webkit-flex-direction'] = value;\n        target['flex-direction'] = value;\n        break;\n      case 'order':\n        target['order'] = target['-webkit-' + key] = isNaN(+value) ? '0' : value;\n        break;\n    }\n  }\n  return target;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/style-utils/style-utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass StyleUtils {\n  /**\n   * @param {?} _serverStylesheet\n   * @param {?} _serverModuleLoaded\n   * @param {?} _platformId\n   * @param {?} layoutConfig\n   */\n  constructor(_serverStylesheet, _serverModuleLoaded, _platformId, layoutConfig) {\n    this._serverStylesheet = _serverStylesheet;\n    this._serverModuleLoaded = _serverModuleLoaded;\n    this._platformId = _platformId;\n    this.layoutConfig = layoutConfig;\n  }\n  /**\n   * Applies styles given via string pair or object map to the directive element\n   * @param {?} element\n   * @param {?} style\n   * @param {?=} value\n   * @return {?}\n   */\n  applyStyleToElement(element, style, value = null) {\n    /** @type {?} */\n    let styles = {};\n    if (typeof style === 'string') {\n      styles[style] = value;\n      style = styles;\n    }\n    styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    this._applyMultiValueStyleToElement(styles, element);\n  }\n  /**\n   * Applies styles given via string pair or object map to the directive's element\n   * @param {?} style\n   * @param {?=} elements\n   * @return {?}\n   */\n  applyStyleToElements(style, elements = []) {\n    /** @type {?} */\n    const styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    elements.forEach(\n    /**\n    * @param {?} el\n    * @return {?}\n    */\n    el => {\n      this._applyMultiValueStyleToElement(styles, el);\n    });\n  }\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction)\n   *\n   * Check inline style first then check computed (stylesheet) style\n   * @param {?} target\n   * @return {?}\n   */\n  getFlowDirection(target) {\n    /** @type {?} */\n    const query = 'flex-direction';\n    /** @type {?} */\n    let value = this.lookupStyle(target, query);\n    /** @type {?} */\n    const hasInlineValue = this.lookupInlineStyle(target, query) || isPlatformServer(this._platformId) && this._serverModuleLoaded ? value : '';\n    return [value || 'row', hasInlineValue];\n  }\n  /**\n   * @param {?} target\n   * @return {?}\n   */\n  hasWrap(target) {\n    /** @type {?} */\n    const query = 'flex-wrap';\n    return this.lookupStyle(target, query) === 'wrap';\n  }\n  /**\n   * Find the DOM element's raw attribute value (if any)\n   * @param {?} element\n   * @param {?} attribute\n   * @return {?}\n   */\n  lookupAttributeValue(element, attribute) {\n    return element.getAttribute(attribute) || '';\n  }\n  /**\n   * Find the DOM element's inline style value (if any)\n   * @param {?} element\n   * @param {?} styleName\n   * @return {?}\n   */\n  lookupInlineStyle(element, styleName) {\n    return isPlatformBrowser(this._platformId) ? element.style.getPropertyValue(styleName) : this._getServerStyle(element, styleName);\n  }\n  /**\n   * Determine the inline or inherited CSS style\n   * NOTE: platform-server has no implementation for getComputedStyle\n   * @param {?} element\n   * @param {?} styleName\n   * @param {?=} inlineOnly\n   * @return {?}\n   */\n  lookupStyle(element, styleName, inlineOnly = false) {\n    /** @type {?} */\n    let value = '';\n    if (element) {\n      /** @type {?} */\n      let immediateValue = value = this.lookupInlineStyle(element, styleName);\n      if (!immediateValue) {\n        if (isPlatformBrowser(this._platformId)) {\n          if (!inlineOnly) {\n            value = getComputedStyle(element).getPropertyValue(styleName);\n          }\n        } else {\n          if (this._serverModuleLoaded) {\n            value = this._serverStylesheet.getStyleForElement(element, styleName);\n          }\n        }\n      }\n    }\n    // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n    //       in which case getComputedStyle() should determine a valid value.\n    return value ? value.trim() : '';\n  }\n  /**\n   * Applies the styles to the element. The styles object map may contain an array of values\n   * Each value will be added as element style\n   * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n   * @private\n   * @param {?} styles\n   * @param {?} element\n   * @return {?}\n   */\n  _applyMultiValueStyleToElement(styles, element) {\n    Object.keys(styles).sort().forEach(\n    /**\n    * @param {?} key\n    * @return {?}\n    */\n    key => {\n      /** @type {?} */\n      const el = styles[key];\n      /** @type {?} */\n      const values = Array.isArray(el) ? el : [el];\n      values.sort();\n      for (let value of values) {\n        value = value ? value + '' : '';\n        if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n          isPlatformBrowser(this._platformId) ? element.style.setProperty(key, value) : this._setServerStyle(element, key, value);\n        } else {\n          this._serverStylesheet.addStyleToElement(element, key, value);\n        }\n      }\n    });\n  }\n  /**\n   * @private\n   * @param {?} element\n   * @param {?} styleName\n   * @param {?=} styleValue\n   * @return {?}\n   */\n  _setServerStyle(element, styleName, styleValue) {\n    styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    /** @type {?} */\n    const styleMap = this._readStyleAttribute(element);\n    styleMap[styleName] = styleValue || '';\n    this._writeStyleAttribute(element, styleMap);\n  }\n  /**\n   * @private\n   * @param {?} element\n   * @param {?} styleName\n   * @return {?}\n   */\n  _getServerStyle(element, styleName) {\n    /** @type {?} */\n    const styleMap = this._readStyleAttribute(element);\n    return styleMap[styleName] || '';\n  }\n  /**\n   * @private\n   * @param {?} element\n   * @return {?}\n   */\n  _readStyleAttribute(element) {\n    /** @type {?} */\n    const styleMap = {};\n    /** @type {?} */\n    const styleAttribute = element.getAttribute('style');\n    if (styleAttribute) {\n      /** @type {?} */\n      const styleList = styleAttribute.split(/;+/g);\n      for (let i = 0; i < styleList.length; i++) {\n        /** @type {?} */\n        const style = styleList[i].trim();\n        if (style.length > 0) {\n          /** @type {?} */\n          const colonIndex = style.indexOf(':');\n          if (colonIndex === -1) {\n            throw new Error(`Invalid CSS style: ${style}`);\n          }\n          /** @type {?} */\n          const name = style.substr(0, colonIndex).trim();\n          styleMap[name] = style.substr(colonIndex + 1).trim();\n        }\n      }\n    }\n    return styleMap;\n  }\n  /**\n   * @private\n   * @param {?} element\n   * @param {?} styleMap\n   * @return {?}\n   */\n  _writeStyleAttribute(element, styleMap) {\n    /** @type {?} */\n    let styleAttrValue = '';\n    for (const key in styleMap) {\n      /** @type {?} */\n      const newValue = styleMap[key];\n      if (newValue) {\n        styleAttrValue += key + ':' + styleMap[key] + ';';\n      }\n    }\n    element.setAttribute('style', styleAttrValue);\n  }\n}\n/** @nocollapse */\nStyleUtils.ɵprov = ɵɵdefineInjectable({\n  factory: function StyleUtils_Factory() {\n    return new StyleUtils(ɵɵinject(StylesheetMap), ɵɵinject(SERVER_TOKEN), ɵɵinject(PLATFORM_ID), ɵɵinject(LAYOUT_CONFIG));\n  },\n  token: StyleUtils,\n  providedIn: \"root\"\n});\nStyleUtils.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n/** @nocollapse */\nStyleUtils.ctorParameters = () => [{\n  type: StylesheetMap\n}, {\n  type: Boolean,\n  decorators: [{\n    type: Inject,\n    args: [SERVER_TOKEN]\n  }]\n}, {\n  type: Object,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [LAYOUT_CONFIG]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/style-builder/style-builder.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A class that encapsulates CSS style generation for common directives\n * @abstract\n */\nclass StyleBuilder {\n  constructor() {\n    /**\n     * Whether to cache the generated output styles\n     */\n    this.shouldCache = true;\n  }\n  /**\n   * Run a side effect computation given the input string and the computed styles\n   * from the build task and the host configuration object\n   * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n   * @param {?} _input\n   * @param {?} _styles\n   * @param {?=} _parent\n   * @return {?}\n   */\n  sideEffect(_input, _styles, _parent) {}\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/basis-validator/basis-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * The flex API permits 3 or 1 parts of the value:\n *    - `flex-grow flex-shrink flex-basis`, or\n *    - `flex-basis`\n * @param {?} basis\n * @param {?=} grow\n * @param {?=} shrink\n * @return {?}\n */\nfunction validateBasis(basis, grow = '1', shrink = '1') {\n  /** @type {?} */\n  let parts = [grow, shrink, basis];\n  /** @type {?} */\n  let j = basis.indexOf('calc');\n  if (j > 0) {\n    parts[2] = _validateCalcValue(basis.substring(j).trim());\n    /** @type {?} */\n    let matches = basis.substr(0, j).trim().split(' ');\n    if (matches.length == 2) {\n      parts[0] = matches[0];\n      parts[1] = matches[1];\n    }\n  } else if (j == 0) {\n    parts[2] = _validateCalcValue(basis.trim());\n  } else {\n    /** @type {?} */\n    let matches = basis.split(' ');\n    parts = matches.length === 3 ? matches : [grow, shrink, basis];\n  }\n  return parts;\n}\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n * @param {?} calc\n * @return {?}\n */\nfunction _validateCalcValue(calc) {\n  return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-marshaller/media-marshaller.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * MediaMarshaller - register responsive values from directives and\n *                   trigger them based on media query events\n */\nclass MediaMarshaller {\n  /**\n   * @param {?} matchMedia\n   * @param {?} breakpoints\n   * @param {?} hook\n   */\n  constructor(matchMedia, breakpoints, hook) {\n    this.matchMedia = matchMedia;\n    this.breakpoints = breakpoints;\n    this.hook = hook;\n    this.activatedBreakpoints = [];\n    this.elementMap = new Map();\n    this.elementKeyMap = new WeakMap();\n    this.watcherMap = new WeakMap(); // special triggers to update elements\n    // special triggers to update elements\n    this.updateMap = new WeakMap(); // callback functions to update styles\n    // callback functions to update styles\n    this.clearMap = new WeakMap(); // callback functions to clear styles\n    // callback functions to clear styles\n    this.subject = new Subject();\n    this.observeActivations();\n  }\n  /**\n   * @return {?}\n   */\n  get activatedAlias() {\n    return this.activatedBreakpoints[0] ? this.activatedBreakpoints[0].alias : '';\n  }\n  /**\n   * Update styles on breakpoint activates or deactivates\n   * @param {?} mc\n   * @return {?}\n   */\n  onMediaChange(mc) {\n    /** @type {?} */\n    const bp = this.findByQuery(mc.mediaQuery);\n    if (bp) {\n      mc = mergeAlias(mc, bp);\n      if (mc.matches && this.activatedBreakpoints.indexOf(bp) === -1) {\n        this.activatedBreakpoints.push(bp);\n        this.activatedBreakpoints.sort(sortDescendingPriority);\n        this.updateStyles();\n      } else if (!mc.matches && this.activatedBreakpoints.indexOf(bp) !== -1) {\n        // Remove the breakpoint when it's deactivated\n        this.activatedBreakpoints.splice(this.activatedBreakpoints.indexOf(bp), 1);\n        this.activatedBreakpoints.sort(sortDescendingPriority);\n        this.updateStyles();\n      }\n    }\n  }\n  /**\n   * initialize the marshaller with necessary elements for delegation on an element\n   * @param {?} element\n   * @param {?} key\n   * @param {?=} updateFn optional callback so that custom bp directives don't have to re-provide this\n   * @param {?=} clearFn optional callback so that custom bp directives don't have to re-provide this\n   * @param {?=} extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)\n   * @return {?}\n   */\n  init(element, key, updateFn, clearFn, extraTriggers = []) {\n    initBuilderMap(this.updateMap, element, key, updateFn);\n    initBuilderMap(this.clearMap, element, key, clearFn);\n    this.buildElementKeyMap(element, key);\n    this.watchExtraTriggers(element, key, extraTriggers);\n  }\n  /**\n   * get the value for an element and key and optionally a given breakpoint\n   * @param {?} element\n   * @param {?} key\n   * @param {?=} bp\n   * @return {?}\n   */\n  getValue(element, key, bp) {\n    /** @type {?} */\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      /** @type {?} */\n      const values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);\n      if (values) {\n        return values.get(key);\n      }\n    }\n    return undefined;\n  }\n  /**\n   * whether the element has values for a given key\n   * @param {?} element\n   * @param {?} key\n   * @return {?}\n   */\n  hasValue(element, key) {\n    /** @type {?} */\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      /** @type {?} */\n      const values = this.getActivatedValues(bpMap, key);\n      if (values) {\n        return values.get(key) !== undefined || false;\n      }\n    }\n    return false;\n  }\n  /**\n   * Set the value for an input on a directive\n   * @param {?} element the element in question\n   * @param {?} key the type of the directive (e.g. flex, layout-gap, etc)\n   * @param {?} val the value for the breakpoint\n   * @param {?} bp the breakpoint suffix (empty string = default)\n   * @return {?}\n   */\n  setValue(element, key, val, bp) {\n    /** @type {?} */\n    let bpMap = this.elementMap.get(element);\n    if (!bpMap) {\n      bpMap = new Map().set(bp, new Map().set(key, val));\n      this.elementMap.set(element, bpMap);\n    } else {\n      /** @type {?} */\n      const values = (bpMap.get(bp) || new Map()).set(key, val);\n      bpMap.set(bp, values);\n      this.elementMap.set(element, bpMap);\n    }\n    /** @type {?} */\n    const value = this.getValue(element, key);\n    if (value !== undefined) {\n      this.updateElement(element, key, value);\n    }\n  }\n  /**\n   * Track element value changes for a specific key\n   * @param {?} element\n   * @param {?} key\n   * @return {?}\n   */\n  trackValue(element, key) {\n    return this.subject.asObservable().pipe(filter(\n    /**\n    * @param {?} v\n    * @return {?}\n    */\n    v => v.element === element && v.key === key));\n  }\n  /**\n   * update all styles for all elements on the current breakpoint\n   * @return {?}\n   */\n  updateStyles() {\n    this.elementMap.forEach(\n    /**\n    * @param {?} bpMap\n    * @param {?} el\n    * @return {?}\n    */\n    (bpMap, el) => {\n      /** @type {?} */\n      const keyMap = new Set( /** @type {?} */this.elementKeyMap.get(el));\n      /** @type {?} */\n      let valueMap = this.getActivatedValues(bpMap);\n      if (valueMap) {\n        valueMap.forEach(\n        /**\n        * @param {?} v\n        * @param {?} k\n        * @return {?}\n        */\n        (v, k) => {\n          this.updateElement(el, k, v);\n          keyMap.delete(k);\n        });\n      }\n      keyMap.forEach(\n      /**\n      * @param {?} k\n      * @return {?}\n      */\n      k => {\n        valueMap = this.getActivatedValues(bpMap, k);\n        if (valueMap) {\n          /** @type {?} */\n          const value = valueMap.get(k);\n          this.updateElement(el, k, value);\n        } else {\n          this.clearElement(el, k);\n        }\n      });\n    });\n  }\n  /**\n   * clear the styles for a given element\n   * @param {?} element\n   * @param {?} key\n   * @return {?}\n   */\n  clearElement(element, key) {\n    /** @type {?} */\n    const builders = this.clearMap.get(element);\n    if (builders) {\n      /** @type {?} */\n      const clearFn = /** @type {?} */builders.get(key);\n      if (!!clearFn) {\n        clearFn();\n        this.subject.next({\n          element,\n          key,\n          value: ''\n        });\n      }\n    }\n  }\n  /**\n   * update a given element with the activated values for a given key\n   * @param {?} element\n   * @param {?} key\n   * @param {?} value\n   * @return {?}\n   */\n  updateElement(element, key, value) {\n    /** @type {?} */\n    const builders = this.updateMap.get(element);\n    if (builders) {\n      /** @type {?} */\n      const updateFn = /** @type {?} */builders.get(key);\n      if (!!updateFn) {\n        updateFn(value);\n        this.subject.next({\n          element,\n          key,\n          value\n        });\n      }\n    }\n  }\n  /**\n   * release all references to a given element\n   * @param {?} element\n   * @return {?}\n   */\n  releaseElement(element) {\n    /** @type {?} */\n    const watcherMap = this.watcherMap.get(element);\n    if (watcherMap) {\n      watcherMap.forEach(\n      /**\n      * @param {?} s\n      * @return {?}\n      */\n      s => s.unsubscribe());\n      this.watcherMap.delete(element);\n    }\n    /** @type {?} */\n    const elementMap = this.elementMap.get(element);\n    if (elementMap) {\n      elementMap.forEach(\n      /**\n      * @param {?} _\n      * @param {?} s\n      * @return {?}\n      */\n      (_, s) => elementMap.delete(s));\n      this.elementMap.delete(element);\n    }\n  }\n  /**\n   * trigger an update for a given element and key (e.g. layout)\n   * @param {?} element\n   * @param {?=} key\n   * @return {?}\n   */\n  triggerUpdate(element, key) {\n    /** @type {?} */\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      /** @type {?} */\n      const valueMap = this.getActivatedValues(bpMap, key);\n      if (valueMap) {\n        if (key) {\n          this.updateElement(element, key, valueMap.get(key));\n        } else {\n          valueMap.forEach(\n          /**\n          * @param {?} v\n          * @param {?} k\n          * @return {?}\n          */\n          (v, k) => this.updateElement(element, k, v));\n        }\n      }\n    }\n  }\n  /**\n   * Cross-reference for HTMLElement with directive key\n   * @private\n   * @param {?} element\n   * @param {?} key\n   * @return {?}\n   */\n  buildElementKeyMap(element, key) {\n    /** @type {?} */\n    let keyMap = this.elementKeyMap.get(element);\n    if (!keyMap) {\n      keyMap = new Set();\n      this.elementKeyMap.set(element, keyMap);\n    }\n    keyMap.add(key);\n  }\n  /**\n   * Other triggers that should force style updates:\n   * - directionality\n   * - layout changes\n   * - mutationobserver updates\n   * @private\n   * @param {?} element\n   * @param {?} key\n   * @param {?} triggers\n   * @return {?}\n   */\n  watchExtraTriggers(element, key, triggers) {\n    if (triggers && triggers.length) {\n      /** @type {?} */\n      let watchers = this.watcherMap.get(element);\n      if (!watchers) {\n        watchers = new Map();\n        this.watcherMap.set(element, watchers);\n      }\n      /** @type {?} */\n      const subscription = watchers.get(key);\n      if (!subscription) {\n        /** @type {?} */\n        const newSubscription = merge(...triggers).subscribe(\n        /**\n        * @return {?}\n        */\n        () => {\n          /** @type {?} */\n          const currentValue = this.getValue(element, key);\n          this.updateElement(element, key, currentValue);\n        });\n        watchers.set(key, newSubscription);\n      }\n    }\n  }\n  /**\n   * Breakpoint locator by mediaQuery\n   * @private\n   * @param {?} query\n   * @return {?}\n   */\n  findByQuery(query) {\n    return this.breakpoints.findByQuery(query);\n  }\n  /**\n   * get the fallback breakpoint for a given element, starting with the current breakpoint\n   * @private\n   * @param {?} bpMap\n   * @param {?=} key\n   * @return {?}\n   */\n  getActivatedValues(bpMap, key) {\n    for (let i = 0; i < this.activatedBreakpoints.length; i++) {\n      /** @type {?} */\n      const activatedBp = this.activatedBreakpoints[i];\n      /** @type {?} */\n      const valueMap = bpMap.get(activatedBp.alias);\n      if (valueMap) {\n        if (key === undefined || valueMap.has(key) && valueMap.get(key) != null) {\n          return valueMap;\n        }\n      }\n    }\n    /** @type {?} */\n    const lastHope = bpMap.get('');\n    return key === undefined || lastHope && lastHope.has(key) ? lastHope : undefined;\n  }\n  /**\n   * Watch for mediaQuery breakpoint activations\n   * @private\n   * @return {?}\n   */\n  observeActivations() {\n    /** @type {?} */\n    const target = /** @type {?} */ /** @type {?} */this;\n    /** @type {?} */\n    const queries = this.breakpoints.items.map(\n    /**\n    * @param {?} bp\n    * @return {?}\n    */\n    bp => bp.mediaQuery);\n    this.matchMedia.observe(this.hook.withPrintQuery(queries)).pipe(tap(this.hook.interceptEvents(target)), filter(this.hook.blockPropagation())).subscribe(this.onMediaChange.bind(this));\n  }\n}\n/** @nocollapse */\nMediaMarshaller.ɵprov = ɵɵdefineInjectable({\n  factory: function MediaMarshaller_Factory() {\n    return new MediaMarshaller(ɵɵinject(MatchMedia), ɵɵinject(BreakPointRegistry), ɵɵinject(PrintHook));\n  },\n  token: MediaMarshaller,\n  providedIn: \"root\"\n});\nMediaMarshaller.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n/** @nocollapse */\nMediaMarshaller.ctorParameters = () => [{\n  type: MatchMedia\n}, {\n  type: BreakPointRegistry\n}, {\n  type: PrintHook\n}];\n/**\n * @param {?} map\n * @param {?} element\n * @param {?} key\n * @param {?=} input\n * @return {?}\n */\nfunction initBuilderMap(map$$1, element, key, input) {\n  if (input !== undefined) {\n    /** @type {?} */\n    let oldMap = map$$1.get(element);\n    if (!oldMap) {\n      oldMap = new Map();\n      map$$1.set(element, oldMap);\n    }\n    oldMap.set(key, input);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatchMedia as ɵMatchMedia, MockMatchMedia as ɵMockMatchMedia, MockMatchMediaProvider as ɵMockMatchMediaProvider, CoreModule, removeStyles, BROWSER_PROVIDER, CLASS_NAME, MediaChange, StylesheetMap, DEFAULT_CONFIG, LAYOUT_CONFIG, SERVER_TOKEN, BREAKPOINT, mergeAlias, BaseDirective2, DEFAULT_BREAKPOINTS, ScreenTypes, ORIENTATION_BREAKPOINTS, BreakPointRegistry, BREAKPOINTS, MediaObserver, MediaTrigger, sortDescendingPriority, sortAscendingPriority, coerceArray, StyleUtils, StyleBuilder, validateBasis, MediaMarshaller, BREAKPOINT_PRINT, PrintHook };","map":{"version":3,"names":["APP_BOOTSTRAP_LISTENER","PLATFORM_ID","NgModule","Injectable","InjectionToken","Inject","inject","NgZone","ɵɵdefineInjectable","ɵɵinject","DOCUMENT","isPlatformBrowser","isPlatformServer","Subject","BehaviorSubject","Observable","merge","asapScheduler","of","fromEvent","filter","debounceTime","map","switchMap","takeUntil","take","tap","removeStyles","_document","platformId","elements","Array","from","querySelectorAll","CLASS_NAME","classRegex","forEach","el","classList","contains","parentNode","removeChild","className","replace","BROWSER_PROVIDER","provide","useFactory","deps","multi","CoreModule","decorators","type","args","providers","MediaChange","constructor","matches","mediaQuery","mqAlias","suffix","priority","property","clone","StylesheetMap","stylesheet","Map","addStyleToElement","element","style","value","get","set","clearStyles","clear","getStyleForElement","styleName","styles","ɵprov","factory","StylesheetMap_Factory","token","providedIn","DEFAULT_CONFIG","addFlexToParent","addOrientationBps","disableDefaultBps","disableVendorPrefixes","serverLoaded","useColumnBasisZero","printWithBreakpoints","mediaTriggerAutoRestore","ssrObserveBreakpoints","LAYOUT_CONFIG","SERVER_TOKEN","BREAKPOINT","mergeAlias","dest","source","alias","INLINE","LAYOUT_VALUES","buildLayoutCSS","direction","wrap","isInline","validateValue","buildCSS","toLowerCase","inline","split","find","x","validateWrapValue","BaseDirective2","elementRef","styleBuilder","styler","marshal","DIRECTIVE_KEY","inputs","mru","destroySubject","styleCache","parentElement","nativeElement","activatedValue","getValue","setValue","activatedAlias","ngOnChanges","changes","Object","keys","key","indexOf","bp","slice","join","val","currentValue","ngOnDestroy","next","complete","releaseElement","init","extraTriggers","updateWithValue","bind","addStyles","input","parent","builder","useCache","shouldCache","genStyles","buildStyles","assign","applyStyleToElement","sideEffect","k","triggerUpdate","getFlexFlowDirection","target","addIfMissing","hasInlineValue","getFlowDirection","applyStyleToElements","trim","hasWrap","DEFAULT_BREAKPOINTS","overlapping","HANDSET_PORTRAIT","HANDSET_LANDSCAPE","TABLET_PORTRAIT","TABLET_LANDSCAPE","WEB_PORTRAIT","WEB_LANDSCAPE","ScreenTypes","ORIENTATION_BREAKPOINTS","HANDSET","TABLET","WEB","extendObject","sources","TypeError","hasOwnProperty","ALIAS_DELIMITERS","firstUpperCase","part","first","length","charAt","remainder","toUpperCase","camelCase","name","validateSuffixes","list","mergeByAlias","defaults","custom","dict","BREAKPOINTS","breakpoints","layoutConfig","bpFlattenArray","concat","apply","v","isArray","builtIns","sortDescendingPriority","a","b","priorityA","priorityB","sortAscendingPriority","pA","pB","BreakPointRegistry","findByMap","items","sort","findByAlias","findWithPredicate","findByQuery","query","overlappings","it","aliases","suffixes","searchFn","response","BreakPointRegistry_Factory","ctorParameters","MatchMedia","_zone","_platformId","registry","pendingRemoveListenerFns","_observable$","asObservable","activations","results","mql","push","isActive","registerQuery","some","m","observe","mqList","filterOthers","matchMedia$","pipe","change","registration$","observer","lastChange","pop","e","buildQueryCss","onMQLEvent","run","buildMQL","addListener","removeListener","fn","constructMql","MatchMedia_Factory","undefined","ALL_STYLES","mediaQueries","styleEl","createElement","setAttribute","styleSheet","cssText","appendChild","createTextNode","head","mq","console","error","isBrowser","canListen","window","matchMedia","media","onchange","addEventListener","removeEventListener","dispatchEvent","MockMatchMedia","_breakpoints","autoRegisterQueries","useOverlaps","clearAll","destroy","activate","_validateQuery","_deactivateAll","_registerMediaQuery","_activateWithOverlaps","hasActivated","queryOrAlias","_activateByAlias","_activateByQuery","has","deactivate","MockMediaQueryList","_mediaQuery","_isActive","_listeners","callback","cb","call","listener","_","__","___","MockMatchMediaProvider","useClass","PRINT","BREAKPOINT_PRINT","PrintHook","registeredBeforeAfterPrintHooks","isPrintingBeforeAfterEvent","beforePrintEventListeners","afterPrintEventListeners","isPrinting","queue","PrintQueue","deactivations","withPrintQuery","queries","isPrintEvent","startsWith","printAlias","printBreakPoints","getEventBreakpoints","updateEvent","event","registerBeforeAfterPrintHooks","defaultView","beforePrintListener","startPrinting","updateStyles","afterPrintListener","stopPrinting","interceptEvents","collectActivations","blockPropagation","bpList","activatedBreakpoints","addPrintBreakpoints","l","PrintHook_Factory","printBreakpoints","addBreakpoint","bpInList","isPrintBreakPoint","coerceArray","MediaObserver","hook","filterOverlaps","destroyed$","_media$","watchActivations","media$","splitQueries","toMediaQuery","buildObservable","hasChanges","isValidQuery","excludeOverlaps","findAllActivations","mergeMQAlias","replaceWithPrintAlias","MediaObserver_Factory","locator","reduce","a1","a2","MediaTrigger","hasCachedRegistryMatches","originalActivations","originalRegistry","saveActivations","deactivateAll","setActivations","prepareAutoRestore","restore","extractQuery","restoreRegistryMatches","resizeSubscription","unsubscribe","enableAutoRestore","resize$","subscribe","currentActivations","forceRegistryMatches","simulateMediaChanges","toMediaChange","cacheRegistryMatches","emitChangeEvent","MediaTrigger_Factory","applyCssPrefixes","isNaN","StyleUtils","_serverStylesheet","_serverModuleLoaded","_applyMultiValueStyleToElement","lookupStyle","lookupInlineStyle","lookupAttributeValue","attribute","getAttribute","getPropertyValue","_getServerStyle","inlineOnly","immediateValue","getComputedStyle","values","setProperty","_setServerStyle","styleValue","styleMap","_readStyleAttribute","_writeStyleAttribute","styleAttribute","styleList","i","colonIndex","Error","substr","styleAttrValue","newValue","StyleUtils_Factory","Boolean","StyleBuilder","_input","_styles","_parent","validateBasis","basis","grow","shrink","parts","j","_validateCalcValue","substring","calc","MediaMarshaller","elementMap","elementKeyMap","WeakMap","watcherMap","updateMap","clearMap","subject","observeActivations","onMediaChange","mc","splice","updateFn","clearFn","initBuilderMap","buildElementKeyMap","watchExtraTriggers","bpMap","getActivatedValues","hasValue","updateElement","trackValue","keyMap","Set","valueMap","delete","clearElement","builders","s","add","triggers","watchers","subscription","newSubscription","activatedBp","lastHope","MediaMarshaller_Factory","map$$1","oldMap","ɵMatchMedia","ɵMockMatchMedia","ɵMockMatchMediaProvider"],"sources":["C:/Users/CSEG/Desktop/thassign/node_modules/@angular/flex-layout/esm2015/core.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_ID, NgModule, Injectable, InjectionToken, Inject, inject, NgZone, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { Subject, BehaviorSubject, Observable, merge, asapScheduler, of, fromEvent } from 'rxjs';\nimport { filter, debounceTime, map, switchMap, takeUntil, take, tap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/browser-provider.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n * @param {?} _document\n * @param {?} platformId\n * @return {?}\n */\nfunction removeStyles(_document, platformId) {\n    return (/**\n     * @return {?}\n     */\n    () => {\n        if (isPlatformBrowser(platformId)) {\n            /** @type {?} */\n            const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n            // RegExp constructor should only be used if passing a variable to the constructor.\n            // When using static regular expression it is more performant to use reg exp literal.\n            // This is also needed to provide Safari 9 compatibility, please see\n            // https://stackoverflow.com/questions/37919802 for more discussion.\n            /** @type {?} */\n            const classRegex = /\\bflex-layout-.+?\\b/g;\n            elements.forEach((/**\n             * @param {?} el\n             * @return {?}\n             */\n            el => {\n                el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ?\n                    el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n            }));\n        }\n    });\n}\n/**\n *  Provider to remove SSR styles on the browser\n * @type {?}\n */\nconst BROWSER_PROVIDER = {\n    provide: (/** @type {?} */ (APP_BOOTSTRAP_LISTENER)),\n    useFactory: removeStyles,\n    deps: [DOCUMENT, PLATFORM_ID],\n    multi: true\n};\n/** @type {?} */\nconst CLASS_NAME = 'flex-layout-';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * *****************************************************************\n * Define module for common Angular Layout utilities\n * *****************************************************************\n */\nclass CoreModule {\n}\nCoreModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [BROWSER_PROVIDER]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-change.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nclass MediaChange {\n    /**\n     * @param {?=} matches whether the mediaQuery is currently activated\n     * @param {?=} mediaQuery e.g. (min-width: 600px) and (max-width: 959px)\n     * @param {?=} mqAlias e.g. gt-sm, md, gt-lg\n     * @param {?=} suffix e.g. GtSM, Md, GtLg\n     * @param {?=} priority the priority of activation for the given breakpoint\n     */\n    constructor(matches = false, mediaQuery = 'all', mqAlias = '', suffix = '', priority = 0) {\n        this.matches = matches;\n        this.mediaQuery = mediaQuery;\n        this.mqAlias = mqAlias;\n        this.suffix = suffix;\n        this.priority = priority;\n        this.property = '';\n    }\n    /**\n     * Create an exact copy of the MediaChange\n     * @return {?}\n     */\n    clone() {\n        return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/stylesheet-map/stylesheet-map.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\nclass StylesheetMap {\n    constructor() {\n        this.stylesheet = new Map();\n    }\n    /**\n     * Add an individual style to an HTML element\n     * @param {?} element\n     * @param {?} style\n     * @param {?} value\n     * @return {?}\n     */\n    addStyleToElement(element, style, value) {\n        /** @type {?} */\n        const stylesheet = this.stylesheet.get(element);\n        if (stylesheet) {\n            stylesheet.set(style, value);\n        }\n        else {\n            this.stylesheet.set(element, new Map([[style, value]]));\n        }\n    }\n    /**\n     * Clear the virtual stylesheet\n     * @return {?}\n     */\n    clearStyles() {\n        this.stylesheet.clear();\n    }\n    /**\n     * Retrieve a given style for an HTML element\n     * @param {?} el\n     * @param {?} styleName\n     * @return {?}\n     */\n    getStyleForElement(el, styleName) {\n        /** @type {?} */\n        const styles = this.stylesheet.get(el);\n        /** @type {?} */\n        let value = '';\n        if (styles) {\n            /** @type {?} */\n            const style = styles.get(styleName);\n            if (typeof style === 'number' || typeof style === 'string') {\n                value = style + '';\n            }\n        }\n        return value;\n    }\n}\n/** @nocollapse */ StylesheetMap.ɵprov = ɵɵdefineInjectable({ factory: function StylesheetMap_Factory() { return new StylesheetMap(); }, token: StylesheetMap, providedIn: \"root\" });\nStylesheetMap.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/stylesheet-map/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/library-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DEFAULT_CONFIG = {\n    addFlexToParent: true,\n    addOrientationBps: false,\n    disableDefaultBps: false,\n    disableVendorPrefixes: false,\n    serverLoaded: false,\n    useColumnBasisZero: true,\n    printWithBreakpoints: [],\n    mediaTriggerAutoRestore: true,\n    ssrObserveBreakpoints: [],\n};\n/** @type {?} */\nconst LAYOUT_CONFIG = new InjectionToken('Flex Layout token, config options for the library', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => DEFAULT_CONFIG)\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/server-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n * @type {?}\n */\nconst SERVER_TOKEN = new InjectionToken('FlexLayoutServerLoaded', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => false)\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/breakpoint-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst BREAKPOINT = new InjectionToken('Flex Layout token, collect all breakpoints into one provider', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => null)\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/add-alias.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction mergeAlias(dest, source) {\n    dest = dest ? dest.clone() : new MediaChange();\n    if (source) {\n        dest.mqAlias = source.alias;\n        dest.mediaQuery = source.mediaQuery;\n        dest.suffix = (/** @type {?} */ (source.suffix));\n        dest.priority = (/** @type {?} */ (source.priority));\n    }\n    return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: utils/layout-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @type {?}\n */\nconst INLINE = 'inline';\n/** @type {?} */\nconst LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];\n/**\n * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles\n * @param {?} value\n * @return {?}\n */\nfunction buildLayoutCSS(value) {\n    let [direction, wrap, isInline] = validateValue(value);\n    return buildCSS(direction, wrap, isInline);\n}\n/**\n * Validate the value to be one of the acceptable value options\n * Use default fallback of 'row'\n * @param {?} value\n * @return {?}\n */\nfunction validateValue(value) {\n    value = value ? value.toLowerCase() : '';\n    let [direction, wrap, inline] = value.split(' ');\n    // First value must be the `flex-direction`\n    if (!LAYOUT_VALUES.find((/**\n     * @param {?} x\n     * @return {?}\n     */\n    x => x === direction))) {\n        direction = LAYOUT_VALUES[0];\n    }\n    if (wrap === INLINE) {\n        wrap = (inline !== INLINE) ? inline : '';\n        inline = INLINE;\n    }\n    return [direction, validateWrapValue(wrap), !!inline];\n}\n/**\n * Convert layout-wrap='<value>' to expected flex-wrap style\n * @param {?} value\n * @return {?}\n */\nfunction validateWrapValue(value) {\n    if (!!value) {\n        switch (value.toLowerCase()) {\n            case 'reverse':\n            case 'wrap-reverse':\n            case 'reverse-wrap':\n                value = 'wrap-reverse';\n                break;\n            case 'no':\n            case 'none':\n            case 'nowrap':\n                value = 'nowrap';\n                break;\n            // All other values fallback to 'wrap'\n            default:\n                value = 'wrap';\n                break;\n        }\n    }\n    return value;\n}\n/**\n * Build the CSS that should be assigned to the element instance\n * BUG:\n *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.\n *      Use height instead if possible; height : <xxx>vh;\n *\n *  This way any padding or border specified on the child elements are\n *  laid out and drawn inside that element's specified width and height.\n * @param {?} direction\n * @param {?=} wrap\n * @param {?=} inline\n * @return {?}\n */\nfunction buildCSS(direction, wrap = null, inline = false) {\n    return {\n        'display': inline ? 'inline-flex' : 'flex',\n        'box-sizing': 'border-box',\n        'flex-direction': direction,\n        'flex-wrap': !!wrap ? wrap : null\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/base/base2.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass BaseDirective2 {\n    /**\n     * @protected\n     * @param {?} elementRef\n     * @param {?} styleBuilder\n     * @param {?} styler\n     * @param {?} marshal\n     */\n    constructor(elementRef, styleBuilder, styler, marshal) {\n        this.elementRef = elementRef;\n        this.styleBuilder = styleBuilder;\n        this.styler = styler;\n        this.marshal = marshal;\n        this.DIRECTIVE_KEY = '';\n        this.inputs = [];\n        /**\n         * The most recently used styles for the builder\n         */\n        this.mru = {};\n        this.destroySubject = new Subject();\n        /**\n         * Cache map for style computation\n         */\n        this.styleCache = new Map();\n    }\n    /**\n     * Access to host element's parent DOM node\n     * @protected\n     * @return {?}\n     */\n    get parentElement() {\n        return this.elementRef.nativeElement.parentElement;\n    }\n    /**\n     * Access to the HTMLElement for the directive\n     * @protected\n     * @return {?}\n     */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n    /**\n     * Access to the activated value for the directive\n     * @return {?}\n     */\n    get activatedValue() {\n        return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set activatedValue(value) {\n        this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value, this.marshal.activatedAlias);\n    }\n    /**\n     * For \\@Input changes\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        Object.keys(changes).forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            if (this.inputs.indexOf(key) !== -1) {\n                /** @type {?} */\n                const bp = key.split('.').slice(1).join('.');\n                /** @type {?} */\n                const val = changes[key].currentValue;\n                this.setValue(val, bp);\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroySubject.next();\n        this.destroySubject.complete();\n        this.marshal.releaseElement(this.nativeElement);\n    }\n    /**\n     * Register with central marshaller service\n     * @protected\n     * @param {?=} extraTriggers\n     * @return {?}\n     */\n    init(extraTriggers = []) {\n        this.marshal.init(this.elementRef.nativeElement, this.DIRECTIVE_KEY, this.updateWithValue.bind(this), this.clearStyles.bind(this), extraTriggers);\n    }\n    /**\n     * Add styles to the element using predefined style builder\n     * @protected\n     * @param {?} input\n     * @param {?=} parent\n     * @return {?}\n     */\n    addStyles(input, parent) {\n        /** @type {?} */\n        const builder = this.styleBuilder;\n        /** @type {?} */\n        const useCache = builder.shouldCache;\n        /** @type {?} */\n        let genStyles = this.styleCache.get(input);\n        if (!genStyles || !useCache) {\n            genStyles = builder.buildStyles(input, parent);\n            if (useCache) {\n                this.styleCache.set(input, genStyles);\n            }\n        }\n        this.mru = Object.assign({}, genStyles);\n        this.applyStyleToElement(genStyles);\n        builder.sideEffect(input, genStyles, parent);\n    }\n    /**\n     * Remove generated styles from an element using predefined style builder\n     * @protected\n     * @return {?}\n     */\n    clearStyles() {\n        Object.keys(this.mru).forEach((/**\n         * @param {?} k\n         * @return {?}\n         */\n        k => {\n            this.mru[k] = '';\n        }));\n        this.applyStyleToElement(this.mru);\n        this.mru = {};\n    }\n    /**\n     * Force trigger style updates on DOM element\n     * @protected\n     * @return {?}\n     */\n    triggerUpdate() {\n        this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);\n    }\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction).\n     *\n     * Check inline style first then check computed (stylesheet) style.\n     * And optionally add the flow value to element's inline style.\n     * @protected\n     * @param {?} target\n     * @param {?=} addIfMissing\n     * @return {?}\n     */\n    getFlexFlowDirection(target, addIfMissing = false) {\n        if (target) {\n            const [value, hasInlineValue] = this.styler.getFlowDirection(target);\n            if (!hasInlineValue && addIfMissing) {\n                /** @type {?} */\n                const style = buildLayoutCSS(value);\n                /** @type {?} */\n                const elements = [target];\n                this.styler.applyStyleToElements(style, elements);\n            }\n            return value.trim();\n        }\n        return 'row';\n    }\n    /**\n     * @protected\n     * @param {?} target\n     * @return {?}\n     */\n    hasWrap(target) {\n        return this.styler.hasWrap(target);\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive element\n     * @protected\n     * @param {?} style\n     * @param {?=} value\n     * @param {?=} element\n     * @return {?}\n     */\n    applyStyleToElement(style, value, element = this.nativeElement) {\n        this.styler.applyStyleToElement(element, style, value);\n    }\n    /**\n     * @protected\n     * @param {?} val\n     * @param {?} bp\n     * @return {?}\n     */\n    setValue(val, bp) {\n        this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);\n    }\n    /**\n     * @protected\n     * @param {?} input\n     * @return {?}\n     */\n    updateWithValue(input) {\n        if (this.currentValue !== input) {\n            this.addStyles(input);\n            this.currentValue = input;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/base/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/data/break-points.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * NOTE: Smaller ranges have HIGHER priority since the match is more specific\n * @type {?}\n */\nconst DEFAULT_BREAKPOINTS = [\n    {\n        alias: 'xs',\n        mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.98px)',\n        priority: 1000,\n    },\n    {\n        alias: 'sm',\n        mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.98px)',\n        priority: 900,\n    },\n    {\n        alias: 'md',\n        mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.98px)',\n        priority: 800,\n    },\n    {\n        alias: 'lg',\n        mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.98px)',\n        priority: 700,\n    },\n    {\n        alias: 'xl',\n        mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.98px)',\n        priority: 600,\n    },\n    {\n        alias: 'lt-sm',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 599.98px)',\n        priority: 950,\n    },\n    {\n        alias: 'lt-md',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 959.98px)',\n        priority: 850,\n    },\n    {\n        alias: 'lt-lg',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 1279.98px)',\n        priority: 750,\n    },\n    {\n        alias: 'lt-xl',\n        overlapping: true,\n        priority: 650,\n        mediaQuery: 'screen and (max-width: 1919.98px)',\n    },\n    {\n        alias: 'gt-xs',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 600px)',\n        priority: -950,\n    },\n    {\n        alias: 'gt-sm',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 960px)',\n        priority: -850,\n    }, {\n        alias: 'gt-md',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 1280px)',\n        priority: -750,\n    },\n    {\n        alias: 'gt-lg',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 1920px)',\n        priority: -650,\n    }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/data/orientation-break-points.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/* tslint:disable */\n/** @type {?} */\nconst HANDSET_PORTRAIT = '(orientation: portrait) and (max-width: 599.98px)';\n/** @type {?} */\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959.98px)';\n/** @type {?} */\nconst TABLET_PORTRAIT = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.98px)';\n/** @type {?} */\nconst TABLET_LANDSCAPE = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.98px)';\n/** @type {?} */\nconst WEB_PORTRAIT = '(orientation: portrait) and (min-width: 840px)';\n/** @type {?} */\nconst WEB_LANDSCAPE = '(orientation: landscape) and (min-width: 1280px)';\n/** @type {?} */\nconst ScreenTypes = {\n    'HANDSET': `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n    'TABLET': `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n    'WEB': `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n    'HANDSET_PORTRAIT': `${HANDSET_PORTRAIT}`,\n    'TABLET_PORTRAIT': `${TABLET_PORTRAIT} `,\n    'WEB_PORTRAIT': `${WEB_PORTRAIT}`,\n    'HANDSET_LANDSCAPE': `${HANDSET_LANDSCAPE}`,\n    'TABLET_LANDSCAPE': `${TABLET_LANDSCAPE}`,\n    'WEB_LANDSCAPE': `${WEB_LANDSCAPE}`\n};\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n * @type {?}\n */\nconst ORIENTATION_BREAKPOINTS = [\n    { 'alias': 'handset', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET },\n    { 'alias': 'handset.landscape', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE },\n    { 'alias': 'handset.portrait', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_PORTRAIT },\n    { 'alias': 'tablet', priority: 2100, 'mediaQuery': ScreenTypes.TABLET },\n    { 'alias': 'tablet.landscape', priority: 2100, 'mediaQuery': ScreenTypes.TABLET_LANDSCAPE },\n    { 'alias': 'tablet.portrait', priority: 2100, 'mediaQuery': ScreenTypes.TABLET_PORTRAIT },\n    { 'alias': 'web', priority: 2200, 'mediaQuery': ScreenTypes.WEB, overlapping: true },\n    { 'alias': 'web.landscape', priority: 2200, 'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping: true },\n    { 'alias': 'web.portrait', priority: 2200, 'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping: true }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/break-point.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: utils/object-extend.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nfunction extendObject(dest, ...sources) {\n    if (dest == null) {\n        throw TypeError('Cannot convert undefined or null to object');\n    }\n    for (let source of sources) {\n        if (source != null) {\n            for (let key in source) {\n                if (source.hasOwnProperty(key)) {\n                    dest[key] = source[key];\n                }\n            }\n        }\n    }\n    return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/breakpoint-tools.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\n/**\n * @param {?} part\n * @return {?}\n */\nfunction firstUpperCase(part) {\n    /** @type {?} */\n    let first = part.length > 0 ? part.charAt(0) : '';\n    /** @type {?} */\n    let remainder = (part.length > 1) ? part.slice(1) : '';\n    return first.toUpperCase() + remainder;\n}\n/**\n * Converts snake-case to SnakeCase.\n * @param {?} name Text to UpperCamelCase\n * @return {?}\n */\nfunction camelCase(name) {\n    return name\n        .replace(ALIAS_DELIMITERS, '|')\n        .split('|')\n        .map(firstUpperCase)\n        .join('');\n}\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n * @param {?} list\n * @return {?}\n */\nfunction validateSuffixes(list) {\n    list.forEach((/**\n     * @param {?} bp\n     * @return {?}\n     */\n    (bp) => {\n        if (!bp.suffix) {\n            bp.suffix = camelCase(bp.alias); // create Suffix value based on alias\n            bp.overlapping = !!bp.overlapping; // ensure default value\n        }\n    }));\n    return list;\n}\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n * @param {?} defaults\n * @param {?=} custom\n * @return {?}\n */\nfunction mergeByAlias(defaults, custom = []) {\n    /** @type {?} */\n    const dict = {};\n    defaults.forEach((/**\n     * @param {?} bp\n     * @return {?}\n     */\n    bp => {\n        dict[bp.alias] = bp;\n    }));\n    // Merge custom breakpoints\n    custom.forEach((/**\n     * @param {?} bp\n     * @return {?}\n     */\n    (bp) => {\n        if (dict[bp.alias]) {\n            extendObject(dict[bp.alias], bp);\n        }\n        else {\n            dict[bp.alias] = bp;\n        }\n    }));\n    return validateSuffixes(Object.keys(dict).map((/**\n     * @param {?} k\n     * @return {?}\n     */\n    k => dict[k])));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/break-points-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n * @type {?}\n */\nconst BREAKPOINTS = new InjectionToken('Token (@angular/flex-layout) Breakpoints', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => {\n        /** @type {?} */\n        const breakpoints = inject(BREAKPOINT);\n        /** @type {?} */\n        const layoutConfig = inject(LAYOUT_CONFIG);\n        /** @type {?} */\n        const bpFlattenArray = [].concat.apply([], (breakpoints || [])\n            .map((/**\n         * @param {?} v\n         * @return {?}\n         */\n        (v) => Array.isArray(v) ? v : [v])));\n        /** @type {?} */\n        const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS)\n            .concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n        return mergeByAlias(builtIns, bpFlattenArray);\n    })\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/utils/sort.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * HOF to sort the breakpoints by descending priority\n * @template T\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction sortDescendingPriority(a, b) {\n    /** @type {?} */\n    const priorityA = a ? a.priority || 0 : 0;\n    /** @type {?} */\n    const priorityB = b ? b.priority || 0 : 0;\n    return priorityB - priorityA;\n}\n/**\n * HOF to sort the breakpoints by ascending priority\n * @template T\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction sortAscendingPriority(a, b) {\n    /** @type {?} */\n    const pA = a.priority || 0;\n    /** @type {?} */\n    const pB = b.priority || 0;\n    return pA - pB;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/break-point-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\nclass BreakPointRegistry {\n    /**\n     * @param {?} list\n     */\n    constructor(list) {\n        /**\n         * Memoized BreakPoint Lookups\n         */\n        this.findByMap = new Map();\n        this.items = [...list].sort(sortAscendingPriority);\n    }\n    /**\n     * Search breakpoints by alias (e.g. gt-xs)\n     * @param {?} alias\n     * @return {?}\n     */\n    findByAlias(alias) {\n        return !alias ? null : this.findWithPredicate(alias, (/**\n         * @param {?} bp\n         * @return {?}\n         */\n        (bp) => bp.alias == alias));\n    }\n    /**\n     * @param {?} query\n     * @return {?}\n     */\n    findByQuery(query) {\n        return this.findWithPredicate(query, (/**\n         * @param {?} bp\n         * @return {?}\n         */\n        (bp) => bp.mediaQuery == query));\n    }\n    /**\n     * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n     * e.g. gt-sm overlaps md, lg, and xl\n     * @return {?}\n     */\n    get overlappings() {\n        return this.items.filter((/**\n         * @param {?} it\n         * @return {?}\n         */\n        it => it.overlapping == true));\n    }\n    /**\n     * Get list of all registered (non-empty) breakpoint aliases\n     * @return {?}\n     */\n    get aliases() {\n        return this.items.map((/**\n         * @param {?} it\n         * @return {?}\n         */\n        it => it.alias));\n    }\n    /**\n     * Aliases are mapped to properties using suffixes\n     * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n     * for property layoutGtSM.\n     * @return {?}\n     */\n    get suffixes() {\n        return this.items.map((/**\n         * @param {?} it\n         * @return {?}\n         */\n        it => !!it.suffix ? it.suffix : ''));\n    }\n    /**\n     * Memoized lookup using custom predicate function\n     * @private\n     * @param {?} key\n     * @param {?} searchFn\n     * @return {?}\n     */\n    findWithPredicate(key, searchFn) {\n        /** @type {?} */\n        let response = this.findByMap.get(key);\n        if (!response) {\n            response = this.items.find(searchFn) || null;\n            this.findByMap.set(key, response);\n        }\n        return response || null;\n    }\n}\n/** @nocollapse */ BreakPointRegistry.ɵprov = ɵɵdefineInjectable({ factory: function BreakPointRegistry_Factory() { return new BreakPointRegistry(ɵɵinject(BREAKPOINTS)); }, token: BreakPointRegistry, providedIn: \"root\" });\nBreakPointRegistry.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nBreakPointRegistry.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Inject, args: [BREAKPOINTS,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/match-media/match-media.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\nclass MatchMedia {\n    /**\n     * @param {?} _zone\n     * @param {?} _platformId\n     * @param {?} _document\n     */\n    constructor(_zone, _platformId, _document) {\n        this._zone = _zone;\n        this._platformId = _platformId;\n        this._document = _document;\n        /**\n         * Initialize source with 'all' so all non-responsive APIs trigger style updates\n         */\n        this.source = new BehaviorSubject(new MediaChange(true));\n        this.registry = new Map();\n        this.pendingRemoveListenerFns = [];\n        this._observable$ = this.source.asObservable();\n    }\n    /**\n     * Publish list of all current activations\n     * @return {?}\n     */\n    get activations() {\n        /** @type {?} */\n        const results = [];\n        this.registry.forEach((/**\n         * @param {?} mql\n         * @param {?} key\n         * @return {?}\n         */\n        (mql, key) => {\n            if (mql.matches) {\n                results.push(key);\n            }\n        }));\n        return results;\n    }\n    /**\n     * For the specified mediaQuery?\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n    isActive(mediaQuery) {\n        /** @type {?} */\n        const mql = this.registry.get(mediaQuery);\n        return !!mql ? mql.matches : this.registerQuery(mediaQuery).some((/**\n         * @param {?} m\n         * @return {?}\n         */\n        m => m.matches));\n    }\n    /**\n     * External observers can watch for all (or a specific) mql changes.\n     * Typically used by the MediaQueryAdaptor; optionally available to components\n     * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n     *\n     * Use deferred registration process to register breakpoints only on subscription\n     * This logic also enforces logic to register all mediaQueries BEFORE notify\n     * subscribers of notifications.\n     * @param {?=} mqList\n     * @param {?=} filterOthers\n     * @return {?}\n     */\n    observe(mqList, filterOthers = false) {\n        if (mqList && mqList.length) {\n            /** @type {?} */\n            const matchMedia$ = this._observable$.pipe(filter((/**\n             * @param {?} change\n             * @return {?}\n             */\n            (change) => !filterOthers ? true : (mqList.indexOf(change.mediaQuery) > -1))));\n            /** @type {?} */\n            const registration$ = new Observable((/**\n             * @param {?} observer\n             * @return {?}\n             */\n            (observer) => {\n                // tslint:disable-line:max-line-length\n                /** @type {?} */\n                const matches = this.registerQuery(mqList);\n                if (matches.length) {\n                    /** @type {?} */\n                    const lastChange = (/** @type {?} */ (matches.pop()));\n                    matches.forEach((/**\n                     * @param {?} e\n                     * @return {?}\n                     */\n                    (e) => {\n                        observer.next(e);\n                    }));\n                    this.source.next(lastChange); // last match is cached\n                }\n                observer.complete();\n            }));\n            return merge(registration$, matchMedia$);\n        }\n        return this._observable$;\n    }\n    /**\n     * Based on the BreakPointRegistry provider, register internal listeners for each unique\n     * mediaQuery. Each listener emits specific MediaChange data to observers\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n    registerQuery(mediaQuery) {\n        /** @type {?} */\n        const list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];\n        /** @type {?} */\n        const matches = [];\n        buildQueryCss(list, this._document);\n        list.forEach((/**\n         * @param {?} query\n         * @return {?}\n         */\n        (query) => {\n            /** @type {?} */\n            const onMQLEvent = (/**\n             * @param {?} e\n             * @return {?}\n             */\n            (e) => {\n                this._zone.run((/**\n                 * @return {?}\n                 */\n                () => this.source.next(new MediaChange(e.matches, query))));\n            });\n            /** @type {?} */\n            let mql = this.registry.get(query);\n            if (!mql) {\n                mql = this.buildMQL(query);\n                mql.addListener(onMQLEvent);\n                this.pendingRemoveListenerFns.push((/**\n                 * @return {?}\n                 */\n                () => (/** @type {?} */ (mql)).removeListener(onMQLEvent)));\n                this.registry.set(query, mql);\n            }\n            if (mql.matches) {\n                matches.push(new MediaChange(true, query));\n            }\n        }));\n        return matches;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        let fn;\n        while (fn = this.pendingRemoveListenerFns.pop()) {\n            fn();\n        }\n    }\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     * @protected\n     * @param {?} query\n     * @return {?}\n     */\n    buildMQL(query) {\n        return constructMql(query, isPlatformBrowser(this._platformId));\n    }\n}\n/** @nocollapse */ MatchMedia.ɵprov = ɵɵdefineInjectable({ factory: function MatchMedia_Factory() { return new MatchMedia(ɵɵinject(NgZone), ɵɵinject(PLATFORM_ID), ɵɵinject(DOCUMENT)); }, token: MatchMedia, providedIn: \"root\" });\nMatchMedia.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nMatchMedia.ctorParameters = () => [\n    { type: NgZone },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n * @type {?}\n */\nconst ALL_STYLES = {};\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param {?} mediaQueries\n * @param {?} _document\n * @return {?}\n */\nfunction buildQueryCss(mediaQueries, _document) {\n    /** @type {?} */\n    const list = mediaQueries.filter((/**\n     * @param {?} it\n     * @return {?}\n     */\n    it => !ALL_STYLES[it]));\n    if (list.length > 0) {\n        /** @type {?} */\n        const query = list.join(', ');\n        try {\n            /** @type {?} */\n            const styleEl = _document.createElement('style');\n            styleEl.setAttribute('type', 'text/css');\n            if (!((/** @type {?} */ (styleEl))).styleSheet) {\n                /** @type {?} */\n                const cssText = `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n`;\n                styleEl.appendChild(_document.createTextNode(cssText));\n            }\n            (/** @type {?} */ (_document.head)).appendChild(styleEl);\n            // Store in private global registry\n            list.forEach((/**\n             * @param {?} mq\n             * @return {?}\n             */\n            mq => ALL_STYLES[mq] = styleEl));\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n}\n/**\n * @param {?} query\n * @param {?} isBrowser\n * @return {?}\n */\nfunction constructMql(query, isBrowser) {\n    /** @type {?} */\n    const canListen = isBrowser && !!((/** @type {?} */ (window))).matchMedia('all').addListener;\n    return canListen ? ((/** @type {?} */ (window))).matchMedia(query) : (/** @type {?} */ ({\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: (/**\n         * @return {?}\n         */\n        () => {\n        }),\n        removeListener: (/**\n         * @return {?}\n         */\n        () => {\n        }),\n        onchange: null,\n        /**\n         * @return {?}\n         */\n        addEventListener() {\n        },\n        /**\n         * @return {?}\n         */\n        removeEventListener() {\n        },\n        /**\n         * @return {?}\n         */\n        dispatchEvent() {\n            return false;\n        }\n    }));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/match-media/mock/mock-match-media.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\nclass MockMatchMedia extends MatchMedia {\n    // Allow fallback to overlapping mediaQueries\n    /**\n     * @param {?} _zone\n     * @param {?} _platformId\n     * @param {?} _document\n     * @param {?} _breakpoints\n     */\n    constructor(_zone, _platformId, _document, _breakpoints) {\n        super(_zone, _platformId, _document);\n        this._breakpoints = _breakpoints;\n        this.autoRegisterQueries = true; // Used for testing BreakPoint registrations\n        // Used for testing BreakPoint registrations\n        this.useOverlaps = false; // Allow fallback to overlapping mediaQueries\n    }\n    /**\n     * Easy method to clear all listeners for all mediaQueries\n     * @return {?}\n     */\n    clearAll() {\n        this.registry.forEach((/**\n         * @param {?} mql\n         * @return {?}\n         */\n        (mql) => {\n            ((/** @type {?} */ (mql))).destroy();\n        }));\n        this.registry.clear();\n        this.useOverlaps = false;\n    }\n    /**\n     * Feature to support manual, simulated activation of a mediaQuery.\n     * @param {?} mediaQuery\n     * @param {?=} useOverlaps\n     * @return {?}\n     */\n    activate(mediaQuery, useOverlaps = false) {\n        useOverlaps = useOverlaps || this.useOverlaps;\n        mediaQuery = this._validateQuery(mediaQuery);\n        if (useOverlaps || !this.isActive(mediaQuery)) {\n            this._deactivateAll();\n            this._registerMediaQuery(mediaQuery);\n            this._activateWithOverlaps(mediaQuery, useOverlaps);\n        }\n        return this.hasActivated;\n    }\n    /**\n     * Converts an optional mediaQuery alias to a specific, valid mediaQuery\n     * @param {?} queryOrAlias\n     * @return {?}\n     */\n    _validateQuery(queryOrAlias) {\n        /** @type {?} */\n        const bp = this._breakpoints.findByAlias(queryOrAlias);\n        return (bp && bp.mediaQuery) || queryOrAlias;\n    }\n    /**\n     * Manually onMediaChange any overlapping mediaQueries to simulate\n     * similar functionality in the window.matchMedia()\n     * @private\n     * @param {?} mediaQuery\n     * @param {?} useOverlaps\n     * @return {?}\n     */\n    _activateWithOverlaps(mediaQuery, useOverlaps) {\n        if (useOverlaps) {\n            /** @type {?} */\n            const bp = this._breakpoints.findByQuery(mediaQuery);\n            /** @type {?} */\n            const alias = bp ? bp.alias : 'unknown';\n            // Simulate activation of overlapping lt-<XXX> ranges\n            switch (alias) {\n                case 'lg':\n                    this._activateByAlias(['lt-xl']);\n                    break;\n                case 'md':\n                    this._activateByAlias(['lt-xl', 'lt-lg']);\n                    break;\n                case 'sm':\n                    this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md']);\n                    break;\n                case 'xs':\n                    this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md', 'lt-sm']);\n                    break;\n            }\n            // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges\n            switch (alias) {\n                case 'xl':\n                    this._activateByAlias(['gt-lg', 'gt-md', 'gt-sm', 'gt-xs']);\n                    break;\n                case 'lg':\n                    this._activateByAlias(['gt-md', 'gt-sm', 'gt-xs']);\n                    break;\n                case 'md':\n                    this._activateByAlias(['gt-sm', 'gt-xs']);\n                    break;\n                case 'sm':\n                    this._activateByAlias(['gt-xs']);\n                    break;\n            }\n        }\n        // Activate last since the responsiveActivation is watching *this* mediaQuery\n        return this._activateByQuery(mediaQuery);\n    }\n    /**\n     *\n     * @private\n     * @param {?} aliases\n     * @return {?}\n     */\n    _activateByAlias(aliases) {\n        /** @type {?} */\n        const activate = (/**\n         * @param {?} alias\n         * @return {?}\n         */\n        (alias) => {\n            /** @type {?} */\n            const bp = this._breakpoints.findByAlias(alias);\n            this._activateByQuery(bp ? bp.mediaQuery : alias);\n        });\n        aliases.forEach(activate);\n    }\n    /**\n     *\n     * @private\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n    _activateByQuery(mediaQuery) {\n        if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n            this._registerMediaQuery(mediaQuery);\n        }\n        /** @type {?} */\n        const mql = (/** @type {?} */ (this.registry.get(mediaQuery)));\n        if (mql && !this.isActive(mediaQuery)) {\n            this.registry.set(mediaQuery, mql.activate());\n        }\n        return this.hasActivated;\n    }\n    /**\n     * Deactivate all current MQLs and reset the buffer\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @return {THIS}\n     */\n    _deactivateAll() {\n        (/** @type {?} */ (this)).registry.forEach((/**\n         * @param {?} it\n         * @return {?}\n         */\n        (it) => {\n            ((/** @type {?} */ (it))).deactivate();\n        }));\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Insure the mediaQuery is registered with MatchMedia\n     * @private\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n    _registerMediaQuery(mediaQuery) {\n        if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n            this.registerQuery(mediaQuery);\n        }\n    }\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     * @protected\n     * @param {?} query\n     * @return {?}\n     */\n    buildMQL(query) {\n        return new MockMediaQueryList(query);\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    get hasActivated() {\n        return this.activations.length > 0;\n    }\n}\nMockMatchMedia.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nMockMatchMedia.ctorParameters = () => [\n    { type: NgZone },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: BreakPointRegistry }\n];\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nclass MockMediaQueryList {\n    /**\n     * @param {?} _mediaQuery\n     */\n    constructor(_mediaQuery) {\n        this._mediaQuery = _mediaQuery;\n        this._isActive = false;\n        this._listeners = [];\n        this.onchange = null;\n    }\n    /**\n     * @return {?}\n     */\n    get matches() {\n        return this._isActive;\n    }\n    /**\n     * @return {?}\n     */\n    get media() {\n        return this._mediaQuery;\n    }\n    /**\n     * Destroy the current list by deactivating the\n     * listeners and clearing the internal list\n     * @return {?}\n     */\n    destroy() {\n        this.deactivate();\n        this._listeners = [];\n    }\n    /**\n     * Notify all listeners that 'matches === TRUE'\n     * @return {?}\n     */\n    activate() {\n        if (!this._isActive) {\n            this._isActive = true;\n            this._listeners.forEach((/**\n             * @param {?} callback\n             * @return {?}\n             */\n            (callback) => {\n                /** @type {?} */\n                const cb = (/** @type {?} */ (callback));\n                cb.call(this, (/** @type {?} */ ({ matches: this.matches, media: this.media })));\n            }));\n        }\n        return this;\n    }\n    /**\n     * Notify all listeners that 'matches === false'\n     * @return {?}\n     */\n    deactivate() {\n        if (this._isActive) {\n            this._isActive = false;\n            this._listeners.forEach((/**\n             * @param {?} callback\n             * @return {?}\n             */\n            (callback) => {\n                /** @type {?} */\n                const cb = (/** @type {?} */ (callback));\n                cb.call(this, (/** @type {?} */ ({ matches: this.matches, media: this.media })));\n            }));\n        }\n        return this;\n    }\n    /**\n     * Add a listener to our internal list to activate later\n     * @param {?} listener\n     * @return {?}\n     */\n    addListener(listener) {\n        if (this._listeners.indexOf(listener) === -1) {\n            this._listeners.push(listener);\n        }\n        if (this._isActive) {\n            /** @type {?} */\n            const cb = (/** @type {?} */ (listener));\n            cb.call(this, (/** @type {?} */ ({ matches: this.matches, media: this.media })));\n        }\n    }\n    /**\n     * Don't need to remove listeners in the testing environment\n     * @param {?} _\n     * @return {?}\n     */\n    removeListener(_) {\n    }\n    /**\n     * @param {?} _\n     * @param {?} __\n     * @param {?=} ___\n     * @return {?}\n     */\n    addEventListener(_, __, ___) {\n    }\n    /**\n     * @param {?} _\n     * @param {?} __\n     * @param {?=} ___\n     * @return {?}\n     */\n    removeEventListener(_, __, ___) {\n    }\n    /**\n     * @param {?} _\n     * @return {?}\n     */\n    dispatchEvent(_) {\n        return false;\n    }\n}\n/**\n * Pre-configured provider for MockMatchMedia\n * @type {?}\n */\nconst MockMatchMediaProvider = {\n    // tslint:disable-line:variable-name\n    provide: MatchMedia,\n    useClass: MockMatchMedia\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/match-media/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-marshaller/print-hook.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst PRINT = 'print';\n/** @type {?} */\nconst BREAKPOINT_PRINT = {\n    alias: PRINT,\n    mediaQuery: PRINT,\n    priority: 1000\n};\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\nclass PrintHook {\n    /**\n     * @param {?} breakpoints\n     * @param {?} layoutConfig\n     * @param {?} _document\n     */\n    constructor(breakpoints, layoutConfig, _document) {\n        this.breakpoints = breakpoints;\n        this.layoutConfig = layoutConfig;\n        this._document = _document;\n        // registeredBeforeAfterPrintHooks tracks if we registered the `beforeprint`\n        //  and `afterprint` event listeners.\n        this.registeredBeforeAfterPrintHooks = false;\n        // isPrintingBeforeAfterEvent is used to track if we are printing from within\n        // a `beforeprint` event handler. This prevents the typicall `stopPrinting`\n        // form `interceptEvents` so that printing is not stopped while the dialog\n        // is still open. This is an extension of the `isPrinting` property on\n        // browsers which support `beforeprint` and `afterprint` events.\n        this.isPrintingBeforeAfterEvent = false;\n        this.beforePrintEventListeners = [];\n        this.afterPrintEventListeners = [];\n        /**\n         * Is this service currently in Print-mode ?\n         */\n        this.isPrinting = false;\n        this.queue = new PrintQueue();\n        this.deactivations = [];\n    }\n    /**\n     * Add 'print' mediaQuery: to listen for matchMedia activations\n     * @param {?} queries\n     * @return {?}\n     */\n    withPrintQuery(queries) {\n        return [...queries, PRINT];\n    }\n    /**\n     * Is the MediaChange event for any 'print' \\@media\n     * @param {?} e\n     * @return {?}\n     */\n    isPrintEvent(e) {\n        return e.mediaQuery.startsWith(PRINT);\n    }\n    /**\n     * What is the desired mqAlias to use while printing?\n     * @return {?}\n     */\n    get printAlias() {\n        return this.layoutConfig.printWithBreakpoints || [];\n    }\n    /**\n     * Lookup breakpoints associated with print aliases.\n     * @return {?}\n     */\n    get printBreakPoints() {\n        return (/** @type {?} */ (this.printAlias\n            .map((/**\n         * @param {?} alias\n         * @return {?}\n         */\n        alias => this.breakpoints.findByAlias(alias)))\n            .filter((/**\n         * @param {?} bp\n         * @return {?}\n         */\n        bp => bp !== null))));\n    }\n    /**\n     * Lookup breakpoint associated with mediaQuery\n     * @param {?} __0\n     * @return {?}\n     */\n    getEventBreakpoints({ mediaQuery }) {\n        /** @type {?} */\n        const bp = this.breakpoints.findByQuery(mediaQuery);\n        /** @type {?} */\n        const list = bp ? [...this.printBreakPoints, bp] : this.printBreakPoints;\n        return list.sort(sortDescendingPriority);\n    }\n    /**\n     * Update event with printAlias mediaQuery information\n     * @param {?} event\n     * @return {?}\n     */\n    updateEvent(event) {\n        /** @type {?} */\n        let bp = this.breakpoints.findByQuery(event.mediaQuery);\n        if (this.isPrintEvent(event)) {\n            // Reset from 'print' to first (highest priority) print breakpoint\n            bp = this.getEventBreakpoints(event)[0];\n            event.mediaQuery = bp ? bp.mediaQuery : '';\n        }\n        return mergeAlias(event, bp);\n    }\n    // registerBeforeAfterPrintHooks registers a `beforeprint` event hook so we can\n    // trigger print styles synchronously and apply proper layout styles.\n    // It is a noop if the hooks have already been registered or if the document's\n    // `defaultView` is not available.\n    /**\n     * @private\n     * @param {?} target\n     * @return {?}\n     */\n    registerBeforeAfterPrintHooks(target) {\n        // `defaultView` may be null when rendering on the server or in other contexts.\n        if (!this._document.defaultView || this.registeredBeforeAfterPrintHooks) {\n            return;\n        }\n        this.registeredBeforeAfterPrintHooks = true;\n        /** @type {?} */\n        const beforePrintListener = (/**\n         * @return {?}\n         */\n        () => {\n            // If we aren't already printing, start printing and update the styles as\n            // if there was a regular print `MediaChange`(from matchMedia).\n            if (!this.isPrinting) {\n                this.isPrintingBeforeAfterEvent = true;\n                this.startPrinting(target, this.getEventBreakpoints(new MediaChange(true, PRINT)));\n                target.updateStyles();\n            }\n        });\n        /** @type {?} */\n        const afterPrintListener = (/**\n         * @return {?}\n         */\n        () => {\n            // If we aren't already printing, start printing and update the styles as\n            // if there was a regular print `MediaChange`(from matchMedia).\n            this.isPrintingBeforeAfterEvent = false;\n            if (this.isPrinting) {\n                this.stopPrinting(target);\n                target.updateStyles();\n            }\n        });\n        // Could we have teardown logic to remove if there are no print listeners being used?\n        this._document.defaultView.addEventListener('beforeprint', beforePrintListener);\n        this._document.defaultView.addEventListener('afterprint', afterPrintListener);\n        this.beforePrintEventListeners.push(beforePrintListener);\n        this.afterPrintEventListeners.push(afterPrintListener);\n    }\n    /**\n     * Prepare RxJS filter operator with partial application\n     * @param {?} target\n     * @return {?} pipeable filter predicate\n     */\n    interceptEvents(target) {\n        this.registerBeforeAfterPrintHooks(target);\n        return (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this.isPrintEvent(event)) {\n                if (event.matches && !this.isPrinting) {\n                    this.startPrinting(target, this.getEventBreakpoints(event));\n                    target.updateStyles();\n                }\n                else if (!event.matches && this.isPrinting && !this.isPrintingBeforeAfterEvent) {\n                    this.stopPrinting(target);\n                    target.updateStyles();\n                }\n            }\n            else {\n                this.collectActivations(event);\n            }\n        });\n    }\n    /**\n     * Stop mediaChange event propagation in event streams\n     * @return {?}\n     */\n    blockPropagation() {\n        return (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            return !(this.isPrinting || this.isPrintEvent(event));\n        });\n    }\n    /**\n     * Save current activateBreakpoints (for later restore)\n     * and substitute only the printAlias breakpoint\n     * @protected\n     * @param {?} target\n     * @param {?} bpList\n     * @return {?}\n     */\n    startPrinting(target, bpList) {\n        this.isPrinting = true;\n        target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);\n    }\n    /**\n     * For any print de-activations, reset the entire print queue\n     * @protected\n     * @param {?} target\n     * @return {?}\n     */\n    stopPrinting(target) {\n        target.activatedBreakpoints = this.deactivations;\n        this.deactivations = [];\n        this.queue.clear();\n        this.isPrinting = false;\n    }\n    /**\n     * To restore pre-Print Activations, we must capture the proper\n     * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n     * is supported; so 'print' mediaQuery activations are used as a fallback\n     * in browsers without `beforeprint` support.\n     *\n     * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n     *\n     * Let's capture all de-activations using the following logic:\n     *\n     *  When not printing:\n     *    - clear cache when activating non-print breakpoint\n     *    - update cache (and sort) when deactivating\n     *\n     *  When printing:\n     *    - sort and save when starting print\n     *    - restore as activatedTargets and clear when stop printing\n     * @param {?} event\n     * @return {?}\n     */\n    collectActivations(event) {\n        if (!this.isPrinting || this.isPrintingBeforeAfterEvent) {\n            if (!event.matches) {\n                /** @type {?} */\n                const bp = this.breakpoints.findByQuery(event.mediaQuery);\n                if (bp) { // Deactivating a breakpoint\n                    this.deactivations.push(bp);\n                    this.deactivations.sort(sortDescendingPriority);\n                }\n            }\n            else if (!this.isPrintingBeforeAfterEvent) {\n                // Only clear deactivations if we aren't printing from a `beforeprint` event.\n                // Otherwise this will clear before `stopPrinting()` is called to restore\n                // the pre-Print Activations.\n                this.deactivations = [];\n            }\n        }\n    }\n    /**\n     * Teardown logic for the service.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._document.defaultView) {\n            this.beforePrintEventListeners.forEach((/**\n             * @param {?} l\n             * @return {?}\n             */\n            l => this._document.defaultView.removeEventListener('beforeprint', l)));\n            this.afterPrintEventListeners.forEach((/**\n             * @param {?} l\n             * @return {?}\n             */\n            l => this._document.defaultView.removeEventListener('afterprint', l)));\n        }\n    }\n}\n/** @nocollapse */ PrintHook.ɵprov = ɵɵdefineInjectable({ factory: function PrintHook_Factory() { return new PrintHook(ɵɵinject(BreakPointRegistry), ɵɵinject(LAYOUT_CONFIG), ɵɵinject(DOCUMENT)); }, token: PrintHook, providedIn: \"root\" });\nPrintHook.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nPrintHook.ctorParameters = () => [\n    { type: BreakPointRegistry },\n    { type: undefined, decorators: [{ type: Inject, args: [LAYOUT_CONFIG,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n// ************************************************************************\n// Internal Utility class 'PrintQueue'\n// ************************************************************************\n/**\n * Utility class to manage print breakpoints + activatedBreakpoints\n * with correct sorting WHILE printing\n */\nclass PrintQueue {\n    constructor() {\n        /**\n         * Sorted queue with prioritized print breakpoints\n         */\n        this.printBreakpoints = [];\n    }\n    /**\n     * @param {?} bpList\n     * @return {?}\n     */\n    addPrintBreakpoints(bpList) {\n        bpList.push(BREAKPOINT_PRINT);\n        bpList.sort(sortDescendingPriority);\n        bpList.forEach((/**\n         * @param {?} bp\n         * @return {?}\n         */\n        bp => this.addBreakpoint(bp)));\n        return this.printBreakpoints;\n    }\n    /**\n     * Add Print breakpoint to queue\n     * @param {?} bp\n     * @return {?}\n     */\n    addBreakpoint(bp) {\n        if (!!bp) {\n            /** @type {?} */\n            const bpInList = this.printBreakpoints.find((/**\n             * @param {?} it\n             * @return {?}\n             */\n            it => it.mediaQuery === bp.mediaQuery));\n            if (bpInList === undefined) {\n                // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,\n                // register as highest priority in the queue\n                this.printBreakpoints = isPrintBreakPoint(bp) ? [bp, ...this.printBreakpoints]\n                    : [...this.printBreakpoints, bp];\n            }\n        }\n    }\n    /**\n     * Restore original activated breakpoints and clear internal caches\n     * @return {?}\n     */\n    clear() {\n        this.printBreakpoints = [];\n    }\n}\n// ************************************************************************\n// Internal Utility methods\n// ************************************************************************\n/**\n * Only support intercept queueing if the Breakpoint is a print \\@media query\n * @param {?} bp\n * @return {?}\n */\nfunction isPrintBreakPoint(bp) {\n    return bp ? bp.mediaQuery.startsWith(PRINT) : false;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/utils/array.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Wraps the provided value in an array, unless the provided value is an array.\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-observer/media-observer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n * if a mediaQuery is currently activated.\n *\n * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n * in 1 event notification. The reported activations will be sorted in descending priority order.\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * Note: Developers should note that only mediaChange activations (not de-activations)\n *       are announced by the MediaObserver.\n *\n * \\@usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '\\@angular/flex-layout';\n *\n * \\@Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const media$ = mediaObserver.asObservable().pipe(\n *        filter((changes: MediaChange[]) => true)   // silly noop filter\n *      );\n *\n *      media$.subscribe((changes: MediaChange[]) => {\n *        let status = '';\n *        changes.forEach( change => {\n *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n *        });\n *        this.status = status;\n *     });\n *\n *    }\n *  }\n */\nclass MediaObserver {\n    /**\n     * @param {?} breakpoints\n     * @param {?} matchMedia\n     * @param {?} hook\n     */\n    constructor(breakpoints, matchMedia, hook) {\n        this.breakpoints = breakpoints;\n        this.matchMedia = matchMedia;\n        this.hook = hook;\n        /**\n         * Filter MediaChange notifications for overlapping breakpoints\n         */\n        this.filterOverlaps = false;\n        this.destroyed$ = new Subject();\n        this._media$ = this.watchActivations();\n        this.media$ = this._media$.pipe(filter((/**\n         * @param {?} changes\n         * @return {?}\n         */\n        (changes) => changes.length > 0)), map((/**\n         * @param {?} changes\n         * @return {?}\n         */\n        (changes) => changes[0])));\n    }\n    /**\n     * Completes the active subject, signalling to all complete for all\n     * MediaObserver subscribers\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n    // ************************************************\n    // Public Methods\n    // ************************************************\n    /**\n     * Observe changes to current activation 'list'\n     * @return {?}\n     */\n    asObservable() {\n        return this._media$;\n    }\n    /**\n     * Allow programmatic query to determine if one or more media query/alias match\n     * the current viewport size.\n     * @param {?} value One or more media queries (or aliases) to check.\n     * @return {?} Whether any of the media queries match.\n     */\n    isActive(value) {\n        /** @type {?} */\n        const aliases = splitQueries(coerceArray(value));\n        return aliases.some((/**\n         * @param {?} alias\n         * @return {?}\n         */\n        alias => {\n            /** @type {?} */\n            const query = toMediaQuery(alias, this.breakpoints);\n            return query !== null && this.matchMedia.isActive(query);\n        }));\n    }\n    // ************************************************\n    // Internal Methods\n    // ************************************************\n    /**\n     * Register all the mediaQueries registered in the BreakPointRegistry\n     * This is needed so subscribers can be auto-notified of all standard, registered\n     * mediaQuery activations\n     * @private\n     * @return {?}\n     */\n    watchActivations() {\n        /** @type {?} */\n        const queries = this.breakpoints.items.map((/**\n         * @param {?} bp\n         * @return {?}\n         */\n        bp => bp.mediaQuery));\n        return this.buildObservable(queries);\n    }\n    /**\n     * Only pass/announce activations (not de-activations)\n     *\n     * Since multiple-mediaQueries can be activation in a cycle,\n     * gather all current activations into a single list of changes to observers\n     *\n     * Inject associated (if any) alias information into the MediaChange event\n     * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n     * - Exclude print activations that do not have an associated mediaQuery\n     *\n     * NOTE: the raw MediaChange events [from MatchMedia] do not\n     *       contain important alias information; as such this info\n     *       must be injected into the MediaChange\n     * @private\n     * @param {?} mqList\n     * @return {?}\n     */\n    buildObservable(mqList) {\n        /** @type {?} */\n        const hasChanges = (/**\n         * @param {?} changes\n         * @return {?}\n         */\n        (changes) => {\n            /** @type {?} */\n            const isValidQuery = (/**\n             * @param {?} change\n             * @return {?}\n             */\n            (change) => (change.mediaQuery.length > 0));\n            return (changes.filter(isValidQuery).length > 0);\n        });\n        /** @type {?} */\n        const excludeOverlaps = (/**\n         * @param {?} changes\n         * @return {?}\n         */\n        (changes) => {\n            return !this.filterOverlaps ? changes : changes.filter((/**\n             * @param {?} change\n             * @return {?}\n             */\n            change => {\n                /** @type {?} */\n                const bp = this.breakpoints.findByQuery(change.mediaQuery);\n                return !bp ? true : !bp.overlapping;\n            }));\n        });\n        /**\n         */\n        return this.matchMedia\n            .observe(this.hook.withPrintQuery(mqList))\n            .pipe(filter((/**\n         * @param {?} change\n         * @return {?}\n         */\n        (change) => change.matches)), debounceTime(0, asapScheduler), switchMap((/**\n         * @param {?} _\n         * @return {?}\n         */\n        _ => of(this.findAllActivations()))), map(excludeOverlaps), filter(hasChanges), takeUntil(this.destroyed$));\n    }\n    /**\n     * Find all current activations and prepare single list of activations\n     * sorted by descending priority.\n     * @private\n     * @return {?}\n     */\n    findAllActivations() {\n        /** @type {?} */\n        const mergeMQAlias = (/**\n         * @param {?} change\n         * @return {?}\n         */\n        (change) => {\n            /** @type {?} */\n            let bp = this.breakpoints.findByQuery(change.mediaQuery);\n            return mergeAlias(change, bp);\n        });\n        /** @type {?} */\n        const replaceWithPrintAlias = (/**\n         * @param {?} change\n         * @return {?}\n         */\n        (change) => {\n            return this.hook.isPrintEvent(change) ? this.hook.updateEvent(change) : change;\n        });\n        return this.matchMedia\n            .activations\n            .map((/**\n         * @param {?} query\n         * @return {?}\n         */\n        query => new MediaChange(true, query)))\n            .map(replaceWithPrintAlias)\n            .map(mergeMQAlias)\n            .sort(sortDescendingPriority);\n    }\n}\n/** @nocollapse */ MediaObserver.ɵprov = ɵɵdefineInjectable({ factory: function MediaObserver_Factory() { return new MediaObserver(ɵɵinject(BreakPointRegistry), ɵɵinject(MatchMedia), ɵɵinject(PrintHook)); }, token: MediaObserver, providedIn: \"root\" });\nMediaObserver.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nMediaObserver.ctorParameters = () => [\n    { type: BreakPointRegistry },\n    { type: MatchMedia },\n    { type: PrintHook }\n];\n/**\n * Find associated breakpoint (if any)\n * @param {?} query\n * @param {?} locator\n * @return {?}\n */\nfunction toMediaQuery(query, locator) {\n    /** @type {?} */\n    const bp = locator.findByAlias(query) || locator.findByQuery(query);\n    return bp ? bp.mediaQuery : null;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\nfunction splitQueries(queries) {\n    return queries.map((/**\n     * @param {?} query\n     * @return {?}\n     */\n    (query) => query.split(',')))\n        .reduce((/**\n     * @param {?} a1\n     * @param {?} a2\n     * @return {?}\n     */\n    (a1, a2) => a1.concat(a2)))\n        .map((/**\n     * @param {?} query\n     * @return {?}\n     */\n    query => query.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-observer/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-trigger/media-trigger.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class\n */\nclass MediaTrigger {\n    /**\n     * @param {?} breakpoints\n     * @param {?} matchMedia\n     * @param {?} layoutConfig\n     * @param {?} _platformId\n     * @param {?} _document\n     */\n    constructor(breakpoints, matchMedia, layoutConfig, _platformId, _document) {\n        this.breakpoints = breakpoints;\n        this.matchMedia = matchMedia;\n        this.layoutConfig = layoutConfig;\n        this._platformId = _platformId;\n        this._document = _document;\n        this.hasCachedRegistryMatches = false;\n        this.originalActivations = [];\n        this.originalRegistry = new Map();\n    }\n    /**\n     * Manually activate range of breakpoints\n     * @param {?} list array of mediaQuery or alias strings\n     * @return {?}\n     */\n    activate(list) {\n        list = list.map((/**\n         * @param {?} it\n         * @return {?}\n         */\n        it => it.trim())); // trim queries\n        this.saveActivations();\n        this.deactivateAll();\n        this.setActivations(list);\n        this.prepareAutoRestore();\n    }\n    /**\n     * Restore original, 'real' breakpoints and emit events\n     * to trigger stream notification\n     * @return {?}\n     */\n    restore() {\n        if (this.hasCachedRegistryMatches) {\n            /** @type {?} */\n            const extractQuery = (/**\n             * @param {?} change\n             * @return {?}\n             */\n            (change) => change.mediaQuery);\n            /** @type {?} */\n            const list = this.originalActivations.map(extractQuery);\n            try {\n                this.deactivateAll();\n                this.restoreRegistryMatches();\n                this.setActivations(list);\n            }\n            finally {\n                this.originalActivations = [];\n                if (this.resizeSubscription) {\n                    this.resizeSubscription.unsubscribe();\n                }\n            }\n        }\n    }\n    // ************************************************\n    // Internal Methods\n    // ************************************************\n    /**\n     * Whenever window resizes, immediately auto-restore original\n     * activations (if we are simulating activations)\n     * @private\n     * @return {?}\n     */\n    prepareAutoRestore() {\n        /** @type {?} */\n        const isBrowser = isPlatformBrowser(this._platformId) && this._document;\n        /** @type {?} */\n        const enableAutoRestore = isBrowser && this.layoutConfig.mediaTriggerAutoRestore;\n        if (enableAutoRestore) {\n            /** @type {?} */\n            const resize$ = fromEvent(window, 'resize').pipe(take(1));\n            this.resizeSubscription = resize$.subscribe(this.restore.bind(this));\n        }\n    }\n    /**\n     * Notify all matchMedia subscribers of de-activations\n     *\n     * Note: we must force 'matches' updates for\n     *       future matchMedia::activation lookups\n     * @private\n     * @return {?}\n     */\n    deactivateAll() {\n        /** @type {?} */\n        const list = this.currentActivations;\n        this.forceRegistryMatches(list, false);\n        this.simulateMediaChanges(list, false);\n    }\n    /**\n     * Cache current activations as sorted, prioritized list of MediaChanges\n     * @private\n     * @return {?}\n     */\n    saveActivations() {\n        if (!this.hasCachedRegistryMatches) {\n            /** @type {?} */\n            const toMediaChange = (/**\n             * @param {?} query\n             * @return {?}\n             */\n            (query) => new MediaChange(true, query));\n            /** @type {?} */\n            const mergeMQAlias = (/**\n             * @param {?} change\n             * @return {?}\n             */\n            (change) => {\n                /** @type {?} */\n                const bp = this.breakpoints.findByQuery(change.mediaQuery);\n                return mergeAlias(change, bp);\n            });\n            this.originalActivations = this.currentActivations\n                .map(toMediaChange)\n                .map(mergeMQAlias)\n                .sort(sortDescendingPriority);\n            this.cacheRegistryMatches();\n        }\n    }\n    /**\n     * Force set manual activations for specified mediaQuery list\n     * @private\n     * @param {?} list\n     * @return {?}\n     */\n    setActivations(list) {\n        if (!!this.originalRegistry) {\n            this.forceRegistryMatches(list, true);\n        }\n        this.simulateMediaChanges(list);\n    }\n    /**\n     * For specified mediaQuery list manually simulate activations or deactivations\n     * @private\n     * @param {?} queries\n     * @param {?=} matches\n     * @return {?}\n     */\n    simulateMediaChanges(queries, matches = true) {\n        /** @type {?} */\n        const toMediaQuery = (/**\n         * @param {?} query\n         * @return {?}\n         */\n        (query) => {\n            /** @type {?} */\n            const locator = this.breakpoints;\n            /** @type {?} */\n            const bp = locator.findByAlias(query) || locator.findByQuery(query);\n            return bp ? bp.mediaQuery : query;\n        });\n        /** @type {?} */\n        const emitChangeEvent = (/**\n         * @param {?} query\n         * @return {?}\n         */\n        (query) => this.emitChangeEvent(matches, query));\n        queries.map(toMediaQuery).forEach(emitChangeEvent);\n    }\n    /**\n     * Replace current registry with simulated registry...\n     * Note: this is required since MediaQueryList::matches is 'readOnly'\n     * @private\n     * @param {?} queries\n     * @param {?} matches\n     * @return {?}\n     */\n    forceRegistryMatches(queries, matches) {\n        /** @type {?} */\n        const registry = new Map();\n        queries.forEach((/**\n         * @param {?} query\n         * @return {?}\n         */\n        query => {\n            registry.set(query, (/** @type {?} */ ({ matches })));\n        }));\n        this.matchMedia.registry = registry;\n    }\n    /**\n     * Save current MatchMedia::registry items.\n     * @private\n     * @return {?}\n     */\n    cacheRegistryMatches() {\n        /** @type {?} */\n        const target = this.originalRegistry;\n        target.clear();\n        this.matchMedia.registry.forEach((/**\n         * @param {?} value\n         * @param {?} key\n         * @return {?}\n         */\n        (value, key) => {\n            target.set(key, value);\n        }));\n        this.hasCachedRegistryMatches = true;\n    }\n    /**\n     * Restore original, 'true' registry\n     * @private\n     * @return {?}\n     */\n    restoreRegistryMatches() {\n        /** @type {?} */\n        const target = this.matchMedia.registry;\n        target.clear();\n        this.originalRegistry.forEach((/**\n         * @param {?} value\n         * @param {?} key\n         * @return {?}\n         */\n        (value, key) => {\n            target.set(key, value);\n        }));\n        this.originalRegistry.clear();\n        this.hasCachedRegistryMatches = false;\n    }\n    /**\n     * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n     * @private\n     * @param {?} matches\n     * @param {?} query\n     * @return {?}\n     */\n    emitChangeEvent(matches, query) {\n        this.matchMedia.source.next(new MediaChange(matches, query));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    get currentActivations() {\n        return this.matchMedia.activations;\n    }\n}\n/** @nocollapse */ MediaTrigger.ɵprov = ɵɵdefineInjectable({ factory: function MediaTrigger_Factory() { return new MediaTrigger(ɵɵinject(BreakPointRegistry), ɵɵinject(MatchMedia), ɵɵinject(LAYOUT_CONFIG), ɵɵinject(PLATFORM_ID), ɵɵinject(DOCUMENT)); }, token: MediaTrigger, providedIn: \"root\" });\nMediaTrigger.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nMediaTrigger.ctorParameters = () => [\n    { type: BreakPointRegistry },\n    { type: MatchMedia },\n    { type: undefined, decorators: [{ type: Inject, args: [LAYOUT_CONFIG,] }] },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-trigger/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/utils/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: utils/auto-prefixer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Applies CSS prefixes to appropriate style keys.\n *\n * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.\n *    {\n *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10\n *      display: flex;             NEW, Spec - Firefox, Chrome, Opera\n *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7\n *      // display: -ms-flexbox;   TWEENER - IE 10\n *      // display: -moz-flexbox;  OLD - Firefox\n *    }\n * @param {?} target\n * @return {?}\n */\nfunction applyCssPrefixes(target) {\n    for (let key in target) {\n        /** @type {?} */\n        let value = target[key] || '';\n        switch (key) {\n            case 'display':\n                if (value === 'flex') {\n                    target['display'] = [\n                        '-webkit-flex',\n                        'flex'\n                    ];\n                }\n                else if (value === 'inline-flex') {\n                    target['display'] = [\n                        '-webkit-inline-flex',\n                        'inline-flex'\n                    ];\n                }\n                else {\n                    target['display'] = value;\n                }\n                break;\n            case 'align-items':\n            case 'align-self':\n            case 'align-content':\n            case 'flex':\n            case 'flex-basis':\n            case 'flex-flow':\n            case 'flex-grow':\n            case 'flex-shrink':\n            case 'flex-wrap':\n            case 'justify-content':\n                target['-webkit-' + key] = value;\n                break;\n            case 'flex-direction':\n                value = value || 'row';\n                target['-webkit-flex-direction'] = value;\n                target['flex-direction'] = value;\n                break;\n            case 'order':\n                target['order'] = target['-webkit-' + key] = isNaN(+value) ? '0' : value;\n                break;\n        }\n    }\n    return target;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/style-utils/style-utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass StyleUtils {\n    /**\n     * @param {?} _serverStylesheet\n     * @param {?} _serverModuleLoaded\n     * @param {?} _platformId\n     * @param {?} layoutConfig\n     */\n    constructor(_serverStylesheet, _serverModuleLoaded, _platformId, layoutConfig) {\n        this._serverStylesheet = _serverStylesheet;\n        this._serverModuleLoaded = _serverModuleLoaded;\n        this._platformId = _platformId;\n        this.layoutConfig = layoutConfig;\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive element\n     * @param {?} element\n     * @param {?} style\n     * @param {?=} value\n     * @return {?}\n     */\n    applyStyleToElement(element, style, value = null) {\n        /** @type {?} */\n        let styles = {};\n        if (typeof style === 'string') {\n            styles[style] = value;\n            style = styles;\n        }\n        styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n        this._applyMultiValueStyleToElement(styles, element);\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive's element\n     * @param {?} style\n     * @param {?=} elements\n     * @return {?}\n     */\n    applyStyleToElements(style, elements = []) {\n        /** @type {?} */\n        const styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n        elements.forEach((/**\n         * @param {?} el\n         * @return {?}\n         */\n        el => {\n            this._applyMultiValueStyleToElement(styles, el);\n        }));\n    }\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction)\n     *\n     * Check inline style first then check computed (stylesheet) style\n     * @param {?} target\n     * @return {?}\n     */\n    getFlowDirection(target) {\n        /** @type {?} */\n        const query = 'flex-direction';\n        /** @type {?} */\n        let value = this.lookupStyle(target, query);\n        /** @type {?} */\n        const hasInlineValue = this.lookupInlineStyle(target, query) ||\n            (isPlatformServer(this._platformId) && this._serverModuleLoaded) ? value : '';\n        return [value || 'row', hasInlineValue];\n    }\n    /**\n     * @param {?} target\n     * @return {?}\n     */\n    hasWrap(target) {\n        /** @type {?} */\n        const query = 'flex-wrap';\n        return this.lookupStyle(target, query) === 'wrap';\n    }\n    /**\n     * Find the DOM element's raw attribute value (if any)\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    lookupAttributeValue(element, attribute) {\n        return element.getAttribute(attribute) || '';\n    }\n    /**\n     * Find the DOM element's inline style value (if any)\n     * @param {?} element\n     * @param {?} styleName\n     * @return {?}\n     */\n    lookupInlineStyle(element, styleName) {\n        return isPlatformBrowser(this._platformId) ?\n            element.style.getPropertyValue(styleName) : this._getServerStyle(element, styleName);\n    }\n    /**\n     * Determine the inline or inherited CSS style\n     * NOTE: platform-server has no implementation for getComputedStyle\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?=} inlineOnly\n     * @return {?}\n     */\n    lookupStyle(element, styleName, inlineOnly = false) {\n        /** @type {?} */\n        let value = '';\n        if (element) {\n            /** @type {?} */\n            let immediateValue = value = this.lookupInlineStyle(element, styleName);\n            if (!immediateValue) {\n                if (isPlatformBrowser(this._platformId)) {\n                    if (!inlineOnly) {\n                        value = getComputedStyle(element).getPropertyValue(styleName);\n                    }\n                }\n                else {\n                    if (this._serverModuleLoaded) {\n                        value = this._serverStylesheet.getStyleForElement(element, styleName);\n                    }\n                }\n            }\n        }\n        // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n        //       in which case getComputedStyle() should determine a valid value.\n        return value ? value.trim() : '';\n    }\n    /**\n     * Applies the styles to the element. The styles object map may contain an array of values\n     * Each value will be added as element style\n     * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n     * @private\n     * @param {?} styles\n     * @param {?} element\n     * @return {?}\n     */\n    _applyMultiValueStyleToElement(styles, element) {\n        Object.keys(styles).sort().forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            /** @type {?} */\n            const el = styles[key];\n            /** @type {?} */\n            const values = Array.isArray(el) ? el : [el];\n            values.sort();\n            for (let value of values) {\n                value = value ? value + '' : '';\n                if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n                    isPlatformBrowser(this._platformId) ?\n                        element.style.setProperty(key, value) : this._setServerStyle(element, key, value);\n                }\n                else {\n                    this._serverStylesheet.addStyleToElement(element, key, value);\n                }\n            }\n        }));\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    _setServerStyle(element, styleName, styleValue) {\n        styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n        /** @type {?} */\n        const styleMap = this._readStyleAttribute(element);\n        styleMap[styleName] = styleValue || '';\n        this._writeStyleAttribute(element, styleMap);\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @param {?} styleName\n     * @return {?}\n     */\n    _getServerStyle(element, styleName) {\n        /** @type {?} */\n        const styleMap = this._readStyleAttribute(element);\n        return styleMap[styleName] || '';\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _readStyleAttribute(element) {\n        /** @type {?} */\n        const styleMap = {};\n        /** @type {?} */\n        const styleAttribute = element.getAttribute('style');\n        if (styleAttribute) {\n            /** @type {?} */\n            const styleList = styleAttribute.split(/;+/g);\n            for (let i = 0; i < styleList.length; i++) {\n                /** @type {?} */\n                const style = styleList[i].trim();\n                if (style.length > 0) {\n                    /** @type {?} */\n                    const colonIndex = style.indexOf(':');\n                    if (colonIndex === -1) {\n                        throw new Error(`Invalid CSS style: ${style}`);\n                    }\n                    /** @type {?} */\n                    const name = style.substr(0, colonIndex).trim();\n                    styleMap[name] = style.substr(colonIndex + 1).trim();\n                }\n            }\n        }\n        return styleMap;\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @param {?} styleMap\n     * @return {?}\n     */\n    _writeStyleAttribute(element, styleMap) {\n        /** @type {?} */\n        let styleAttrValue = '';\n        for (const key in styleMap) {\n            /** @type {?} */\n            const newValue = styleMap[key];\n            if (newValue) {\n                styleAttrValue += key + ':' + styleMap[key] + ';';\n            }\n        }\n        element.setAttribute('style', styleAttrValue);\n    }\n}\n/** @nocollapse */ StyleUtils.ɵprov = ɵɵdefineInjectable({ factory: function StyleUtils_Factory() { return new StyleUtils(ɵɵinject(StylesheetMap), ɵɵinject(SERVER_TOKEN), ɵɵinject(PLATFORM_ID), ɵɵinject(LAYOUT_CONFIG)); }, token: StyleUtils, providedIn: \"root\" });\nStyleUtils.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nStyleUtils.ctorParameters = () => [\n    { type: StylesheetMap },\n    { type: Boolean, decorators: [{ type: Inject, args: [SERVER_TOKEN,] }] },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [LAYOUT_CONFIG,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/style-builder/style-builder.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A class that encapsulates CSS style generation for common directives\n * @abstract\n */\nclass StyleBuilder {\n    constructor() {\n        /**\n         * Whether to cache the generated output styles\n         */\n        this.shouldCache = true;\n    }\n    /**\n     * Run a side effect computation given the input string and the computed styles\n     * from the build task and the host configuration object\n     * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n     * @param {?} _input\n     * @param {?} _styles\n     * @param {?=} _parent\n     * @return {?}\n     */\n    sideEffect(_input, _styles, _parent) {\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/basis-validator/basis-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * The flex API permits 3 or 1 parts of the value:\n *    - `flex-grow flex-shrink flex-basis`, or\n *    - `flex-basis`\n * @param {?} basis\n * @param {?=} grow\n * @param {?=} shrink\n * @return {?}\n */\nfunction validateBasis(basis, grow = '1', shrink = '1') {\n    /** @type {?} */\n    let parts = [grow, shrink, basis];\n    /** @type {?} */\n    let j = basis.indexOf('calc');\n    if (j > 0) {\n        parts[2] = _validateCalcValue(basis.substring(j).trim());\n        /** @type {?} */\n        let matches = basis.substr(0, j).trim().split(' ');\n        if (matches.length == 2) {\n            parts[0] = matches[0];\n            parts[1] = matches[1];\n        }\n    }\n    else if (j == 0) {\n        parts[2] = _validateCalcValue(basis.trim());\n    }\n    else {\n        /** @type {?} */\n        let matches = basis.split(' ');\n        parts = (matches.length === 3) ? matches : [\n            grow, shrink, basis\n        ];\n    }\n    return parts;\n}\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n * @param {?} calc\n * @return {?}\n */\nfunction _validateCalcValue(calc) {\n    return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-marshaller/media-marshaller.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * MediaMarshaller - register responsive values from directives and\n *                   trigger them based on media query events\n */\nclass MediaMarshaller {\n    /**\n     * @param {?} matchMedia\n     * @param {?} breakpoints\n     * @param {?} hook\n     */\n    constructor(matchMedia, breakpoints, hook) {\n        this.matchMedia = matchMedia;\n        this.breakpoints = breakpoints;\n        this.hook = hook;\n        this.activatedBreakpoints = [];\n        this.elementMap = new Map();\n        this.elementKeyMap = new WeakMap();\n        this.watcherMap = new WeakMap(); // special triggers to update elements\n        // special triggers to update elements\n        this.updateMap = new WeakMap(); // callback functions to update styles\n        // callback functions to update styles\n        this.clearMap = new WeakMap(); // callback functions to clear styles\n        // callback functions to clear styles\n        this.subject = new Subject();\n        this.observeActivations();\n    }\n    /**\n     * @return {?}\n     */\n    get activatedAlias() {\n        return this.activatedBreakpoints[0] ? this.activatedBreakpoints[0].alias : '';\n    }\n    /**\n     * Update styles on breakpoint activates or deactivates\n     * @param {?} mc\n     * @return {?}\n     */\n    onMediaChange(mc) {\n        /** @type {?} */\n        const bp = this.findByQuery(mc.mediaQuery);\n        if (bp) {\n            mc = mergeAlias(mc, bp);\n            if (mc.matches && this.activatedBreakpoints.indexOf(bp) === -1) {\n                this.activatedBreakpoints.push(bp);\n                this.activatedBreakpoints.sort(sortDescendingPriority);\n                this.updateStyles();\n            }\n            else if (!mc.matches && this.activatedBreakpoints.indexOf(bp) !== -1) {\n                // Remove the breakpoint when it's deactivated\n                this.activatedBreakpoints.splice(this.activatedBreakpoints.indexOf(bp), 1);\n                this.activatedBreakpoints.sort(sortDescendingPriority);\n                this.updateStyles();\n            }\n        }\n    }\n    /**\n     * initialize the marshaller with necessary elements for delegation on an element\n     * @param {?} element\n     * @param {?} key\n     * @param {?=} updateFn optional callback so that custom bp directives don't have to re-provide this\n     * @param {?=} clearFn optional callback so that custom bp directives don't have to re-provide this\n     * @param {?=} extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)\n     * @return {?}\n     */\n    init(element, key, updateFn, clearFn, extraTriggers = []) {\n        initBuilderMap(this.updateMap, element, key, updateFn);\n        initBuilderMap(this.clearMap, element, key, clearFn);\n        this.buildElementKeyMap(element, key);\n        this.watchExtraTriggers(element, key, extraTriggers);\n    }\n    /**\n     * get the value for an element and key and optionally a given breakpoint\n     * @param {?} element\n     * @param {?} key\n     * @param {?=} bp\n     * @return {?}\n     */\n    getValue(element, key, bp) {\n        /** @type {?} */\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            /** @type {?} */\n            const values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);\n            if (values) {\n                return values.get(key);\n            }\n        }\n        return undefined;\n    }\n    /**\n     * whether the element has values for a given key\n     * @param {?} element\n     * @param {?} key\n     * @return {?}\n     */\n    hasValue(element, key) {\n        /** @type {?} */\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            /** @type {?} */\n            const values = this.getActivatedValues(bpMap, key);\n            if (values) {\n                return values.get(key) !== undefined || false;\n            }\n        }\n        return false;\n    }\n    /**\n     * Set the value for an input on a directive\n     * @param {?} element the element in question\n     * @param {?} key the type of the directive (e.g. flex, layout-gap, etc)\n     * @param {?} val the value for the breakpoint\n     * @param {?} bp the breakpoint suffix (empty string = default)\n     * @return {?}\n     */\n    setValue(element, key, val, bp) {\n        /** @type {?} */\n        let bpMap = this.elementMap.get(element);\n        if (!bpMap) {\n            bpMap = new Map().set(bp, new Map().set(key, val));\n            this.elementMap.set(element, bpMap);\n        }\n        else {\n            /** @type {?} */\n            const values = (bpMap.get(bp) || new Map()).set(key, val);\n            bpMap.set(bp, values);\n            this.elementMap.set(element, bpMap);\n        }\n        /** @type {?} */\n        const value = this.getValue(element, key);\n        if (value !== undefined) {\n            this.updateElement(element, key, value);\n        }\n    }\n    /**\n     * Track element value changes for a specific key\n     * @param {?} element\n     * @param {?} key\n     * @return {?}\n     */\n    trackValue(element, key) {\n        return this.subject\n            .asObservable()\n            .pipe(filter((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => v.element === element && v.key === key)));\n    }\n    /**\n     * update all styles for all elements on the current breakpoint\n     * @return {?}\n     */\n    updateStyles() {\n        this.elementMap.forEach((/**\n         * @param {?} bpMap\n         * @param {?} el\n         * @return {?}\n         */\n        (bpMap, el) => {\n            /** @type {?} */\n            const keyMap = new Set((/** @type {?} */ (this.elementKeyMap.get(el))));\n            /** @type {?} */\n            let valueMap = this.getActivatedValues(bpMap);\n            if (valueMap) {\n                valueMap.forEach((/**\n                 * @param {?} v\n                 * @param {?} k\n                 * @return {?}\n                 */\n                (v, k) => {\n                    this.updateElement(el, k, v);\n                    keyMap.delete(k);\n                }));\n            }\n            keyMap.forEach((/**\n             * @param {?} k\n             * @return {?}\n             */\n            k => {\n                valueMap = this.getActivatedValues(bpMap, k);\n                if (valueMap) {\n                    /** @type {?} */\n                    const value = valueMap.get(k);\n                    this.updateElement(el, k, value);\n                }\n                else {\n                    this.clearElement(el, k);\n                }\n            }));\n        }));\n    }\n    /**\n     * clear the styles for a given element\n     * @param {?} element\n     * @param {?} key\n     * @return {?}\n     */\n    clearElement(element, key) {\n        /** @type {?} */\n        const builders = this.clearMap.get(element);\n        if (builders) {\n            /** @type {?} */\n            const clearFn = (/** @type {?} */ (builders.get(key)));\n            if (!!clearFn) {\n                clearFn();\n                this.subject.next({ element, key, value: '' });\n            }\n        }\n    }\n    /**\n     * update a given element with the activated values for a given key\n     * @param {?} element\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    updateElement(element, key, value) {\n        /** @type {?} */\n        const builders = this.updateMap.get(element);\n        if (builders) {\n            /** @type {?} */\n            const updateFn = (/** @type {?} */ (builders.get(key)));\n            if (!!updateFn) {\n                updateFn(value);\n                this.subject.next({ element, key, value });\n            }\n        }\n    }\n    /**\n     * release all references to a given element\n     * @param {?} element\n     * @return {?}\n     */\n    releaseElement(element) {\n        /** @type {?} */\n        const watcherMap = this.watcherMap.get(element);\n        if (watcherMap) {\n            watcherMap.forEach((/**\n             * @param {?} s\n             * @return {?}\n             */\n            s => s.unsubscribe()));\n            this.watcherMap.delete(element);\n        }\n        /** @type {?} */\n        const elementMap = this.elementMap.get(element);\n        if (elementMap) {\n            elementMap.forEach((/**\n             * @param {?} _\n             * @param {?} s\n             * @return {?}\n             */\n            (_, s) => elementMap.delete(s)));\n            this.elementMap.delete(element);\n        }\n    }\n    /**\n     * trigger an update for a given element and key (e.g. layout)\n     * @param {?} element\n     * @param {?=} key\n     * @return {?}\n     */\n    triggerUpdate(element, key) {\n        /** @type {?} */\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            /** @type {?} */\n            const valueMap = this.getActivatedValues(bpMap, key);\n            if (valueMap) {\n                if (key) {\n                    this.updateElement(element, key, valueMap.get(key));\n                }\n                else {\n                    valueMap.forEach((/**\n                     * @param {?} v\n                     * @param {?} k\n                     * @return {?}\n                     */\n                    (v, k) => this.updateElement(element, k, v)));\n                }\n            }\n        }\n    }\n    /**\n     * Cross-reference for HTMLElement with directive key\n     * @private\n     * @param {?} element\n     * @param {?} key\n     * @return {?}\n     */\n    buildElementKeyMap(element, key) {\n        /** @type {?} */\n        let keyMap = this.elementKeyMap.get(element);\n        if (!keyMap) {\n            keyMap = new Set();\n            this.elementKeyMap.set(element, keyMap);\n        }\n        keyMap.add(key);\n    }\n    /**\n     * Other triggers that should force style updates:\n     * - directionality\n     * - layout changes\n     * - mutationobserver updates\n     * @private\n     * @param {?} element\n     * @param {?} key\n     * @param {?} triggers\n     * @return {?}\n     */\n    watchExtraTriggers(element, key, triggers) {\n        if (triggers && triggers.length) {\n            /** @type {?} */\n            let watchers = this.watcherMap.get(element);\n            if (!watchers) {\n                watchers = new Map();\n                this.watcherMap.set(element, watchers);\n            }\n            /** @type {?} */\n            const subscription = watchers.get(key);\n            if (!subscription) {\n                /** @type {?} */\n                const newSubscription = merge(...triggers).subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    /** @type {?} */\n                    const currentValue = this.getValue(element, key);\n                    this.updateElement(element, key, currentValue);\n                }));\n                watchers.set(key, newSubscription);\n            }\n        }\n    }\n    /**\n     * Breakpoint locator by mediaQuery\n     * @private\n     * @param {?} query\n     * @return {?}\n     */\n    findByQuery(query) {\n        return this.breakpoints.findByQuery(query);\n    }\n    /**\n     * get the fallback breakpoint for a given element, starting with the current breakpoint\n     * @private\n     * @param {?} bpMap\n     * @param {?=} key\n     * @return {?}\n     */\n    getActivatedValues(bpMap, key) {\n        for (let i = 0; i < this.activatedBreakpoints.length; i++) {\n            /** @type {?} */\n            const activatedBp = this.activatedBreakpoints[i];\n            /** @type {?} */\n            const valueMap = bpMap.get(activatedBp.alias);\n            if (valueMap) {\n                if (key === undefined || (valueMap.has(key) && valueMap.get(key) != null)) {\n                    return valueMap;\n                }\n            }\n        }\n        /** @type {?} */\n        const lastHope = bpMap.get('');\n        return (key === undefined || lastHope && lastHope.has(key)) ? lastHope : undefined;\n    }\n    /**\n     * Watch for mediaQuery breakpoint activations\n     * @private\n     * @return {?}\n     */\n    observeActivations() {\n        /** @type {?} */\n        const target = (/** @type {?} */ ((/** @type {?} */ (this))));\n        /** @type {?} */\n        const queries = this.breakpoints.items.map((/**\n         * @param {?} bp\n         * @return {?}\n         */\n        bp => bp.mediaQuery));\n        this.matchMedia\n            .observe(this.hook.withPrintQuery(queries))\n            .pipe(tap(this.hook.interceptEvents(target)), filter(this.hook.blockPropagation()))\n            .subscribe(this.onMediaChange.bind(this));\n    }\n}\n/** @nocollapse */ MediaMarshaller.ɵprov = ɵɵdefineInjectable({ factory: function MediaMarshaller_Factory() { return new MediaMarshaller(ɵɵinject(MatchMedia), ɵɵinject(BreakPointRegistry), ɵɵinject(PrintHook)); }, token: MediaMarshaller, providedIn: \"root\" });\nMediaMarshaller.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nMediaMarshaller.ctorParameters = () => [\n    { type: MatchMedia },\n    { type: BreakPointRegistry },\n    { type: PrintHook }\n];\n/**\n * @param {?} map\n * @param {?} element\n * @param {?} key\n * @param {?=} input\n * @return {?}\n */\nfunction initBuilderMap(map$$1, element, key, input) {\n    if (input !== undefined) {\n        /** @type {?} */\n        let oldMap = map$$1.get(element);\n        if (!oldMap) {\n            oldMap = new Map();\n            map$$1.set(element, oldMap);\n        }\n        oldMap.set(key, input);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatchMedia as ɵMatchMedia, MockMatchMedia as ɵMockMatchMedia, MockMatchMediaProvider as ɵMockMatchMediaProvider, CoreModule, removeStyles, BROWSER_PROVIDER, CLASS_NAME, MediaChange, StylesheetMap, DEFAULT_CONFIG, LAYOUT_CONFIG, SERVER_TOKEN, BREAKPOINT, mergeAlias, BaseDirective2, DEFAULT_BREAKPOINTS, ScreenTypes, ORIENTATION_BREAKPOINTS, BreakPointRegistry, BREAKPOINTS, MediaObserver, MediaTrigger, sortDescendingPriority, sortAscendingPriority, coerceArray, StyleUtils, StyleBuilder, validateBasis, MediaMarshaller, BREAKPOINT_PRINT, PrintHook };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}