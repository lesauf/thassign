{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/CSEG/Desktop/thassign/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CommonService } from '@src/app/core/services/common.service';\n// import { any } from 'server/src/modules/parts/part.model';\nimport { Part } from '@src/app/core/models/part/part.model';\nimport { partMocks } from '@src/app/core/mocks/parts.mock';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@src/app/core/services/message.service\";\nimport * as i2 from \"@src/app/core/services/backend.service\";\nimport * as i3 from \"@ngx-translate/core\";\n/**\r\n * Get data about parts from storage\r\n */\nexport class PartService extends CommonService {\n  constructor(messageService, backendService, translateService) {\n    super();\n    this.messageService = messageService;\n    this.backendService = backendService;\n    this.translateService = translateService;\n    this.allParts = [];\n    /**\r\n     * Object storing the nice names of meeting parts,\r\n     * grouped by meetings\r\n     */\n    this.meetingParts = {\n      weekend: ['weekend.publicTalk.chairman', 'weekend.publicTalk.speaker', 'weekend.watchtower.conductor', 'weekend.watchtower.reader'],\n      'midweek-students': ['clm.treasures.bible-reading', 'clm.ministry.memorial-invitation', 'clm.ministry.initial-call', 'clm.ministry.return-visit', 'clm.ministry.bible-study', 'clm.ministry.talk', 'clm.ministry.assistant']\n    };\n    this.collectionName = 'parts';\n    this.serviceName = 'PartService';\n    // this.fetchParts();\n    this.storeParts(partMocks);\n  }\n  /**\r\n   * Get all parts\r\n   */\n  getParts() {\n    return this.dataStore.getValue();\n  }\n  /**\r\n   * Get all parts from the server and store them\r\n   */\n  storeParts(parts) {\n    // this.log('Stored parts', 'PartService');\n    // const result = await this.callFunction('getAllParts');\n    const allParts = this.createPart(parts);\n    this.updateStore(allParts);\n    return allParts;\n  }\n  /**\r\n   *\r\n   * @param title translated title\r\n   * @param partSection\r\n   */\n  getPartByTranslatedTitle(title, partSection, description) {\n    const parts = this.getParts();\n    // Get if the title is among the translated part\n    // Text comparisons are made on lowercase\n    const correspondingPart = parts.find(part => {\n      const t = this.getTranslationOf(part.name);\n      return t.toLowerCase() == title.toLowerCase();\n    });\n    if (correspondingPart !== undefined) {\n      return correspondingPart;\n    } else if (partSection === 'treasures') {\n      // Digging or Treasures talk\n      return this.getPartByName('clm.talk-or-discussion');\n    } else {\n      // Song and prayer\n      const song = this.getTranslationOf('song').toLowerCase();\n      const prayer = this.getTranslationOf('prayer').toLowerCase();\n      if (title.toLowerCase().includes(song) && title.toLowerCase().includes(prayer)) {\n        return this.getPartByName('clm.prayer');\n      }\n      // Songs, Opening/concluding comments\n      // or presentation videos (last from ministry)\n      const openingComments = this.getTranslationOf('comments.opening').toLowerCase();\n      const concludingComments = this.getTranslationOf('comments.concluding').toLowerCase();\n      if (title.toLowerCase().includes(song) && description === '' ||\n      //song\n      title.toLowerCase() === openingComments.toLowerCase() ||\n      // op comment\n      title.toLowerCase() === concludingComments.toLowerCase() ||\n      // concl co\n      partSection === 'ministry' // presentation vids\n      ) {\n        return this.getPartByName('clm.chairman');\n      }\n      return this.getPartByName('clm.talk-or-discussion');\n    }\n    console.log(title, partSection);\n  }\n  /**\r\n   * Get the translations of a key\r\n   * @param key\r\n   */\n  getTranslationOf(key, interpolateParams) {\n    return this.translateService.instant(key, interpolateParams);\n  }\n  /**\r\n   * get the parts objects of the current meeting\r\n   */\n  getPartsByMeeting(meetingName) {\n    const parts = this.getParts();\n    const partsOfMeeting = parts.filter(part => this.meetingParts[meetingName].includes(part.name));\n    return partsOfMeeting;\n  }\n  /**\r\n   * Get all part grouped by meeting\r\n   *\r\n   * Maintaining actually 2 arrays:\r\n   * 1. parts: any[] subarrays of parts for a meeting\r\n   * 2. meetings: string[] array of meetings names to retrieve the keys\r\n   */\n  getPartsGroupedByMeeting() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const allPartsGrouped = [];\n      // list of part types (General, Talk or Discussion, Students)\n      const types = [];\n      _this.getParts().forEach(part => {\n        // if the meeting type is already saved, we skip\n        if (!types.find(type => {\n          return type === part.type;\n        })) {\n          allPartsGrouped.push(_this.getParts().filter(p => p.type === part.type));\n          types.push(part.type);\n        }\n      });\n      // console.log(allPartsGrouped, meetings);\n      return {\n        parts: allPartsGrouped,\n        meetings: types\n      };\n    })();\n  }\n  /**\r\n   * Create Part instances from JSON or array of JSON objects\r\n   *\r\n   * @param props JSON object/array with properties\r\n   */\n  createPart(props) {\n    if (props instanceof Array) {\n      return props.map(obj => new Part(obj));\n    } else {\n      return new Part(props);\n    }\n  }\n  getPartByName(partName) {\n    return this.getParts().find(p => p.name === partName);\n  }\n  static #_ = this.ɵfac = function PartService_Factory(t) {\n    return new (t || PartService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.BackendService), i0.ɵɵinject(i3.TranslateService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PartService,\n    factory: PartService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["CommonService","Part","partMocks","PartService","constructor","messageService","backendService","translateService","allParts","meetingParts","weekend","collectionName","serviceName","storeParts","getParts","dataStore","getValue","parts","createPart","updateStore","getPartByTranslatedTitle","title","partSection","description","correspondingPart","find","part","t","getTranslationOf","name","toLowerCase","undefined","getPartByName","song","prayer","includes","openingComments","concludingComments","console","log","key","interpolateParams","instant","getPartsByMeeting","meetingName","partsOfMeeting","filter","getPartsGroupedByMeeting","_this","_asyncToGenerator","allPartsGrouped","types","forEach","type","push","p","meetings","props","Array","map","obj","partName","_","i0","ɵɵinject","i1","MessageService","i2","BackendService","i3","TranslateService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\CSEG\\Desktop\\thassign\\src\\app\\core\\services\\part.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport { CommonService } from '@src/app/core/services/common.service';\r\nimport { MessageService } from '@src/app/core/services/message.service';\r\n// import { any } from 'server/src/modules/parts/part.model';\r\nimport { Part } from '@src/app/core/models/part/part.model';\r\nimport { partMocks } from '@src/app/core/mocks/parts.mock';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { BackendService } from '@src/app/core/services/backend.service';\r\n\r\n/**\r\n * Get data about parts from storage\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PartService extends CommonService<Part> {\r\n  allParts: any[] = [];\r\n\r\n  /**\r\n   * Object storing the nice names of meeting parts,\r\n   * grouped by meetings\r\n   */\r\n  meetingParts = {\r\n    weekend: [\r\n      'weekend.publicTalk.chairman',\r\n      'weekend.publicTalk.speaker',\r\n      'weekend.watchtower.conductor',\r\n      'weekend.watchtower.reader',\r\n    ],\r\n    'midweek-students': [\r\n      'clm.treasures.bible-reading',\r\n      'clm.ministry.memorial-invitation',\r\n      'clm.ministry.initial-call',\r\n      'clm.ministry.return-visit',\r\n      'clm.ministry.bible-study',\r\n      'clm.ministry.talk',\r\n      'clm.ministry.assistant',\r\n    ],\r\n  };\r\n\r\n  protected collectionName = 'parts';\r\n  protected serviceName = 'PartService';\r\n\r\n  constructor(\r\n    protected messageService: MessageService,\r\n    protected backendService: BackendService,\r\n    protected translateService: TranslateService\r\n  ) {\r\n    super();\r\n\r\n    // this.fetchParts();\r\n    this.storeParts(partMocks);\r\n  }\r\n\r\n  /**\r\n   * Get all parts\r\n   */\r\n  getParts() {\r\n    return this.dataStore.getValue();\r\n  }\r\n\r\n  /**\r\n   * Get all parts from the server and store them\r\n   */\r\n  storeParts(parts: any[]): Part[] {\r\n    // this.log('Stored parts', 'PartService');\r\n\r\n    // const result = await this.callFunction('getAllParts');\r\n\r\n    const allParts = this.createPart(parts) as Part[];\r\n    this.updateStore(allParts);\r\n\r\n    return allParts;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param title translated title\r\n   * @param partSection\r\n   */\r\n  getPartByTranslatedTitle(\r\n    title: string,\r\n    partSection: 'chairman' | 'treasures' | 'ministry' | 'christianLiving',\r\n    description: string\r\n  ) {\r\n    const parts = this.getParts();\r\n\r\n    // Get if the title is among the translated part\r\n    // Text comparisons are made on lowercase\r\n    const correspondingPart = parts.find((part) => {\r\n      const t: string = this.getTranslationOf(part.name);\r\n      return t.toLowerCase() == title.toLowerCase();\r\n    });\r\n    \r\n    if (correspondingPart !== undefined) {\r\n      return correspondingPart;\r\n    } else if (partSection === 'treasures') {\r\n      // Digging or Treasures talk\r\n      return this.getPartByName('clm.talk-or-discussion');\r\n    } else {\r\n      // Song and prayer\r\n      const song = this.getTranslationOf('song').toLowerCase();\r\n      const prayer = this.getTranslationOf('prayer').toLowerCase();\r\n      if (\r\n        title.toLowerCase().includes(song) &&\r\n        title.toLowerCase().includes(prayer)\r\n      ) {\r\n        return this.getPartByName('clm.prayer');\r\n      }\r\n\r\n      // Songs, Opening/concluding comments\r\n      // or presentation videos (last from ministry)\r\n      const openingComments = this.getTranslationOf(\r\n        'comments.opening'\r\n      ).toLowerCase();\r\n      const concludingComments = this.getTranslationOf(\r\n        'comments.concluding'\r\n      ).toLowerCase();\r\n      if (\r\n        (title.toLowerCase().includes(song) && description === '') || //song\r\n        title.toLowerCase() === openingComments.toLowerCase() || // op comment\r\n        title.toLowerCase() === concludingComments.toLowerCase() || // concl co\r\n        partSection === 'ministry' // presentation vids\r\n      ) {\r\n        return this.getPartByName('clm.chairman');\r\n      }\r\n\r\n      return this.getPartByName('clm.talk-or-discussion');\r\n    }\r\n\r\n    console.log(title, partSection);\r\n  }\r\n\r\n  /**\r\n   * Get the translations of a key\r\n   * @param key\r\n   */\r\n  getTranslationOf(key: string, interpolateParams?: Object): string {\r\n    return this.translateService.instant(key, interpolateParams);\r\n  }\r\n\r\n  /**\r\n   * get the parts objects of the current meeting\r\n   */\r\n  getPartsByMeeting(meetingName: string): Part[] {\r\n    const parts = this.getParts();\r\n\r\n    const partsOfMeeting = parts.filter((part) =>\r\n      this.meetingParts[meetingName].includes(part.name)\r\n    );\r\n\r\n    return partsOfMeeting;\r\n  }\r\n\r\n  /**\r\n   * Get all part grouped by meeting\r\n   *\r\n   * Maintaining actually 2 arrays:\r\n   * 1. parts: any[] subarrays of parts for a meeting\r\n   * 2. meetings: string[] array of meetings names to retrieve the keys\r\n   */\r\n  async getPartsGroupedByMeeting() {\r\n    const allPartsGrouped = [];\r\n    // list of part types (General, Talk or Discussion, Students)\r\n    const types = [];\r\n\r\n    this.getParts().forEach((part) => {\r\n      // if the meeting type is already saved, we skip\r\n\r\n      if (\r\n        !types.find((type) => {\r\n          return type === part.type;\r\n        })\r\n      ) {\r\n        allPartsGrouped.push(\r\n          this.getParts().filter((p) => p.type === part.type)\r\n        );\r\n\r\n        types.push(part.type);\r\n      }\r\n    });\r\n    // console.log(allPartsGrouped, meetings);\r\n    return { parts: allPartsGrouped, meetings: types };\r\n  }\r\n\r\n  /**\r\n   * Create Part instances from JSON or array of JSON objects\r\n   *\r\n   * @param props JSON object/array with properties\r\n   */\r\n  createPart(props?: object): Part | Part[] {\r\n    if (props instanceof Array) {\r\n      return props.map((obj) => new Part(obj)) as Part[];\r\n    } else {\r\n      return new Part(props) as Part;\r\n    }\r\n  }\r\n\r\n  getPartByName(partName: string) {\r\n    return this.getParts().find((p) => p.name === partName);\r\n  }\r\n}\r\n\r\n// async getPartsNames() {\r\n//   const partsNames = [];\r\n\r\n//   this.getParts().forEach((part) => {\r\n//     partsNames.push(part.name);\r\n//   });\r\n//   return partsNames;\r\n// }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}