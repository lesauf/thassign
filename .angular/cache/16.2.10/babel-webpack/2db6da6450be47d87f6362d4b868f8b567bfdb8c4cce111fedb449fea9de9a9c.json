{"ast":null,"code":"import { TokenStorage } from '@src/app/modules/auth/token.storage';\nimport * as i0 from \"@angular/core\";\nexport class AuthHeaderInterceptor {\n  intercept(req, next) {\n    // Clone the request to add the new header\n    const token = new TokenStorage();\n    const tokenVal = token.getToken();\n    const clonedRequest = req.clone({\n      headers: req.headers.set('Authorization', tokenVal ? `Bearer ${tokenVal}` : '')\n    });\n    // Pass the cloned request instead of the original request to the next handle\n    return next.handle(clonedRequest);\n  }\n  static #_ = this.ɵfac = function AuthHeaderInterceptor_Factory(t) {\n    return new (t || AuthHeaderInterceptor)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthHeaderInterceptor,\n    factory: AuthHeaderInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["TokenStorage","AuthHeaderInterceptor","intercept","req","next","token","tokenVal","getToken","clonedRequest","clone","headers","set","handle","_","_2","factory","ɵfac"],"sources":["C:\\Users\\CSEG\\Desktop\\thassign\\src\\app\\core\\interceptors\\auth-header.interceptor.ts"],"sourcesContent":["import {\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { TokenStorage } from '@src/app/modules/auth/token.storage';\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class AuthHeaderInterceptor implements HttpInterceptor {\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    // Clone the request to add the new header\r\n    const token = new TokenStorage();\r\n    const tokenVal = token.getToken();\r\n    const clonedRequest = req.clone({\r\n      headers: req.headers.set(\r\n        'Authorization',\r\n        tokenVal ? `Bearer ${tokenVal}` : ''\r\n      )\r\n    });\r\n\r\n    // Pass the cloned request instead of the original request to the next handle\r\n    return next.handle(clonedRequest);\r\n  }\r\n}\r\n"],"mappings":"AAOA,SAASA,YAAY,QAAQ,qCAAqC;;AAIlE,OAAM,MAAOC,qBAAqB;EAChCC,SAASA,CACPC,GAAqB,EACrBC,IAAiB;IAEjB;IACA,MAAMC,KAAK,GAAG,IAAIL,YAAY,EAAE;IAChC,MAAMM,QAAQ,GAAGD,KAAK,CAACE,QAAQ,EAAE;IACjC,MAAMC,aAAa,GAAGL,GAAG,CAACM,KAAK,CAAC;MAC9BC,OAAO,EAAEP,GAAG,CAACO,OAAO,CAACC,GAAG,CACtB,eAAe,EACfL,QAAQ,GAAG,UAAUA,QAAQ,EAAE,GAAG,EAAE;KAEvC,CAAC;IAEF;IACA,OAAOF,IAAI,CAACQ,MAAM,CAACJ,aAAa,CAAC;EACnC;EAAC,QAAAK,CAAA,G;qBAjBUZ,qBAAqB;EAAA;EAAA,QAAAa,EAAA,G;WAArBb,qBAAqB;IAAAc,OAAA,EAArBd,qBAAqB,CAAAe;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}