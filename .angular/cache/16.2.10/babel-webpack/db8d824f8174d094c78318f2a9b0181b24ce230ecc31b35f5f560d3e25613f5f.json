{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/CSEG/Desktop/thassign/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { CommonService } from '@src/app/core/services/common.service';\nimport { generateUsers } from '@src/app/core/mocks/users.mock';\nimport { User } from '@src/app/core/models/user/user.model';\nimport { UserConverter } from '@src/app/core/models/user/user.converter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@src/app/core/services/message.service\";\nimport * as i3 from \"@src/app/core/services/part.service\";\nimport * as i4 from \"@ngx-translate/core\";\nimport * as i5 from \"@src/app/core/services/backend.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\n/**\r\n * Observable Data Service\r\n * @see https://blog.angular-university.io/how-to-build-angular2-apps-using-rxjs-observable-data-services-pitfalls-to-avoid/\r\n * Get data about users from storage\r\n */\nexport class UserService extends CommonService {\n  constructor(http, messageService, partService, translate, backendService) {\n    super();\n    this.http = http;\n    this.messageService = messageService;\n    this.partService = partService;\n    this.translate = translate;\n    this.backendService = backendService;\n    /**\r\n     * Paginated user list store\r\n     */\n    this.pUsersStore = new BehaviorSubject([]);\n    /**\r\n     * Paginated user list observable\r\n     */\n    this.pUsers = this.pUsersStore.asObservable();\n    /**\r\n     * Pagination properties\r\n     */\n    this.sortField = 'lastName';\n    this.sortOrder = 'asc';\n    this.pageSize = 10;\n    this.pageIndex = 1;\n    this.searchTerm = '';\n    /**\r\n     * List of filters on the form filterName => dbField | type of dbField\r\n     */\n    this.filters = {};\n    this.collectionName = 'users';\n    this.serviceName = 'UserService';\n    // this.users = this.store.asObservable();\n    // this.fetchUsers();\n    // this.backendService.listenToCollection('users').subscribe((data) => {\n    //   this.updateStore(this.createUser(data, partService.allParts) as User[]);\n    // });\n  }\n  /**\r\n   * Return the saved user and clear the state\r\n   */\n  get currentUser() {\n    const s = this.cUser;\n    this.cUser = null;\n    return s;\n  }\n  /**\r\n   * Set the saved user\r\n   */\n  set currentUser(user) {\n    this.cUser = user;\n  }\n  destroy() {\n    this.pUsersStore.complete();\n    this.dataStore.complete();\n  }\n  /**\r\n   * Create User instances from JSON or array of JSON objects\r\n   *\r\n   * @param userProperties JSON object/array with properties\r\n   */\n  createUser(userProperties, allParts, allAssignments) {\n    if (userProperties instanceof Array) {\n      return userProperties.map(obj => new User(obj, allParts, allAssignments));\n    } else {\n      return new User(userProperties, allParts, allAssignments);\n    }\n  }\n  generateUsers(numberToGenerate = 50, allParts) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const parts = _this.partService.getParts();\n      const generatedUsers = generateUsers(parts, _this.backendService.getSignedInUser()._id, numberToGenerate);\n      try {\n        // Clear the list of users to activate loader\n        _this.updateStore(null);\n        // insert users\n        yield _this.backendService.upsertManyDocs('users', generatedUsers, 'set', false, new UserConverter());\n        // this.updateStore(this.createUser(users, allParts) as User[]);\n        _this.log('generated users');\n      } catch (error) {\n        _this.handleError('generateUsers', error);\n      }\n    })();\n  }\n  testOs() {\n    const user = new User({\n      firstName: 'usersdf',\n      lastName: 'rasen'\n    });\n    this.dataStore.getValue().push(user);\n  }\n  /**\r\n   * Get users from store\r\n   */\n  getUsers() {\n    return this.dataStore.getValue();\n  }\n  /**\r\n   * Get all users from server\r\n   */\n  storeUsers(users, allParts, allAssignments) {\n    try {\n      // convert to User objects\n      const allUsers = this.createUser(users, allParts);\n      // console.log('Users to put in the store :', allUsers);\n      this.updateStore(allUsers);\n      // this.log('Stored users');\n      return allUsers;\n    } catch (error) {\n      this.handleError('storeUsers', error, [], '');\n    }\n  }\n  /**\r\n   * Fetch a user by id from the backend\r\n   * @param userId\r\n   */\n  getUserFromDb(userId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const doc = yield _this2.backendService.getCollectionWithConverter('users', new UserConverter()).doc(userId).get();\n      return doc.exists ? doc.data() : null;\n    })();\n  }\n  /**\r\n   * Get/create a user\r\n   *\r\n   * @param id: string\r\n   */\n  getUser(userId = null) {\n    try {\n      if (userId) {\n        // Get user from store\n        this.log(`fetched user id=${userId}`);\n        return this.getUsers().find(user => user._id === userId);\n      } else {\n        // create an empty user with default values\n        return new User({\n          // firstName: '',\n          // lastName: '',\n          ownerId: this.backendService.getSignedInUser()._id,\n          // genre: '',\n          child: false,\n          baptized: false,\n          publisher: false,\n          disabled: false,\n          deleted: false,\n          parts: []\n        });\n      }\n    } catch (error) {\n      this.handleError(`getUser id=${userId}`, error);\n    }\n  }\n  /**\r\n   * Check if a given user pass the filters\r\n   */\n  filterUser(user) {\n    let passFiltering = true; // Do this user pass all the filters ?\n    // Loop on the filters keys\n    Object.keys(this.filters).forEach(fKey => {\n      if (this.filters[fKey] === 'boolean') {\n        // pass if field value is true\n        passFiltering = passFiltering && user[fKey] === true;\n      } else if (this.filters[fKey] === 'boolean-false') {\n        // pass if field value is false\n        passFiltering = passFiltering && user[fKey] === false;\n      } else {\n        // filter key is the value, filter value is the name of the field\n        const fValue = this.filters[fKey];\n        passFiltering = passFiltering && user[fValue] === fKey;\n      }\n    });\n    return passFiltering;\n  }\n  sortUsers(a, b) {\n    if (a[this.sortField] === b[this.sortField]) {\n      return 0;\n    }\n    const sortResult = a[this.sortField] > b[this.sortField] ? 1 : -1;\n    return this.sortOrder === 'asc' ? sortResult : -sortResult;\n  }\n  /**\r\n   * Paginate users\r\n   *\r\n   * @returns the total number of filtered users for pagination\r\n   */\n  paginateUsers() {\n    const users = this.dataStore.getValue();\n    if (users !== null) {\n      const fUsers = users.filter(user => user.fullName.match(new RegExp(this.searchTerm, 'i')) !== null && this.filterUser(user));\n      this.pUsersStore.next(fUsers.sort((a, b) => this.sortUsers(a, b)).slice(this.pageIndex * this.pageSize, (this.pageIndex + 1) * this.pageSize));\n      return fUsers.length;\n    } else {\n      this.pUsersStore.next(null);\n      return 0;\n    }\n  }\n  /**\r\n   * GET user by part.\r\n   */\n  getUsersByPart(part) {\n    const users = this.getUsers();\n    return users.filter(user => user.parts.find(assignablePart => assignablePart.name === part.name) !== undefined);\n    //   tap((h) => {\n    //     const outcome = h ? `fetched` : `did not find`;\n    //     this.log(`${outcome} users assigned to part ${part.name}`);\n    //   })\n    //   // catchError(this.handleError('getUsersByPart', []))\n    // );\n  }\n  /**\r\n   * Get the list of users which have the right to do the\r\n   * 'weekend.publicTalk.chairman' part\r\n   * nb: Sort assignments by week desc\r\n   */\n  // getWeekendAssignableList(): Observable<any> {\n  //   return this.http.get<any[]>(this.usersUrl + '/meeting/weekend').pipe(\n  //     map((result) => {\n  //       // Arranging\n  //       const chairmanResults = result.find(\n  //         (part) => part.name === 'weekend.publicTalk.chairman'\n  //       );\n  //       const speakerResults = result.find(\n  //         (part) => part.name === 'weekend.publicTalk.speaker'\n  //       );\n  //       const conductorResults = result.find(\n  //         (part) => part.name === 'weekend.watchtower.conductor'\n  //       );\n  //       const readerResults = result.find(\n  //         (part) => part.name === 'weekend.watchtower.reader'\n  //       );\n  //       const weekeendAssignableList = {\n  //         chairman:\n  //           chairmanResults !== undefined\n  //             ? chairmanResults.assignableUsers\n  //             : null,\n  //         speaker:\n  //           speakerResults !== undefined\n  //             ? speakerResults.assignableUsers\n  //             : null,\n  //         conductor:\n  //           conductorResults !== undefined\n  //             ? conductorResults.assignableUsers\n  //             : null,\n  //         reader:\n  //           readerResults !== undefined ? readerResults.assignableUsers : null,\n  //       };\n  //       return weekeendAssignableList;\n  //     }),\n  //     tap((h) => {\n  //       const outcome = h ? `fetched` : `did not find`;\n  //       this.log(`${outcome} users assigned to weekend parts`);\n  //     })\n  //     // catchError(this.handleError('getWeekendAssignableList', []))\n  //   );\n  // }\n  /**\r\n   * Get the list of users which have the right to do the\r\n   * 'weekend.publicTalk.chairman' part\r\n   * nb: Sort assignments by week desc\r\n   */\n  getAssignableUsersByParts(parts, meetingName) {\n    if (parts === undefined) {\n      parts = this.partService.getParts();\n    }\n    const users = this.getUsers();\n    // console.log(users);\n    const assignableUsersByPart = {};\n    const assignableUsers = users.filter(user => {\n      const meetings = user.meetingsAssignable;\n      return meetings.includes(meetingName) && !user.disabled;\n    });\n    // Arranging by part,\n    parts.forEach(part => {\n      assignableUsersByPart[part.name] = users.filter(user => user.parts.find(userPart => userPart.name === part.name && !user.disabled) !== undefined);\n    });\n    // console.log(assignableUsersByPart);\n    // assignableUsersByPart = this._arrangeAssignableUsers(assignableUsersByPart);\n    return {\n      list: assignableUsers,\n      byPart: assignableUsersByPart\n    };\n  }\n  /**\r\n   * Rename the parts for better lisibility\r\n   */\n  // _arrangeAssignableUsers(result: {}): AssignableUsersByPart {\n  //   return {\n  //     bibleReading: result['clm.treasures.bible-reading'],\n  //     initialCall: result['clm.ministry.initial-call'],\n  //     firstReturnVisit: result['clm.ministry.first-return-visit'],\n  //     secondReturnVisit: result['clm.ministry.second-return-visit'],\n  //     bibleStudy: result['clm.ministry.bible-study'],\n  //     studentTalk: result['clm.ministry.talk'],\n  //     studentAssistant: result['clm.ministry.assistant'],\n  //   } as AssignableUsersByPart;\n  // }\n  //////// Save methods //////////\n  /**\r\n   * Add a new user to the server\r\n   */\n  addUser(user, allParts) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this3.backendService.upsertOneDoc('users', user, null, 'set', false, new UserConverter());\n        _this3.log(`added user`);\n      } catch (error) {\n        _this3.handleError('addUser', error);\n      }\n    })();\n  }\n  /**\r\n   * @PUT: update the user on the server\r\n   */\n  updateUser(user, allParts) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this4.backendService.upsertOneDoc('users', user, user._id, 'set', true, new UserConverter());\n        _this4.log(`updated user`);\n      } catch (error) {\n        _this4.handleError('updateUser', error);\n      }\n    })();\n  }\n  /**\r\n   * DELETE: delete the user from the server\r\n   */\n  deleteUser(userId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        if (userId.hasOwnProperty('length')) {\n          // many users\n          yield _this5.backendService.upsertManyDocs('users', userId, 'delete', false, new UserConverter());\n          _this5.log(`deleted users`);\n        } else {\n          // Only one user\n          yield _this5.backendService.upsertOneDoc('users', null, userId, 'delete', false, new UserConverter());\n          _this5.log(`deleted user`);\n        }\n        // const users = await this.callFunction('Users_deleteByIds', [userId]);\n        //   this.updateStore(this.createUser(users, allParts) as User[]);\n      } catch (error) {\n        _this5.handleError('deleteUser', error);\n      }\n    })();\n  }\n  /**\r\n   * Insert user if not existent, update it otherwise\r\n   * @param user any model object\r\n   */\n  upsertUser(user, allParts) {\n    // : Observable<any> {\n    user.prepareToSave();\n    // this.parts = (this.parts as Part[]).map((part) => part.name);\n    if (user._id !== null) {\n      // user update\n      return this.updateUser(user, allParts);\n    } else {\n      // user add\n      delete user._id; // Important to get the generated _id from DB\n      return this.addUser(user, allParts);\n    }\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService), i0.ɵɵinject(i3.PartService), i0.ɵɵinject(i4.TranslateService), i0.ɵɵinject(i5.BackendService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","CommonService","generateUsers","User","UserConverter","httpOptions","headers","UserService","constructor","http","messageService","partService","translate","backendService","pUsersStore","pUsers","asObservable","sortField","sortOrder","pageSize","pageIndex","searchTerm","filters","collectionName","serviceName","currentUser","s","cUser","user","destroy","complete","dataStore","createUser","userProperties","allParts","allAssignments","Array","map","obj","numberToGenerate","_this","_asyncToGenerator","parts","getParts","generatedUsers","getSignedInUser","_id","updateStore","upsertManyDocs","log","error","handleError","testOs","firstName","lastName","getValue","push","getUsers","storeUsers","users","allUsers","getUserFromDb","userId","_this2","doc","getCollectionWithConverter","get","exists","data","getUser","find","ownerId","child","baptized","publisher","disabled","deleted","filterUser","passFiltering","Object","keys","forEach","fKey","fValue","sortUsers","a","b","sortResult","paginateUsers","fUsers","filter","fullName","match","RegExp","next","sort","slice","length","getUsersByPart","part","assignablePart","name","undefined","getAssignableUsersByParts","meetingName","assignableUsersByPart","assignableUsers","meetings","meetingsAssignable","includes","userPart","list","byPart","addUser","_this3","upsertOneDoc","updateUser","_this4","deleteUser","_this5","hasOwnProperty","upsertUser","prepareToSave","_","i0","ɵɵinject","i1","HttpClient","i2","MessageService","i3","PartService","i4","TranslateService","i5","BackendService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\CSEG\\Desktop\\thassign\\src\\app\\modules\\users\\user.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { BehaviorSubject, interval, Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\r\n\r\nimport { AuthService } from '@src/app/modules/auth/auth.service';\r\nimport { CommonService } from '@src/app/core/services/common.service';\r\nimport { generateUsers } from '@src/app/core/mocks/users.mock';\r\nimport { MessageService } from '@src/app/core/services/message.service';\r\nimport { PartService } from '@src/app/core/services/part.service';\r\nimport { User } from '@src/app/core/models/user/user.model';\r\nimport { Part } from '@src/app/core/models/part/part.model';\r\nimport { UserConverter } from '@src/app/core/models/user/user.converter';\r\nimport { Assignment } from '@src/app/core/models/assignment/assignment.model';\r\nimport { BackendService } from '@src/app/core/services/backend.service';\r\nimport { IsArray } from 'class-validator';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n};\r\n\r\ninterface AssignableUsersByPart {\r\n  bibleReading: User[];\r\n  initialCall: User[];\r\n  firstReturnVisit: User[];\r\n  secondReturnVisit: User[];\r\n  bibleStudy: User[];\r\n  studentTalk: User[];\r\n  studentAssistant: User[];\r\n}\r\n/**\r\n * Observable Data Service\r\n * @see https://blog.angular-university.io/how-to-build-angular2-apps-using-rxjs-observable-data-services-pitfalls-to-avoid/\r\n * Get data about users from storage\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService extends CommonService<User> {\r\n  /**\r\n   * Current user to edit or view\r\n   * Used to pass it as a parameter and avoid query again from the DB\r\n   */\r\n  private cUser: User;\r\n\r\n  /**\r\n   * Paginated user list store\r\n   */\r\n  private pUsersStore: BehaviorSubject<User[]> = new BehaviorSubject<User[]>(\r\n    []\r\n  );\r\n\r\n  /**\r\n   * Paginated user list observable\r\n   */\r\n  pUsers: Observable<User[]> = this.pUsersStore.asObservable();\r\n\r\n  /**\r\n   * Pagination properties\r\n   */\r\n  sortField = 'lastName';\r\n  sortOrder = 'asc';\r\n  pageSize = 10;\r\n  pageIndex = 1;\r\n  searchTerm = '';\r\n\r\n  /**\r\n   * List of filters on the form filterName => dbField | type of dbField\r\n   */\r\n  filters = {};\r\n\r\n  protected collectionName = 'users';\r\n  protected serviceName = 'UserService';\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    protected messageService: MessageService,\r\n    private partService: PartService,\r\n    private translate: TranslateService,\r\n    protected backendService: BackendService\r\n  ) {\r\n    super();\r\n\r\n    // this.users = this.store.asObservable();\r\n\r\n    // this.fetchUsers();\r\n\r\n    // this.backendService.listenToCollection('users').subscribe((data) => {\r\n    //   this.updateStore(this.createUser(data, partService.allParts) as User[]);\r\n    // });\r\n  }\r\n\r\n  /**\r\n   * Return the saved user and clear the state\r\n   */\r\n  get currentUser(): User {\r\n    const s = this.cUser;\r\n    this.cUser = null;\r\n\r\n    return s;\r\n  }\r\n\r\n  /**\r\n   * Set the saved user\r\n   */\r\n  set currentUser(user: User) {\r\n    this.cUser = user;\r\n  }\r\n\r\n  destroy() {\r\n    this.pUsersStore.complete();\r\n    this.dataStore.complete();\r\n  }\r\n\r\n  /**\r\n   * Create User instances from JSON or array of JSON objects\r\n   *\r\n   * @param userProperties JSON object/array with properties\r\n   */\r\n  createUser(\r\n    userProperties: object,\r\n    allParts?: Part[],\r\n    allAssignments?: Assignment[]\r\n  ): User | User[] {\r\n    if (userProperties instanceof Array) {\r\n      return userProperties.map(\r\n        (obj) => new User(obj, allParts, allAssignments)\r\n      ) as User[];\r\n    } else {\r\n      return new User(userProperties, allParts, allAssignments) as User;\r\n    }\r\n  }\r\n\r\n  async generateUsers(numberToGenerate: number = 50, allParts: Part[]) {\r\n    const parts = this.partService.getParts();\r\n    const generatedUsers = generateUsers(\r\n      parts,\r\n      this.backendService.getSignedInUser()._id,\r\n      numberToGenerate\r\n    );\r\n\r\n    try {\r\n      // Clear the list of users to activate loader\r\n      this.updateStore(null);\r\n\r\n      // insert users\r\n      await this.backendService.upsertManyDocs(\r\n        'users',\r\n        generatedUsers,\r\n        'set',\r\n        false,\r\n        new UserConverter()\r\n      );\r\n\r\n      // this.updateStore(this.createUser(users, allParts) as User[]);\r\n\r\n      this.log('generated users');\r\n    } catch (error) {\r\n      this.handleError('generateUsers', error);\r\n    }\r\n  }\r\n\r\n  public testOs() {\r\n    const user = new User({ firstName: 'usersdf', lastName: 'rasen' });\r\n    this.dataStore.getValue().push(user);\r\n  }\r\n\r\n  /**\r\n   * Get users from store\r\n   */\r\n  getUsers(): User[] {\r\n    return this.dataStore.getValue();\r\n  }\r\n\r\n  /**\r\n   * Get all users from server\r\n   */\r\n  storeUsers(\r\n    users: any[],\r\n    allParts: Part[],\r\n    allAssignments?: Assignment[]\r\n  ): User[] {\r\n    try {\r\n      // convert to User objects\r\n      const allUsers = this.createUser(users, allParts) as User[];\r\n      // console.log('Users to put in the store :', allUsers);\r\n\r\n      this.updateStore(allUsers);\r\n      // this.log('Stored users');\r\n\r\n      return allUsers;\r\n    } catch (error) {\r\n      this.handleError('storeUsers', error, [], '');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch a user by id from the backend\r\n   * @param userId\r\n   */\r\n  async getUserFromDb(userId: string): Promise<User | null> {\r\n    const doc = await this.backendService\r\n      .getCollectionWithConverter('users', new UserConverter())\r\n      .doc(userId)\r\n      .get();\r\n\r\n    return doc.exists ? (doc.data() as User) : null;\r\n  }\r\n\r\n  /**\r\n   * Get/create a user\r\n   *\r\n   * @param id: string\r\n   */\r\n  getUser(userId: string = null): User {\r\n    try {\r\n      if (userId) {\r\n        // Get user from store\r\n        this.log(`fetched user id=${userId}`);\r\n\r\n        return this.getUsers().find((user) => user._id === userId);\r\n      } else {\r\n        // create an empty user with default values\r\n        return new User({\r\n          // firstName: '',\r\n          // lastName: '',\r\n          ownerId: this.backendService.getSignedInUser()._id,\r\n          // genre: '',\r\n          child: false,\r\n          baptized: false,\r\n          publisher: false,\r\n          disabled: false,\r\n          deleted: false,\r\n          parts: [],\r\n        });\r\n      }\r\n    } catch (error) {\r\n      this.handleError<any>(`getUser id=${userId}`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a given user pass the filters\r\n   */\r\n  filterUser(user: User): boolean {\r\n    let passFiltering = true; // Do this user pass all the filters ?\r\n\r\n    // Loop on the filters keys\r\n    Object.keys(this.filters).forEach((fKey) => {\r\n      if (this.filters[fKey] === 'boolean') {\r\n        // pass if field value is true\r\n        passFiltering = passFiltering && user[fKey] === true;\r\n      } else if (this.filters[fKey] === 'boolean-false') {\r\n        // pass if field value is false\r\n        passFiltering = passFiltering && user[fKey] === false;\r\n      } else {\r\n        // filter key is the value, filter value is the name of the field\r\n        const fValue = this.filters[fKey];\r\n        passFiltering = passFiltering && user[fValue] === fKey;\r\n      }\r\n    });\r\n\r\n    return passFiltering;\r\n  }\r\n\r\n  sortUsers(a: User, b: User): number {\r\n    if (a[this.sortField] === b[this.sortField]) {\r\n      return 0;\r\n    }\r\n\r\n    const sortResult = a[this.sortField] > b[this.sortField] ? 1 : -1;\r\n\r\n    return this.sortOrder === 'asc' ? sortResult : -sortResult;\r\n  }\r\n\r\n  /**\r\n   * Paginate users\r\n   *\r\n   * @returns the total number of filtered users for pagination\r\n   */\r\n  paginateUsers(): number {\r\n    const users = this.dataStore.getValue();\r\n\r\n    if (users !== null) {\r\n      const fUsers = users.filter(\r\n        (user) =>\r\n          user.fullName.match(new RegExp(this.searchTerm, 'i')) !== null &&\r\n          this.filterUser(user)\r\n      );\r\n\r\n      this.pUsersStore.next(\r\n        fUsers\r\n          .sort((a: User, b: User) => this.sortUsers(a, b))\r\n          .slice(\r\n            this.pageIndex * this.pageSize,\r\n            (this.pageIndex + 1) * this.pageSize\r\n          )\r\n      );\r\n\r\n      return fUsers.length;\r\n    } else {\r\n      this.pUsersStore.next(null);\r\n\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * GET user by part.\r\n   */\r\n  getUsersByPart(part: Part): User[] {\r\n    const users = this.getUsers();\r\n\r\n    return users.filter(\r\n      (user) =>\r\n        (user.parts as Part[]).find(\r\n          (assignablePart) => assignablePart.name === part.name\r\n        ) !== undefined\r\n    );\r\n    //   tap((h) => {\r\n    //     const outcome = h ? `fetched` : `did not find`;\r\n    //     this.log(`${outcome} users assigned to part ${part.name}`);\r\n    //   })\r\n    //   // catchError(this.handleError('getUsersByPart', []))\r\n    // );\r\n  }\r\n\r\n  /**\r\n   * Get the list of users which have the right to do the\r\n   * 'weekend.publicTalk.chairman' part\r\n   * nb: Sort assignments by week desc\r\n   */\r\n  // getWeekendAssignableList(): Observable<any> {\r\n  //   return this.http.get<any[]>(this.usersUrl + '/meeting/weekend').pipe(\r\n  //     map((result) => {\r\n  //       // Arranging\r\n  //       const chairmanResults = result.find(\r\n  //         (part) => part.name === 'weekend.publicTalk.chairman'\r\n  //       );\r\n  //       const speakerResults = result.find(\r\n  //         (part) => part.name === 'weekend.publicTalk.speaker'\r\n  //       );\r\n  //       const conductorResults = result.find(\r\n  //         (part) => part.name === 'weekend.watchtower.conductor'\r\n  //       );\r\n  //       const readerResults = result.find(\r\n  //         (part) => part.name === 'weekend.watchtower.reader'\r\n  //       );\r\n\r\n  //       const weekeendAssignableList = {\r\n  //         chairman:\r\n  //           chairmanResults !== undefined\r\n  //             ? chairmanResults.assignableUsers\r\n  //             : null,\r\n  //         speaker:\r\n  //           speakerResults !== undefined\r\n  //             ? speakerResults.assignableUsers\r\n  //             : null,\r\n  //         conductor:\r\n  //           conductorResults !== undefined\r\n  //             ? conductorResults.assignableUsers\r\n  //             : null,\r\n  //         reader:\r\n  //           readerResults !== undefined ? readerResults.assignableUsers : null,\r\n  //       };\r\n\r\n  //       return weekeendAssignableList;\r\n  //     }),\r\n  //     tap((h) => {\r\n  //       const outcome = h ? `fetched` : `did not find`;\r\n  //       this.log(`${outcome} users assigned to weekend parts`);\r\n  //     })\r\n  //     // catchError(this.handleError('getWeekendAssignableList', []))\r\n  //   );\r\n  // }\r\n\r\n  /**\r\n   * Get the list of users which have the right to do the\r\n   * 'weekend.publicTalk.chairman' part\r\n   * nb: Sort assignments by week desc\r\n   */\r\n  getAssignableUsersByParts(parts?: Part[], meetingName?: string): any {\r\n    if (parts === undefined) {\r\n      parts = this.partService.getParts();\r\n    }\r\n\r\n    const users = this.getUsers();\r\n    // console.log(users);\r\n    const assignableUsersByPart = {};\r\n\r\n    const assignableUsers = users.filter((user) => {\r\n      const meetings = user.meetingsAssignable;\r\n      return meetings.includes(meetingName) && !user.disabled;\r\n    });\r\n\r\n    // Arranging by part,\r\n    parts.forEach((part) => {\r\n      assignableUsersByPart[part.name] = users.filter(\r\n        (user) =>\r\n          (user.parts as Part[]).find(\r\n            (userPart) => userPart.name === part.name && !user.disabled\r\n          ) !== undefined\r\n      );\r\n    });\r\n\r\n    // console.log(assignableUsersByPart);\r\n    // assignableUsersByPart = this._arrangeAssignableUsers(assignableUsersByPart);\r\n    return {\r\n      list: assignableUsers,\r\n      byPart: assignableUsersByPart,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Rename the parts for better lisibility\r\n   */\r\n  // _arrangeAssignableUsers(result: {}): AssignableUsersByPart {\r\n  //   return {\r\n  //     bibleReading: result['clm.treasures.bible-reading'],\r\n  //     initialCall: result['clm.ministry.initial-call'],\r\n  //     firstReturnVisit: result['clm.ministry.first-return-visit'],\r\n  //     secondReturnVisit: result['clm.ministry.second-return-visit'],\r\n  //     bibleStudy: result['clm.ministry.bible-study'],\r\n  //     studentTalk: result['clm.ministry.talk'],\r\n  //     studentAssistant: result['clm.ministry.assistant'],\r\n  //   } as AssignableUsersByPart;\r\n  // }\r\n\r\n  //////// Save methods //////////\r\n\r\n  /**\r\n   * Add a new user to the server\r\n   */\r\n  async addUser(user: User, allParts?: Part[]): Promise<any> {\r\n    try {\r\n      await this.backendService.upsertOneDoc(\r\n        'users',\r\n        user,\r\n        null,\r\n        'set',\r\n        false,\r\n        new UserConverter()\r\n      );\r\n\r\n      this.log(`added user`);\r\n    } catch (error) {\r\n      this.handleError<any>('addUser', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @PUT: update the user on the server\r\n   */\r\n  async updateUser(user: User, allParts?: Part[]): Promise<void> {\r\n    try {\r\n      await this.backendService.upsertOneDoc(\r\n        'users',\r\n        user,\r\n        user._id,\r\n        'set',\r\n        true,\r\n        new UserConverter()\r\n      );\r\n\r\n      this.log(`updated user`);\r\n    } catch (error) {\r\n      this.handleError<any>('updateUser', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * DELETE: delete the user from the server\r\n   */\r\n  async deleteUser(userId: string | string[]): Promise<any> {\r\n    try {\r\n      if (userId.hasOwnProperty('length')) {\r\n        // many users\r\n        await this.backendService.upsertManyDocs(\r\n          'users',\r\n          userId as String[],\r\n          'delete',\r\n          false,\r\n          new UserConverter()\r\n        );\r\n\r\n        this.log(`deleted users`);\r\n      } else {\r\n        // Only one user\r\n        await this.backendService.upsertOneDoc(\r\n          'users',\r\n          null,\r\n          userId as string,\r\n          'delete',\r\n          false,\r\n          new UserConverter()\r\n        );\r\n\r\n        this.log(`deleted user`);\r\n      }\r\n      // const users = await this.callFunction('Users_deleteByIds', [userId]);\r\n\r\n      //   this.updateStore(this.createUser(users, allParts) as User[]);\r\n    } catch (error) {\r\n      this.handleError<any>('deleteUser', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Insert user if not existent, update it otherwise\r\n   * @param user any model object\r\n   */\r\n  upsertUser(user: User, allParts: Part[]) {\r\n    // : Observable<any> {\r\n    user.prepareToSave();\r\n\r\n    // this.parts = (this.parts as Part[]).map((part) => part.name);\r\n\r\n    if (user._id !== null) {\r\n      // user update\r\n      return this.updateUser(user, allParts);\r\n    } else {\r\n      // user add\r\n      delete user._id; // Important to get the generated _id from DB\r\n      return this.addUser(user, allParts);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}