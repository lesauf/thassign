{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/CSEG/Desktop/thassign/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/legacy-snack-bar\";\nimport * as i2 from \"@ngx-translate/core\";\nexport class MessageService {\n  constructor(_snackBar, translate) {\n    this._snackBar = _snackBar;\n    this.translate = translate;\n    this.messages = [];\n  }\n  /**\r\n   * Add a notification in the toolbar\r\n   * @param message\r\n   */\n  add(message) {\n    this.messages.push(message);\n  }\n  /**\r\n   * Log message for debugging purpose\r\n   * Eventually notify my mail\r\n   * @param message\r\n   * @param infos Error/ Call stack, ... any infos useful\r\n   */\n  log(message, infos) {\n    this.add(message);\n  }\n  /**\r\n   * Clear the notifications\r\n   */\n  clear() {\n    this.messages = [];\n  }\n  /**\r\n   * Display a short message to the user\r\n   * @todo Display a flashing toast with message\r\n   * @param messageKey translated message key\r\n   */\n  presentToast(messageKey) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      console.log();\n      _this.translate.get(messageKey).subscribe(message => {\n        _this._snackBar.open(message, '', {\n          duration: 5000\n        });\n      });\n    })();\n  }\n  static #_ = this.ɵfac = function MessageService_Factory(t) {\n    return new (t || MessageService)(i0.ɵɵinject(i1.MatLegacySnackBar), i0.ɵɵinject(i2.TranslateService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessageService,\n    factory: MessageService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["MessageService","constructor","_snackBar","translate","messages","add","message","push","log","infos","clear","presentToast","messageKey","_this","_asyncToGenerator","console","get","subscribe","open","duration","_","i0","ɵɵinject","i1","MatLegacySnackBar","i2","TranslateService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\CSEG\\Desktop\\thassign\\src\\app\\core\\services\\message.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MessageService {\r\n  messages: string[] = [];\r\n\r\n  constructor(\r\n    private _snackBar: MatSnackBar,\r\n    private translate: TranslateService\r\n  ) {}\r\n\r\n  /**\r\n   * Add a notification in the toolbar\r\n   * @param message\r\n   */\r\n  add(message: string) {\r\n    this.messages.push(message);\r\n  }\r\n\r\n  /**\r\n   * Log message for debugging purpose\r\n   * Eventually notify my mail\r\n   * @param message\r\n   * @param infos Error/ Call stack, ... any infos useful\r\n   */\r\n  log(message: string, infos?: any) {\r\n    this.add(message);\r\n  }\r\n\r\n  /**\r\n   * Clear the notifications\r\n   */\r\n  clear() {\r\n    this.messages = [];\r\n  }\r\n\r\n  /**\r\n   * Display a short message to the user\r\n   * @todo Display a flashing toast with message\r\n   * @param messageKey translated message key\r\n   */\r\n  async presentToast(messageKey: string) {\r\n\r\n    console.log();\r\n    this.translate.get(messageKey).subscribe((message) => {\r\n      this._snackBar.open(message, '', {\r\n        duration: 5000,\r\n      });\r\n    });\r\n  }\r\n}\r\n"],"mappings":";;;;AAOA,OAAM,MAAOA,cAAc;EAGzBC,YACUC,SAAsB,EACtBC,SAA2B;IAD3B,KAAAD,SAAS,GAATA,SAAS;IACT,KAAAC,SAAS,GAATA,SAAS;IAJnB,KAAAC,QAAQ,GAAa,EAAE;EAKpB;EAEH;;;;EAIAC,GAAGA,CAACC,OAAe;IACjB,IAAI,CAACF,QAAQ,CAACG,IAAI,CAACD,OAAO,CAAC;EAC7B;EAEA;;;;;;EAMAE,GAAGA,CAACF,OAAe,EAAEG,KAAW;IAC9B,IAAI,CAACJ,GAAG,CAACC,OAAO,CAAC;EACnB;EAEA;;;EAGAI,KAAKA,CAAA;IACH,IAAI,CAACN,QAAQ,GAAG,EAAE;EACpB;EAEA;;;;;EAKMO,YAAYA,CAACC,UAAkB;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAEnCC,OAAO,CAACP,GAAG,EAAE;MACbK,KAAI,CAACV,SAAS,CAACa,GAAG,CAACJ,UAAU,CAAC,CAACK,SAAS,CAAEX,OAAO,IAAI;QACnDO,KAAI,CAACX,SAAS,CAACgB,IAAI,CAACZ,OAAO,EAAE,EAAE,EAAE;UAC/Ba,QAAQ,EAAE;SACX,CAAC;MACJ,CAAC,CAAC;IAAC;EACL;EAAC,QAAAC,CAAA,G;qBA9CUpB,cAAc,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,iBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,gBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAd3B,cAAc;IAAA4B,OAAA,EAAd5B,cAAc,CAAA6B,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}