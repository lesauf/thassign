{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/CSEG/Desktop/thassign/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { DateTime } from 'luxon';\nimport * as i0 from \"@angular/core\";\nexport class AssignmentCommon {\n  constructor() {\n    /**\r\n     * Edit mode, useful for disabling the month selector\r\n     */\n    this.isEditMode = false;\n    this.assignmentsByWeek = [];\n    // this.assignmentService = assignmentService;\n    // this.partService = partService;\n    // this.userService = userService;\n    // this.messageService = messageService;\n    // this.formBuilder = formBuilder;\n    // this.settingService = settingService;\n    // this._snackBar = _snackBar;\n    // this.translateService = translateService;\n    // this.validationService = validationService;\n  }\n  /**\r\n   * Get some initial data :\r\n   * - assignables users by part\r\n   * - assignments by User\r\n   */\n  initializeData() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Get the list of users assignable to parts\n      const assignables = _this.userService.getAssignableUsersByParts();\n      _this.assignableList = assignables.list;\n      _this.assignableListByPart = assignables.byPart;\n      _this.assignmentService.groupAssignmentsByUser();\n      _this.isEditMode = false;\n    })();\n  }\n  /**\r\n   * Get current month specific data\r\n   * - firstWeekOfTheMonth\r\n   * - weeks of the current month\r\n   */\n  initializeMonthData() {\n    // Convert the month to the first day of the week\n    this.firstWeekOfTheMonth = this.assignmentService.getFirstWeekOfTheSelectedMonth(this.month); // populate this.firstWeekOfMonth\n    this.weeks = this.assignmentService.getAllWeeksOfTheSelectedMonth(this.month);\n  }\n  setEditMode(value) {\n    this.isEditMode = value;\n    this.editMode.emit(value);\n  }\n  /**\r\n   * Get parts of a meeting\r\n   */\n  getParts() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.listOfParts = yield _this2.partService.getPartsByMeeting(_this2.meetingName);\n      // const partsShortNames = Object.keys(this.listOfParts);\n      // partsShortNames.forEach((partName) => {\n      //   this[partName + 'Part'] = this.listOfParts[partName];\n      //   // console.log(this[partName + 'Part']);\n      // });\n    })();\n  }\n  /**\r\n   *  Get the part name (translatable title) from the part object\r\n   */\n  getPartTitle(partName) {\n    return this[partName + 'Part'].name;\n  }\n  /**\r\n   * Populate form, refresh and disable it\r\n   */\n  // abstract populateForm();\n  /**\r\n   * Handle the request to the db with the data to save\r\n   */\n  // abstract saveForm(formData);\n  /**\r\n   * Enable and handle the validation and save of the form\r\n   */\n  // editAndSaveForm() {\n  //   // If the form is disabled, enable it and\n  //   // activate edit mode\n  //   if (this.monthForm.disabled) {\n  //     this.isEditMode = true;\n  //     this.monthForm.enable();\n  //   } else {\n  //     // Form enabled, so save it, disable edit mode\n  //     // and disable the form\n  //     // trigger validation\n  //     this.validationService.validateAllFormFields(this.monthForm);\n  //     if (this.monthForm.valid) {\n  //       // Make sure to create a deep copy of the form-model\n  //       const formData = this.monthForm.value;\n  //       // Do useful stuff with the gathered data\n  //       this.saveForm(formData);\n  //     } else {\n  //       // this.showAlert();\n  //     }\n  //     const saveSuccess = true;\n  //     if (saveSuccess) {\n  //       this.isEditMode = false;\n  //       this.monthForm.disable();\n  //       this.populateForm(); // Refresh the form\n  //     }\n  //   }\n  //   // Emit edit mode event (to disable navigation)\n  //   this.editMode.emit(this.isEditMode);\n  // }\n  /**\r\n   * Reset form and enable navigation\r\n   */\n  // cancelForm() {\n  //   // this.monthForm.reset();\n  //   this.populateForm();\n  //   // this.studentsForm.disable();\n  //   this.isEditMode = false;\n  //   // Emit edit mode event (to disable navigation)\n  //   this.editMode.emit(this.isEditMode);\n  // }\n  /**\r\n   * Auto generate the empty assignments\r\n   */\n  generateAssignmentsOld() {\n    return _asyncToGenerator(function* () {})();\n  } //   // Get the error messages\n  //   const noAssignableUserMessage = await this.translateService\n  //     .get('part-with-no-assignable-user')\n  //     .toPromise();\n  //   const noAssignableUserAction = await this.translateService\n  //     .get('part-with-no-assignable-user-action')\n  //     .toPromise();\n  //   console.log(this.assignableList['initialCall']);\n  //   // Get the values in the form\n  //   // parse the weeks\n  //   this.monthForm.value.weeks.forEach((weekValues, weekIndex) => {\n  //     // Handle each field\n  //     this.listOfPartsByWeek[weekIndex].forEach((partName, partIndex) => {\n  //       const assignee = this.assignableList[partName][0];\n  //       // Handle only the field unassigned.\n  //       // This way the user can do some and generate the rest\n  //       if (weekValues[partIndex] && !weekValues[partIndex]['assignee']) {\n  //         // No user assigned, so we will assign the first in the list\n  //         const week = weekValues[partIndex]['week'];\n  //         if (this.assignableList[partName].length) {\n  //           // If there are assignable users\n  //           const indexToAssign = this.assignableList[partName].keys();\n  //           if (partIndex !== 0) {\n  //             const previousPartIndex = partIndex - 1;\n  //             // Compare the value in the previous field\n  //             while (\n  //               this.monthForm.get([\n  //                 'weeks',\n  //                 weekIndex,\n  //                 previousPartIndex,\n  //                 'assignee'\n  //               ]).value['_id'] === this.assignableList[partName][0]['_id']\n  //             ) {\n  //               // If same, rotate the list of this field\n  //               this.rotateArray(this.assignableList[partName]);\n  //             }\n  //           }\n  //           this.monthForm\n  //             .get(['weeks', weekIndex, partIndex, 'assignee'])\n  //             .setValue(assignee);\n  //           // Now lets rotate the list\n  //           this.rotateArray(this.assignableList[partName]);\n  //         } else {\n  //           // TODO inform the users that there are empty assignables for some parts\n  //           // Use snackbar notification ?\n  //           this._snackBar.open(\n  //             noAssignableUserMessage,\n  //             noAssignableUserAction\n  //           );\n  //         }\n  //       }\n  //     });\n  //   });\n  //   // Enable the form for adjustment and save\n  //   this.monthForm.disable();\n  //   this.editAndSaveForm();\n  /**\r\n   * Kind of rotating array, this way the users are assigned by order\r\n   */\n  _getFirstAssignableUserForPartAndMoveHimDown(partName) {\n    // Get the index of the first user assignable to this part\n    const assignableUserIndex = this.assignableList.findIndex(user => {\n      return user.parts.find(\n      // partName is just the short name, so we need to get the db name\n      part => part.name === this.listOfParts[partName].name) !== undefined;\n    });\n    if (assignableUserIndex !== -1) {\n      // User found\n      // Remove the user from the list\n      const assignableUser = this.assignableList.splice(assignableUserIndex, 1);\n      // Put him at the end\n      this.assignableList.push(assignableUser[0]);\n      // console.log(assignableUser);\n      return assignableUser[0];\n    }\n  }\n  // async generateAssignments() {\n  //   // Get the error messages\n  //   const noAssignableUserMessage = await this.translateService\n  //     .get('part-with-no-assignable-user')\n  //     .toPromise();\n  //   const noAssignableUserAction = await this.translateService\n  //     .get('part-with-no-assignable-user-action')\n  //     .toPromise();\n  //   // console.log(this.assignableList);\n  //   // Get the values in the form\n  //   // parse the weeks\n  //   this.monthForm.value.weeks.forEach((weekValues, weekIndex) => {\n  //     // Handle each field\n  //     this.listOfPartsByWeek[weekIndex].forEach((partName, partIndex) => {\n  //       const assignee = this._getFirstAssignableUserForPartAndMoveHimDown(\n  //         partName\n  //       );\n  //       // Handle only the field unassigned.\n  //       // This way the user can assign some and generate the rest\n  //       if (weekValues[partIndex] && !weekValues[partIndex]['assignee']) {\n  //         // No user assigned, so we will assign the first in the list\n  //         const week = weekValues[partIndex]['week'];\n  //         if (assignee !== undefined) {\n  //           // If there is an assignable user\n  //           // if (partIndex !== 0) {\n  //           //   const previousPartIndex = partIndex - 1;\n  //           //   // Compare the value in the previous field\n  //           //   if (\n  //           //     this.monthForm.get([\n  //           //       'weeks',\n  //           //       weekIndex,\n  //           //       previousPartIndex,\n  //           //       'assignee'\n  //           //     ]).value['_id'] === assignee['_id']\n  //           //   ) {\n  //           //     console.log('Avant', assignee);\n  //           //     // If same, pick the next user (done just once, for now)\n  //           //     assignee = this._getFirstAssignableUserForPartAndMoveHimDown(\n  //           //       partName\n  //           //     );\n  //           //     console.log('Apres', assignee);\n  //           //   }\n  //           // }\n  //           this.monthForm\n  //             .get(['weeks', weekIndex, partIndex, 'assignee'])\n  //             .setValue(assignee);\n  //           // Assign the assistant\n  //           if (this.listOfParts[partName].withAssistant) {\n  //             const assistant = this._getFirstAssignableUserForPartAndMoveHimDown(\n  //               'studentAssistant'\n  //             );\n  //             this.monthForm\n  //               .get(['weeks', weekIndex, partIndex, 'assistant'])\n  //               .setValue(assistant);\n  //           }\n  //         } else {\n  //           // TODO inform the users that there are empty assignables for some parts\n  //           // Use snackbar notification ?\n  //           this._snackBar.open(\n  //             noAssignableUserMessage,\n  //             noAssignableUserAction\n  //           );\n  //         }\n  //       }\n  //     });\n  //   });\n  //   // console.log(this.monthForm);\n  //   // Enable the form for adjustment and save\n  //   this.monthForm.disable();\n  //   //  this.editAndSaveForm();\n  // }\n  /**\r\n   * Rotate and array, sending the first elt to the end\r\n   */\n  rotateArray(array) {\n    // array.shift();\n    // console.log('Avant', array);\n    // const shifted = array.shift();\n    // console.log(shifted);\n    array.push(array.shift());\n    // console.log('Apres', array);\n    return array;\n  }\n  /**\r\n   * Used to set the value of Select list\r\n   */\n  // compareFn(c1, c2): boolean {\n  //   // console.log(c1);\n  //   return c1 && c2 ? c1._id === c2._id : c1 === c2;\n  // }\n  /**\r\n   * Sort the list of brothers by lastName\r\n   * @param field string\r\n   * sortOrder\r\n   */\n  sortUsersByName(field, sortOrder = 'asc') {\n    const fieldCombinedName = `${field}AssigneeList`;\n    this[fieldCombinedName] = this[fieldCombinedName].sort((a, b) => {\n      if (a.fullName > b.fullName) {\n        return sortOrder === 'asc' ? 1 : -1;\n      }\n      if (a.fullName < b.fullName) {\n        return sortOrder === 'asc' ? -1 : 1;\n      }\n      return 0;\n    });\n  }\n  sortUsersByLastAssignment(field, sortOrder = 'asc', partName) {\n    const fieldCombinedName = `${field}AssigneeList`;\n    let aLastAssignment;\n    let bLastAssignment;\n    this[fieldCombinedName] = this[fieldCombinedName].sort((a, b) => {\n      let sortValue = 0;\n      // If a part is specified, search instead for its last assignment\n      aLastAssignment = partName === undefined ? a.lastAssignmentAnyPart : a.lastAssignmentThisPart;\n      bLastAssignment = partName === undefined ? b.lastAssignmentAnyPart : b.lastAssignmentThisPart;\n      switch ([aLastAssignment === undefined, bLastAssignment === undefined].join(' ')) {\n        case 'true true':\n          // Both have not this assignment they are on par\n          sortValue = 0;\n          break;\n        case 'true false':\n          // The one with no assignment come first\n          sortValue = sortOrder === 'asc' ? -1 : 1;\n          break;\n        case 'false true':\n          // The one with no assignment come first\n          sortValue = sortOrder === 'asc' ? 1 : -1;\n          break;\n        default:\n          // case 'false false':\n          // Both have this assignment\n          if (aLastAssignment.week > bLastAssignment.week) {\n            sortValue = sortOrder === 'asc' ? 1 : -1;\n          } else if (aLastAssignment.week < bLastAssignment.week) {\n            sortValue = sortOrder === 'asc' ? -1 : 1;\n          } else {\n            sortValue = 0;\n          }\n          break;\n      }\n      return sortValue;\n    });\n  }\n  /**\r\n   * @todo extract the styles\r\n   */\n  saveAsPdf() {\n    // window.print();\n    const mywindow = window.open('', '', 'height=400,width=600');\n    this.translateService.get('assignments').subscribe(pageTitle => {\n      const printContents = this.printable.nativeElement.innerHTML;\n      mywindow.document.write('<!DOCTYPE html><html><head><title>' + pageTitle + ': ' + this.month.toFormat('MMMM yyyy') + '</title>');\n      // Styling\n      mywindow.document.write('<style>' + 'body { font-size: 1.2em }' + '.assignment-line:not(last-child) { margin: 0 0 1em; }' + '.week-box-view { width: 80%; margin: 0 auto; }' + '.assignment-assignee { font-weight: bold; }' + '</style>');\n      /*optional stylesheet*/\n      mywindow.document.write('</head><body>');\n      mywindow.document.write(printContents);\n      mywindow.document.write('</body></html>');\n      mywindow.document.execCommand('print');\n      mywindow.close();\n    });\n  }\n  /**\r\n   * @todo build a service for that, or find a way to factorize it\r\n   * to be used in the whole app.\r\n   * Or better, use a pipe !\r\n   */\n  formatDate(date) {\n    return DateTime.fromJSDate(date).toFormat('Y-M-D');\n  }\n  static #_ = this.ɵfac = function AssignmentCommon_Factory(t) {\n    return new (t || AssignmentCommon)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AssignmentCommon,\n    factory: AssignmentCommon.ɵfac\n  });\n}","map":{"version":3,"names":["DateTime","AssignmentCommon","constructor","isEditMode","assignmentsByWeek","initializeData","_this","_asyncToGenerator","assignables","userService","getAssignableUsersByParts","assignableList","list","assignableListByPart","byPart","assignmentService","groupAssignmentsByUser","initializeMonthData","firstWeekOfTheMonth","getFirstWeekOfTheSelectedMonth","month","weeks","getAllWeeksOfTheSelectedMonth","setEditMode","value","editMode","emit","getParts","_this2","listOfParts","partService","getPartsByMeeting","meetingName","getPartTitle","partName","name","generateAssignmentsOld","_getFirstAssignableUserForPartAndMoveHimDown","assignableUserIndex","findIndex","user","parts","find","part","undefined","assignableUser","splice","push","rotateArray","array","shift","sortUsersByName","field","sortOrder","fieldCombinedName","sort","a","b","fullName","sortUsersByLastAssignment","aLastAssignment","bLastAssignment","sortValue","lastAssignmentAnyPart","lastAssignmentThisPart","join","week","saveAsPdf","mywindow","window","open","translateService","get","subscribe","pageTitle","printContents","printable","nativeElement","innerHTML","document","write","toFormat","execCommand","close","formatDate","date","fromJSDate","_","_2","factory","ɵfac"],"sources":["C:\\Users\\CSEG\\Desktop\\thassign\\src\\app\\modules\\assignments\\components\\assignment.common.ts"],"sourcesContent":["import { ElementRef, Injectable, ViewChild } from '@angular/core';\r\nimport { UntypedFormBuilder, FormGroup, UntypedFormArray } from '@angular/forms';\r\nimport { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { DateTime, Interval } from 'luxon';\r\n\r\nimport { AssignmentService } from '@src/app/modules/assignments/services/assignment.service';\r\nimport { MessageService } from '@src/app/core/services/message.service';\r\nimport { PartService } from '@src/app/core/services/part.service';\r\nimport { SettingService } from '@src/app/core/services/setting.service';\r\nimport { UserService } from '@src/app/modules/users/user.service';\r\nimport { ValidationService } from '@src/app/core/services/validation.service';\r\nimport { Part } from '@src/app/core/models/part/part.model';\r\nimport { Assignment } from '@src/app/core/models/assignment/assignment.model';\r\n\r\n@Injectable()\r\nexport abstract class AssignmentCommon {\r\n  editMode: any;\r\n\r\n  /**\r\n   * Starting day of the month of this program\r\n   */\r\n  month: DateTime;\r\n\r\n  @ViewChild('printableArea')\r\n  printable: ElementRef;\r\n\r\n  /**\r\n   * Used to generate the variables names\r\n   */\r\n  // listOfParts = ['chairman', 'speaker', 'conductor', 'reader'];\r\n  listOfParts: Part[];\r\n\r\n  /**\r\n   * List of parts for each week\r\n   * Useful in case theses are different each week\r\n   */\r\n  // listOfPartsByWeek: any[] = [];\r\n\r\n  /**\r\n   * Form for assignments for the whole month\r\n   */\r\n  monthForm: UntypedFormArray;\r\n\r\n  /**\r\n   * Edit mode, useful for disabling the month selector\r\n   */\r\n  isEditMode = false;\r\n\r\n  firstWeekOfTheMonth: Interval;\r\n\r\n  /**\r\n   * List of user assignable to parts (not disabled nor deleted)\r\n   */\r\n  assignableList: any[];\r\n\r\n  /**\r\n   * List of user assignable grouped by parts (not disabled nor deleted)\r\n   */\r\n  assignableListByPart: any[];\r\n\r\n  /**\r\n   * List of all the weeks of the selected month\r\n   */\r\n  weeks: Interval[];\r\n\r\n  meetingName: string;\r\n\r\n  assignmentsByWeek: Assignment[][] = [];\r\n\r\n  protected assignmentService: AssignmentService;\r\n  protected partService: PartService;\r\n  protected userService: UserService;\r\n  protected messageService: MessageService;\r\n  protected formBuilder: UntypedFormBuilder;\r\n  protected settingService: SettingService;\r\n  protected _snackBar: MatSnackBar;\r\n  protected translateService: TranslateService;\r\n  protected validationService: ValidationService;\r\n\r\n  constructor() {\r\n    // this.assignmentService = assignmentService;\r\n    // this.partService = partService;\r\n    // this.userService = userService;\r\n    // this.messageService = messageService;\r\n    // this.formBuilder = formBuilder;\r\n    // this.settingService = settingService;\r\n    // this._snackBar = _snackBar;\r\n    // this.translateService = translateService;\r\n    // this.validationService = validationService;\r\n  }\r\n\r\n  /**\r\n   * Get some initial data :\r\n   * - assignables users by part\r\n   * - assignments by User\r\n   */\r\n  async initializeData() {\r\n    // Get the list of users assignable to parts\r\n    const assignables = this.userService\r\n      .getAssignableUsersByParts\r\n      // this.listOfParts,\r\n      // this.meetingName\r\n      ();\r\n\r\n    this.assignableList = assignables.list;\r\n    this.assignableListByPart = assignables.byPart;\r\n\r\n    this.assignmentService.groupAssignmentsByUser();\r\n\r\n    this.isEditMode = false;\r\n  }\r\n\r\n  /**\r\n   * Get current month specific data\r\n   * - firstWeekOfTheMonth\r\n   * - weeks of the current month\r\n   */\r\n  initializeMonthData() {\r\n    // Convert the month to the first day of the week\r\n    this.firstWeekOfTheMonth = this.assignmentService.getFirstWeekOfTheSelectedMonth(\r\n      this.month\r\n    ); // populate this.firstWeekOfMonth\r\n\r\n    this.weeks = this.assignmentService.getAllWeeksOfTheSelectedMonth(\r\n      this.month\r\n    );\r\n  }\r\n\r\n  setEditMode(value: boolean) {\r\n    this.isEditMode = value;\r\n\r\n    this.editMode.emit(value);\r\n  }\r\n\r\n  /**\r\n   * Get parts of a meeting\r\n   */\r\n  async getParts() {\r\n    this.listOfParts = await this.partService.getPartsByMeeting(\r\n      this.meetingName\r\n    );\r\n\r\n    // const partsShortNames = Object.keys(this.listOfParts);\r\n\r\n    // partsShortNames.forEach((partName) => {\r\n    //   this[partName + 'Part'] = this.listOfParts[partName];\r\n    //   // console.log(this[partName + 'Part']);\r\n    // });\r\n  }\r\n\r\n  /**\r\n   *  Get the part name (translatable title) from the part object\r\n   */\r\n  getPartTitle(partName) {\r\n    return this[partName + 'Part'].name;\r\n  }\r\n\r\n  /**\r\n   * Populate form, refresh and disable it\r\n   */\r\n  // abstract populateForm();\r\n\r\n  /**\r\n   * Handle the request to the db with the data to save\r\n   */\r\n  // abstract saveForm(formData);\r\n\r\n  /**\r\n   * Enable and handle the validation and save of the form\r\n   */\r\n  // editAndSaveForm() {\r\n  //   // If the form is disabled, enable it and\r\n  //   // activate edit mode\r\n  //   if (this.monthForm.disabled) {\r\n  //     this.isEditMode = true;\r\n  //     this.monthForm.enable();\r\n  //   } else {\r\n  //     // Form enabled, so save it, disable edit mode\r\n  //     // and disable the form\r\n\r\n  //     // trigger validation\r\n  //     this.validationService.validateAllFormFields(this.monthForm);\r\n\r\n  //     if (this.monthForm.valid) {\r\n  //       // Make sure to create a deep copy of the form-model\r\n  //       const formData = this.monthForm.value;\r\n\r\n  //       // Do useful stuff with the gathered data\r\n  //       this.saveForm(formData);\r\n  //     } else {\r\n  //       // this.showAlert();\r\n  //     }\r\n\r\n  //     const saveSuccess = true;\r\n\r\n  //     if (saveSuccess) {\r\n  //       this.isEditMode = false;\r\n  //       this.monthForm.disable();\r\n  //       this.populateForm(); // Refresh the form\r\n  //     }\r\n  //   }\r\n\r\n  //   // Emit edit mode event (to disable navigation)\r\n  //   this.editMode.emit(this.isEditMode);\r\n  // }\r\n\r\n  /**\r\n   * Reset form and enable navigation\r\n   */\r\n  // cancelForm() {\r\n  //   // this.monthForm.reset();\r\n  //   this.populateForm();\r\n  //   // this.studentsForm.disable();\r\n  //   this.isEditMode = false;\r\n\r\n  //   // Emit edit mode event (to disable navigation)\r\n  //   this.editMode.emit(this.isEditMode);\r\n  // }\r\n\r\n  /**\r\n   * Auto generate the empty assignments\r\n   */\r\n  async generateAssignmentsOld() {\r\n    //   // Get the error messages\r\n    //   const noAssignableUserMessage = await this.translateService\r\n    //     .get('part-with-no-assignable-user')\r\n    //     .toPromise();\r\n    //   const noAssignableUserAction = await this.translateService\r\n    //     .get('part-with-no-assignable-user-action')\r\n    //     .toPromise();\r\n    //   console.log(this.assignableList['initialCall']);\r\n    //   // Get the values in the form\r\n    //   // parse the weeks\r\n    //   this.monthForm.value.weeks.forEach((weekValues, weekIndex) => {\r\n    //     // Handle each field\r\n    //     this.listOfPartsByWeek[weekIndex].forEach((partName, partIndex) => {\r\n    //       const assignee = this.assignableList[partName][0];\r\n    //       // Handle only the field unassigned.\r\n    //       // This way the user can do some and generate the rest\r\n    //       if (weekValues[partIndex] && !weekValues[partIndex]['assignee']) {\r\n    //         // No user assigned, so we will assign the first in the list\r\n    //         const week = weekValues[partIndex]['week'];\r\n    //         if (this.assignableList[partName].length) {\r\n    //           // If there are assignable users\r\n    //           const indexToAssign = this.assignableList[partName].keys();\r\n    //           if (partIndex !== 0) {\r\n    //             const previousPartIndex = partIndex - 1;\r\n    //             // Compare the value in the previous field\r\n    //             while (\r\n    //               this.monthForm.get([\r\n    //                 'weeks',\r\n    //                 weekIndex,\r\n    //                 previousPartIndex,\r\n    //                 'assignee'\r\n    //               ]).value['_id'] === this.assignableList[partName][0]['_id']\r\n    //             ) {\r\n    //               // If same, rotate the list of this field\r\n    //               this.rotateArray(this.assignableList[partName]);\r\n    //             }\r\n    //           }\r\n    //           this.monthForm\r\n    //             .get(['weeks', weekIndex, partIndex, 'assignee'])\r\n    //             .setValue(assignee);\r\n    //           // Now lets rotate the list\r\n    //           this.rotateArray(this.assignableList[partName]);\r\n    //         } else {\r\n    //           // TODO inform the users that there are empty assignables for some parts\r\n    //           // Use snackbar notification ?\r\n    //           this._snackBar.open(\r\n    //             noAssignableUserMessage,\r\n    //             noAssignableUserAction\r\n    //           );\r\n    //         }\r\n    //       }\r\n    //     });\r\n    //   });\r\n    //   // Enable the form for adjustment and save\r\n    //   this.monthForm.disable();\r\n    //   this.editAndSaveForm();\r\n  }\r\n\r\n  /**\r\n   * Kind of rotating array, this way the users are assigned by order\r\n   */\r\n  _getFirstAssignableUserForPartAndMoveHimDown(partName) {\r\n    // Get the index of the first user assignable to this part\r\n    const assignableUserIndex = this.assignableList.findIndex((user) => {\r\n      return (\r\n        user.parts.find(\r\n          // partName is just the short name, so we need to get the db name\r\n          (part) => part.name === this.listOfParts[partName].name\r\n        ) !== undefined\r\n      );\r\n    });\r\n\r\n    if (assignableUserIndex !== -1) {\r\n      // User found\r\n      // Remove the user from the list\r\n      const assignableUser = this.assignableList.splice(assignableUserIndex, 1);\r\n      // Put him at the end\r\n      this.assignableList.push(assignableUser[0]);\r\n      // console.log(assignableUser);\r\n      return assignableUser[0];\r\n    }\r\n  }\r\n\r\n  // async generateAssignments() {\r\n  //   // Get the error messages\r\n  //   const noAssignableUserMessage = await this.translateService\r\n  //     .get('part-with-no-assignable-user')\r\n  //     .toPromise();\r\n  //   const noAssignableUserAction = await this.translateService\r\n  //     .get('part-with-no-assignable-user-action')\r\n  //     .toPromise();\r\n\r\n  //   // console.log(this.assignableList);\r\n\r\n  //   // Get the values in the form\r\n  //   // parse the weeks\r\n  //   this.monthForm.value.weeks.forEach((weekValues, weekIndex) => {\r\n  //     // Handle each field\r\n  //     this.listOfPartsByWeek[weekIndex].forEach((partName, partIndex) => {\r\n  //       const assignee = this._getFirstAssignableUserForPartAndMoveHimDown(\r\n  //         partName\r\n  //       );\r\n\r\n  //       // Handle only the field unassigned.\r\n  //       // This way the user can assign some and generate the rest\r\n  //       if (weekValues[partIndex] && !weekValues[partIndex]['assignee']) {\r\n  //         // No user assigned, so we will assign the first in the list\r\n  //         const week = weekValues[partIndex]['week'];\r\n\r\n  //         if (assignee !== undefined) {\r\n  //           // If there is an assignable user\r\n\r\n  //           // if (partIndex !== 0) {\r\n  //           //   const previousPartIndex = partIndex - 1;\r\n\r\n  //           //   // Compare the value in the previous field\r\n  //           //   if (\r\n  //           //     this.monthForm.get([\r\n  //           //       'weeks',\r\n  //           //       weekIndex,\r\n  //           //       previousPartIndex,\r\n  //           //       'assignee'\r\n  //           //     ]).value['_id'] === assignee['_id']\r\n  //           //   ) {\r\n  //           //     console.log('Avant', assignee);\r\n  //           //     // If same, pick the next user (done just once, for now)\r\n  //           //     assignee = this._getFirstAssignableUserForPartAndMoveHimDown(\r\n  //           //       partName\r\n  //           //     );\r\n  //           //     console.log('Apres', assignee);\r\n  //           //   }\r\n  //           // }\r\n\r\n  //           this.monthForm\r\n  //             .get(['weeks', weekIndex, partIndex, 'assignee'])\r\n  //             .setValue(assignee);\r\n\r\n  //           // Assign the assistant\r\n  //           if (this.listOfParts[partName].withAssistant) {\r\n  //             const assistant = this._getFirstAssignableUserForPartAndMoveHimDown(\r\n  //               'studentAssistant'\r\n  //             );\r\n\r\n  //             this.monthForm\r\n  //               .get(['weeks', weekIndex, partIndex, 'assistant'])\r\n  //               .setValue(assistant);\r\n  //           }\r\n  //         } else {\r\n  //           // TODO inform the users that there are empty assignables for some parts\r\n  //           // Use snackbar notification ?\r\n  //           this._snackBar.open(\r\n  //             noAssignableUserMessage,\r\n  //             noAssignableUserAction\r\n  //           );\r\n  //         }\r\n  //       }\r\n  //     });\r\n  //   });\r\n  //   // console.log(this.monthForm);\r\n  //   // Enable the form for adjustment and save\r\n  //   this.monthForm.disable();\r\n  //   //  this.editAndSaveForm();\r\n  // }\r\n\r\n  /**\r\n   * Rotate and array, sending the first elt to the end\r\n   */\r\n  rotateArray(array: any[]) {\r\n    // array.shift();\r\n    // console.log('Avant', array);\r\n    // const shifted = array.shift();\r\n    // console.log(shifted);\r\n    array.push(array.shift());\r\n    // console.log('Apres', array);\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * Used to set the value of Select list\r\n   */\r\n  // compareFn(c1, c2): boolean {\r\n  //   // console.log(c1);\r\n  //   return c1 && c2 ? c1._id === c2._id : c1 === c2;\r\n  // }\r\n\r\n  /**\r\n   * Sort the list of brothers by lastName\r\n   * @param field string\r\n   * sortOrder\r\n   */\r\n  sortUsersByName(field: string, sortOrder: string = 'asc') {\r\n    const fieldCombinedName = `${field}AssigneeList`;\r\n\r\n    this[fieldCombinedName] = this[fieldCombinedName].sort((a, b) => {\r\n      if (a.fullName > b.fullName) {\r\n        return sortOrder === 'asc' ? 1 : -1;\r\n      }\r\n      if (a.fullName < b.fullName) {\r\n        return sortOrder === 'asc' ? -1 : 1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  sortUsersByLastAssignment(\r\n    field: string,\r\n    sortOrder: string = 'asc',\r\n    partName?: string\r\n  ) {\r\n    const fieldCombinedName = `${field}AssigneeList`;\r\n    let aLastAssignment;\r\n    let bLastAssignment;\r\n    this[fieldCombinedName] = this[fieldCombinedName].sort((a, b) => {\r\n      let sortValue = 0;\r\n      // If a part is specified, search instead for its last assignment\r\n      aLastAssignment =\r\n        partName === undefined\r\n          ? a.lastAssignmentAnyPart\r\n          : a.lastAssignmentThisPart;\r\n      bLastAssignment =\r\n        partName === undefined\r\n          ? b.lastAssignmentAnyPart\r\n          : b.lastAssignmentThisPart;\r\n\r\n      switch (\r\n        [aLastAssignment === undefined, bLastAssignment === undefined].join(' ')\r\n      ) {\r\n        case 'true true':\r\n          // Both have not this assignment they are on par\r\n          sortValue = 0;\r\n          break;\r\n        case 'true false':\r\n          // The one with no assignment come first\r\n          sortValue = sortOrder === 'asc' ? -1 : 1;\r\n          break;\r\n        case 'false true':\r\n          // The one with no assignment come first\r\n          sortValue = sortOrder === 'asc' ? 1 : -1;\r\n          break;\r\n        default:\r\n          // case 'false false':\r\n          // Both have this assignment\r\n          if (aLastAssignment.week > bLastAssignment.week) {\r\n            sortValue = sortOrder === 'asc' ? 1 : -1;\r\n          } else if (aLastAssignment.week < bLastAssignment.week) {\r\n            sortValue = sortOrder === 'asc' ? -1 : 1;\r\n          } else {\r\n            sortValue = 0;\r\n          }\r\n          break;\r\n      }\r\n\r\n      return sortValue;\r\n    });\r\n  }\r\n  /**\r\n   * @todo extract the styles\r\n   */\r\n  saveAsPdf() {\r\n    // window.print();\r\n\r\n    const mywindow = window.open('', '', 'height=400,width=600');\r\n\r\n    this.translateService.get('assignments').subscribe((pageTitle) => {\r\n      const printContents = this.printable.nativeElement.innerHTML;\r\n\r\n      mywindow.document.write(\r\n        '<!DOCTYPE html><html><head><title>' +\r\n          pageTitle +\r\n          ': ' +\r\n          this.month.toFormat('MMMM yyyy') +\r\n          '</title>'\r\n      );\r\n      // Styling\r\n      mywindow.document.write(\r\n        '<style>' +\r\n          'body { font-size: 1.2em }' +\r\n          '.assignment-line:not(last-child) { margin: 0 0 1em; }' +\r\n          '.week-box-view { width: 80%; margin: 0 auto; }' +\r\n          '.assignment-assignee { font-weight: bold; }' +\r\n          '</style>'\r\n      );\r\n      /*optional stylesheet*/\r\n      mywindow.document.write('</head><body>');\r\n      mywindow.document.write(printContents);\r\n      mywindow.document.write('</body></html>');\r\n\r\n      mywindow.document.execCommand('print');\r\n      mywindow.close();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @todo build a service for that, or find a way to factorize it\r\n   * to be used in the whole app.\r\n   * Or better, use a pipe !\r\n   */\r\n  formatDate(date: Date) {\r\n    return DateTime.fromJSDate(date).toFormat('Y-M-D');\r\n  }\r\n}\r\n"],"mappings":";AAIA,SAASA,QAAQ,QAAkB,OAAO;;AAY1C,OAAM,MAAgBC,gBAAgB;EAgEpCC,YAAA;IApCA;;;IAGA,KAAAC,UAAU,GAAG,KAAK;IAqBlB,KAAAC,iBAAiB,GAAmB,EAAE;IAapC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;EAEA;;;;;EAKMC,cAAcA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAClB;MACA,MAAMC,WAAW,GAAGF,KAAI,CAACG,WAAW,CACjCC,yBAAyB,EAGxB;MAEJJ,KAAI,CAACK,cAAc,GAAGH,WAAW,CAACI,IAAI;MACtCN,KAAI,CAACO,oBAAoB,GAAGL,WAAW,CAACM,MAAM;MAE9CR,KAAI,CAACS,iBAAiB,CAACC,sBAAsB,EAAE;MAE/CV,KAAI,CAACH,UAAU,GAAG,KAAK;IAAC;EAC1B;EAEA;;;;;EAKAc,mBAAmBA,CAAA;IACjB;IACA,IAAI,CAACC,mBAAmB,GAAG,IAAI,CAACH,iBAAiB,CAACI,8BAA8B,CAC9E,IAAI,CAACC,KAAK,CACX,CAAC,CAAC;IAEH,IAAI,CAACC,KAAK,GAAG,IAAI,CAACN,iBAAiB,CAACO,6BAA6B,CAC/D,IAAI,CAACF,KAAK,CACX;EACH;EAEAG,WAAWA,CAACC,KAAc;IACxB,IAAI,CAACrB,UAAU,GAAGqB,KAAK;IAEvB,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACF,KAAK,CAAC;EAC3B;EAEA;;;EAGMG,QAAQA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAArB,iBAAA;MACZqB,MAAI,CAACC,WAAW,SAASD,MAAI,CAACE,WAAW,CAACC,iBAAiB,CACzDH,MAAI,CAACI,WAAW,CACjB;MAED;MAEA;MACA;MACA;MACA;IAAA;EACF;EAEA;;;EAGAC,YAAYA,CAACC,QAAQ;IACnB,OAAO,IAAI,CAACA,QAAQ,GAAG,MAAM,CAAC,CAACC,IAAI;EACrC;EAEA;;;EAGA;EAEA;;;EAGA;EAEA;;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;;;EAGA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;;;EAGMC,sBAAsBA,CAAA;IAAA,OAAA7B,iBAAA;EAyD5B,CAAC,CAxDC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGF;;;EAGA8B,4CAA4CA,CAACH,QAAQ;IACnD;IACA,MAAMI,mBAAmB,GAAG,IAAI,CAAC3B,cAAc,CAAC4B,SAAS,CAAEC,IAAI,IAAI;MACjE,OACEA,IAAI,CAACC,KAAK,CAACC,IAAI;MACb;MACCC,IAAI,IAAKA,IAAI,CAACR,IAAI,KAAK,IAAI,CAACN,WAAW,CAACK,QAAQ,CAAC,CAACC,IAAI,CACxD,KAAKS,SAAS;IAEnB,CAAC,CAAC;IAEF,IAAIN,mBAAmB,KAAK,CAAC,CAAC,EAAE;MAC9B;MACA;MACA,MAAMO,cAAc,GAAG,IAAI,CAAClC,cAAc,CAACmC,MAAM,CAACR,mBAAmB,EAAE,CAAC,CAAC;MACzE;MACA,IAAI,CAAC3B,cAAc,CAACoC,IAAI,CAACF,cAAc,CAAC,CAAC,CAAC,CAAC;MAC3C;MACA,OAAOA,cAAc,CAAC,CAAC,CAAC;;EAE5B;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}