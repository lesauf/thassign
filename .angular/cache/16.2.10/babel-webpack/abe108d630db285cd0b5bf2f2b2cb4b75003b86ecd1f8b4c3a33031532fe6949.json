{"ast":null,"code":"import { InjectionToken, Optional, Inject, Injectable } from '@angular/core';\nimport { __decorate, __param, __rest } from 'tslib';\nimport { TranslateCompiler } from '@ngx-translate/core';\nimport * as MessageFormat from 'messageformat';\nconst MESSAGE_FORMAT_CONFIG = new InjectionToken(\"MESSAGE_FORMAT_CONFIG\");\nconst defaultConfig = {\n  biDiSupport: false,\n  formatters: undefined,\n  locales: undefined,\n  strictNumberSign: false,\n  disablePluralKeyChecks: false\n};\n\n/**\n * This compiler expects ICU syntax and compiles the expressions with messageformat.js\n */\nlet TranslateMessageFormatCompiler = class TranslateMessageFormatCompiler extends TranslateCompiler {\n  constructor(config) {\n    super();\n    const {\n      locales,\n      formatters,\n      biDiSupport,\n      strictNumberSign,\n      disablePluralKeyChecks\n    } = Object.assign(Object.assign({}, defaultConfig), config);\n    this.messageFormat = new MessageFormat(locales);\n    if (formatters) {\n      this.messageFormat.addFormatters(formatters);\n    }\n    if (biDiSupport) {\n      this.messageFormat.setBiDiSupport(biDiSupport);\n    }\n    if (strictNumberSign) {\n      this.messageFormat.setStrictNumberSign(strictNumberSign);\n    }\n    if (disablePluralKeyChecks) {\n      this.messageFormat.disablePluralKeyChecks();\n    }\n  }\n  compile(value, lang) {\n    return this.messageFormat.compile(value, lang);\n  }\n  compileTranslations(translations, lang) {\n    return this.messageFormat.compile(translations, lang);\n  }\n};\nTranslateMessageFormatCompiler.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MESSAGE_FORMAT_CONFIG]\n  }]\n}];\nTranslateMessageFormatCompiler = __decorate([Injectable(), __param(0, Optional()), __param(0, Inject(MESSAGE_FORMAT_CONFIG))], TranslateMessageFormatCompiler);\n\n/* tslint:disable-next-line no-console */\nconst log = (...message) => console.log(tag, ...message);\nconst ɵ0 = log;\nconst tag = \"[TranslateMessageFormatCompiler]\";\nlet TranslateMessageFormatDebugCompiler = class TranslateMessageFormatDebugCompiler extends TranslateMessageFormatCompiler {\n  compile(value, lang) {\n    log(`COMPILE (${lang})`, value);\n    const interpolationFn = super.compile(value, lang);\n    return this.wrap(interpolationFn, value);\n  }\n  compileTranslations(value, lang) {\n    log(`COMPILE (${lang})`, value);\n    const _a = super.compileTranslations(value, lang),\n      {\n        toString\n      } = _a,\n      interpolationFns = __rest(_a, [\"toString\"]);\n    return Object.assign({\n      toString\n    }, this.wrapRecursively(interpolationFns, value));\n  }\n  wrap(fn, reference) {\n    return params => {\n      log(\"INTERPOLATE\", reference, params);\n      return fn(params);\n    };\n  }\n  wrapRecursively(obj, referenceObj) {\n    return Object.keys(obj).reduce((acc, key) => {\n      const value = obj[key];\n      const referenceValue = referenceObj[key];\n      return typeof value === \"function\" ? Object.assign(Object.assign({}, acc), {\n        [key]: this.wrap(value, referenceValue)\n      }) : Object.assign(Object.assign({}, acc), {\n        [key]: this.wrapRecursively(value, referenceValue)\n      });\n    }, {});\n  }\n};\nTranslateMessageFormatDebugCompiler = __decorate([Injectable()], TranslateMessageFormatDebugCompiler);\n\n/*\n * Public API Surface of ngx-translate-messageformat-compiler\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MESSAGE_FORMAT_CONFIG, TranslateMessageFormatCompiler, TranslateMessageFormatDebugCompiler, defaultConfig, ɵ0 };","map":{"version":3,"names":["InjectionToken","Optional","Inject","Injectable","__decorate","__param","__rest","TranslateCompiler","MessageFormat","MESSAGE_FORMAT_CONFIG","defaultConfig","biDiSupport","formatters","undefined","locales","strictNumberSign","disablePluralKeyChecks","TranslateMessageFormatCompiler","constructor","config","Object","assign","messageFormat","addFormatters","setBiDiSupport","setStrictNumberSign","compile","value","lang","compileTranslations","translations","ctorParameters","type","decorators","args","log","message","console","tag","ɵ0","TranslateMessageFormatDebugCompiler","interpolationFn","wrap","_a","toString","interpolationFns","wrapRecursively","fn","reference","params","obj","referenceObj","keys","reduce","acc","key","referenceValue"],"sources":["C:/Users/CSEG/Desktop/thassign/node_modules/ngx-translate-messageformat-compiler/fesm2015/ngx-translate-messageformat-compiler.js"],"sourcesContent":["import { InjectionToken, Optional, Inject, Injectable } from '@angular/core';\nimport { __decorate, __param, __rest } from 'tslib';\nimport { TranslateCompiler } from '@ngx-translate/core';\nimport * as MessageFormat from 'messageformat';\n\nconst MESSAGE_FORMAT_CONFIG = new InjectionToken(\"MESSAGE_FORMAT_CONFIG\");\nconst defaultConfig = {\n    biDiSupport: false,\n    formatters: undefined,\n    locales: undefined,\n    strictNumberSign: false,\n    disablePluralKeyChecks: false,\n};\n\n/**\n * This compiler expects ICU syntax and compiles the expressions with messageformat.js\n */\nlet TranslateMessageFormatCompiler = class TranslateMessageFormatCompiler extends TranslateCompiler {\n    constructor(config) {\n        super();\n        const { locales, formatters, biDiSupport, strictNumberSign, disablePluralKeyChecks, } = Object.assign(Object.assign({}, defaultConfig), config);\n        this.messageFormat = new MessageFormat(locales);\n        if (formatters) {\n            this.messageFormat.addFormatters(formatters);\n        }\n        if (biDiSupport) {\n            this.messageFormat.setBiDiSupport(biDiSupport);\n        }\n        if (strictNumberSign) {\n            this.messageFormat.setStrictNumberSign(strictNumberSign);\n        }\n        if (disablePluralKeyChecks) {\n            this.messageFormat.disablePluralKeyChecks();\n        }\n    }\n    compile(value, lang) {\n        return this.messageFormat.compile(value, lang);\n    }\n    compileTranslations(translations, lang) {\n        return this.messageFormat.compile(translations, lang);\n    }\n};\nTranslateMessageFormatCompiler.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MESSAGE_FORMAT_CONFIG,] }] }\n];\nTranslateMessageFormatCompiler = __decorate([\n    Injectable(),\n    __param(0, Optional()),\n    __param(0, Inject(MESSAGE_FORMAT_CONFIG))\n], TranslateMessageFormatCompiler);\n\n/* tslint:disable-next-line no-console */\nconst log = (...message) => console.log(tag, ...message);\nconst ɵ0 = log;\nconst tag = \"[TranslateMessageFormatCompiler]\";\nlet TranslateMessageFormatDebugCompiler = class TranslateMessageFormatDebugCompiler extends TranslateMessageFormatCompiler {\n    compile(value, lang) {\n        log(`COMPILE (${lang})`, value);\n        const interpolationFn = super.compile(value, lang);\n        return this.wrap(interpolationFn, value);\n    }\n    compileTranslations(value, lang) {\n        log(`COMPILE (${lang})`, value);\n        const _a = super.compileTranslations(value, lang), { toString } = _a, interpolationFns = __rest(_a, [\"toString\"]);\n        return Object.assign({ toString }, this.wrapRecursively(interpolationFns, value));\n    }\n    wrap(fn, reference) {\n        return (params) => {\n            log(\"INTERPOLATE\", reference, params);\n            return fn(params);\n        };\n    }\n    wrapRecursively(obj, referenceObj) {\n        return Object.keys(obj).reduce((acc, key) => {\n            const value = obj[key];\n            const referenceValue = referenceObj[key];\n            return typeof value === \"function\"\n                ? Object.assign(Object.assign({}, acc), { [key]: this.wrap(value, referenceValue) }) : Object.assign(Object.assign({}, acc), { [key]: this.wrapRecursively(value, referenceValue) });\n        }, {});\n    }\n};\nTranslateMessageFormatDebugCompiler = __decorate([\n    Injectable()\n], TranslateMessageFormatDebugCompiler);\n\n/*\n * Public API Surface of ngx-translate-messageformat-compiler\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MESSAGE_FORMAT_CONFIG, TranslateMessageFormatCompiler, TranslateMessageFormatDebugCompiler, defaultConfig, ɵ0 };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}