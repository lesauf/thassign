{"ast":null,"code":"import { UntypedFormGroup, UntypedFormControl } from '@angular/forms';\nimport { validateSync } from 'class-validator';\nimport * as i0 from \"@angular/core\";\n/**\r\n * @see https://medium.com/@amcdnl/advanced-validation-with-angular-reactive-forms-2929759bf6e3\r\n * @see https://medium.com/@Yuschick/building-custom-localised-error-messages-with-joi-4a348d8cc2ba\r\n */\nexport class ValidationService {\n  /**\r\n   * Wrapper that will map Joi errors to an Angular format\r\n   */\n  static joiValidator(schema) {\n    // const result = schema.validate(control.value);\n    // if (result.error) {\n    //   return result.error.details.reduce((obj, val, key) => {\n    //     obj[val.type] = val.message;\n    //     return obj;\n    //   }, {});\n    // }\n    return form => {\n      const result = schema.validate(form.value, {\n        abortEarly: false\n      });\n      let error = null;\n      const fieldsWithError = {};\n      if (result.error) {\n        result.error.details.forEach(errorObj => {\n          const field = errorObj.path.join('_');\n          const type = errorObj.type;\n          fieldsWithError[field] = `error.${field}.${type}`;\n        });\n        error = result.error.details.reduce((obj, val, key) => {\n          obj[val.type] = val.message;\n          return obj;\n        }, {});\n      }\n      return error !== null ? fieldsWithError : null;\n    };\n  }\n  /**\r\n   * Wrapper that will map Joi errors to an Angular format\r\n   */\n  static classValidator(model) {\n    return form => {\n      // console.log(model.fromJson(form.value));\n      const errors = validateSync(form.value);\n      const fieldsWithError = {};\n      if (errors.length > 0) {\n        errors.forEach(errorObj => {\n          const field = errorObj.property;\n          // const type = errorObj.property;\n          // console.log(errorObj);\n          fieldsWithError[field] = Object.values(errorObj.constraints);\n        });\n        return fieldsWithError;\n      }\n      return null;\n    };\n  }\n  static getValidatorErrorMessage(validatorName, validatorValue) {\n    const config = {\n      required: 'Required',\n      invalidCreditCard: 'Is invalid credit card number',\n      invalidEmailAddress: 'Invalid email address',\n      invalidPassword: 'Invalid password. Password must be at least 6 characters long, and contain a number.',\n      minlength: `Minimum length ${validatorValue.requiredLength}`\n    };\n    return config[validatorName];\n  }\n  static creditCardValidator(control) {\n    // Visa, MasterCard, American Express, Diners Club, Discover, JCB\n    if (control.value.match(\n    // tslint:disable-next-line:max-line-length\n    /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/)) {\n      return null;\n    } else {\n      return {\n        invalidCreditCard: true\n      };\n    }\n  }\n  static emailValidator(control) {\n    // RFC 2822 compliant regex\n    if (control.value === null || control.value === '') {\n      // valid if empty\n      return null;\n    } else if (control.value.match(\n    // tslint:disable-next-line:max-line-length\n    /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/)) {\n      return null;\n    } else {\n      return {\n        invalidEmailAddress: true\n      };\n    }\n  }\n  static passwordValidator(control) {\n    // {6,100}           - Assert password is between 6 and 100 characters\n    // (?=.*[0-9])       - Assert a string has at least one number\n    if (control.value.match(/^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,100}$/)) {\n      return null;\n    } else {\n      return {\n        invalidPassword: true\n      };\n    }\n  }\n  /**\r\n   * Trigger validation on formFields\r\n   */\n  validateAllFormFields(formGroup) {\n    Object.keys(formGroup.controls).forEach(field => {\n      const control = formGroup.get(field);\n      if (control instanceof UntypedFormControl) {\n        control.markAsTouched({\n          onlySelf: true\n        });\n      } else if (control instanceof UntypedFormGroup) {\n        this.validateAllFormFields(control);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function ValidationService_Factory(t) {\n    return new (t || ValidationService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ValidationService,\n    factory: ValidationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["UntypedFormGroup","UntypedFormControl","validateSync","ValidationService","joiValidator","schema","form","result","validate","value","abortEarly","error","fieldsWithError","details","forEach","errorObj","field","path","join","type","reduce","obj","val","key","message","classValidator","model","errors","length","property","Object","values","constraints","getValidatorErrorMessage","validatorName","validatorValue","config","required","invalidCreditCard","invalidEmailAddress","invalidPassword","minlength","requiredLength","creditCardValidator","control","match","emailValidator","passwordValidator","validateAllFormFields","formGroup","keys","controls","get","markAsTouched","onlySelf","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\CSEG\\Desktop\\thassign\\src\\app\\core\\services\\validation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  UntypedFormGroup,\r\n  UntypedFormControl,\r\n  ValidatorFn,\r\n  AbstractControl,\r\n  UntypedFormArray,\r\n} from '@angular/forms';\r\nimport { validateSync } from 'class-validator';\r\nimport { User } from '@src/app/core/models/user/user.model';\r\n\r\n/**\r\n * @see https://medium.com/@amcdnl/advanced-validation-with-angular-reactive-forms-2929759bf6e3\r\n * @see https://medium.com/@Yuschick/building-custom-localised-error-messages-with-joi-4a348d8cc2ba\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ValidationService {\r\n  /**\r\n   * Wrapper that will map Joi errors to an Angular format\r\n   */\r\n  static joiValidator(schema): ValidatorFn {\r\n    // const result = schema.validate(control.value);\r\n    // if (result.error) {\r\n    //   return result.error.details.reduce((obj, val, key) => {\r\n    //     obj[val.type] = val.message;\r\n    //     return obj;\r\n    //   }, {});\r\n    // }\r\n\r\n    return (form: UntypedFormGroup): { [key: string]: any } | null => {\r\n      const result = schema.validate(form.value, {\r\n        abortEarly: false,\r\n      });\r\n\r\n      let error = null;\r\n\r\n      const fieldsWithError = {};\r\n      if (result.error) {\r\n        result.error.details.forEach((errorObj) => {\r\n          const field = errorObj.path.join('_');\r\n          const type = errorObj.type;\r\n          fieldsWithError[field] = `error.${field}.${type}`;\r\n        });\r\n\r\n        error = result.error.details.reduce((obj, val, key) => {\r\n          obj[val.type] = val.message;\r\n          return obj;\r\n        }, {});\r\n      }\r\n\r\n      return error !== null ? fieldsWithError : null;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Wrapper that will map Joi errors to an Angular format\r\n   */\r\n  static classValidator(model): ValidatorFn {\r\n    return (form: UntypedFormGroup): { [key: string]: any } | null => {\r\n      // console.log(model.fromJson(form.value));\r\n      const errors = validateSync(form.value);\r\n\r\n      const fieldsWithError = {};\r\n      if (errors.length > 0) {\r\n        errors.forEach((errorObj) => {\r\n          const field = errorObj.property;\r\n          // const type = errorObj.property;\r\n          // console.log(errorObj);\r\n          fieldsWithError[field] = Object.values(errorObj.constraints);\r\n        });\r\n\r\n        return fieldsWithError;\r\n      }\r\n\r\n      return null;\r\n    };\r\n  }\r\n\r\n  static getValidatorErrorMessage(validatorName: string, validatorValue?: any) {\r\n    const config = {\r\n      required: 'Required',\r\n      invalidCreditCard: 'Is invalid credit card number',\r\n      invalidEmailAddress: 'Invalid email address',\r\n      invalidPassword:\r\n        'Invalid password. Password must be at least 6 characters long, and contain a number.',\r\n      minlength: `Minimum length ${validatorValue.requiredLength}`,\r\n    };\r\n\r\n    return config[validatorName];\r\n  }\r\n\r\n  static creditCardValidator(control) {\r\n    // Visa, MasterCard, American Express, Diners Club, Discover, JCB\r\n    if (\r\n      control.value.match(\r\n        // tslint:disable-next-line:max-line-length\r\n        /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/\r\n      )\r\n    ) {\r\n      return null;\r\n    } else {\r\n      return { invalidCreditCard: true };\r\n    }\r\n  }\r\n\r\n  static emailValidator(control) {\r\n    // RFC 2822 compliant regex\r\n\r\n    if (control.value === null || control.value === '') {\r\n      // valid if empty\r\n      return null;\r\n    } else if (\r\n      control.value.match(\r\n        // tslint:disable-next-line:max-line-length\r\n        /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/\r\n      )\r\n    ) {\r\n      return null;\r\n    } else {\r\n      return { invalidEmailAddress: true };\r\n    }\r\n  }\r\n\r\n  static passwordValidator(control) {\r\n    // {6,100}           - Assert password is between 6 and 100 characters\r\n    // (?=.*[0-9])       - Assert a string has at least one number\r\n    if (control.value.match(/^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,100}$/)) {\r\n      return null;\r\n    } else {\r\n      return { invalidPassword: true };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger validation on formFields\r\n   */\r\n  validateAllFormFields(formGroup: UntypedFormGroup | UntypedFormArray) {\r\n    Object.keys(formGroup.controls).forEach((field) => {\r\n      const control = formGroup.get(field);\r\n      if (control instanceof UntypedFormControl) {\r\n        control.markAsTouched({ onlySelf: true });\r\n      } else if (control instanceof UntypedFormGroup) {\r\n        this.validateAllFormFields(control);\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}