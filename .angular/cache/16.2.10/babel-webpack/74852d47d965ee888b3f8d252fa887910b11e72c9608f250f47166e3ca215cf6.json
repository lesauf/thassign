{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\n/**\r\n * M type stand for 'Model', the model type\r\n */\nexport class CommonService {\n  constructor() {\n    /**\r\n     * Observable data service\r\n     * the type will be converted to Map<string, M>\r\n     */\n    this.dataStore = new BehaviorSubject([]);\n    this.data = this.dataStore.asObservable();\n  }\n  /**\r\n   * Generic function to encapsulate any Baas used\r\n   */\n  callFunction(functionName, parameters) {\n    return this.backendService.callFunction(functionName, parameters);\n  }\n  /**\r\n   * Generic function to encapsulate any Baas used\r\n   */\n  // protected callFunctionViaHook<T>(\n  //   functionName,\n  //   parameters?: T[]\n  // ): Promise<any> {\n  //   return this.backendService.callFunctionViaHook(functionName, parameters);\n  // }\n  /**\r\n   * Update the store with the most recent data from the DB\r\n   * @param values\r\n   */\n  updateStore(values) {\n    this.dataStore.next(values);\n  }\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   * @Todo Fix this\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\n  handleError(operation = 'operation', error, result, service) {\n    // For now, just throw the error.\n    if (error) {\n      throw error;\n    }\n    return result;\n    // return (error: any): Observable<T> => {\n    //   // TODO: send the error to remote logging infrastructure\n    //   console.error(error); // log to console instead\n    //   const errorMsg =\n    //     error.error && error.error.message\n    //       ? error.error.message\n    //       : error.statusText;\n    //   // TODO: better job of transforming error for user consumption\n    //   this.log(`${operation} failed: ${errorMsg}`);\n    //   // Let the app keep running by returning an empty result.\n    //   // return of(result as T);\n    // };\n  }\n  /**\r\n   * Log an error/message to send the developer\r\n   */\n  log(message, service) {\n    service = service !== undefined ? service : this.constructor.name;\n    this.messageService.add(`${service}: ${message}`);\n  }\n  static #_ = this.ɵfac = function CommonService_Factory(t) {\n    return new (t || CommonService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommonService,\n    factory: CommonService.ɵfac\n  });\n}","map":{"version":3,"names":["BehaviorSubject","CommonService","constructor","dataStore","data","asObservable","callFunction","functionName","parameters","backendService","updateStore","values","next","handleError","operation","error","result","service","log","message","undefined","name","messageService","add","_","_2","factory","ɵfac"],"sources":["C:\\Users\\CSEG\\Desktop\\thassign\\src\\app\\core\\services\\common.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, of, BehaviorSubject } from 'rxjs';\r\n\r\nimport { MessageService } from '@src/app/core/services/message.service';\r\nimport { BackendService } from '@src/app/core/services/backend.service';\r\n\r\n/**\r\n * M type stand for 'Model', the model type\r\n */\r\n@Injectable()\r\nexport abstract class CommonService<M> {\r\n  /**\r\n   * Observable data service\r\n   * the type will be converted to Map<string, M>\r\n   */\r\n  protected dataStore: BehaviorSubject<any> = new BehaviorSubject<any>([]);\r\n\r\n  public readonly data: Observable<any>; //  = this.dataStore.asObservable();\r\n\r\n  protected collectionName: string;\r\n  protected serviceName: string;\r\n  protected messageService: MessageService;\r\n  protected backendService: BackendService;\r\n\r\n  constructor() {\r\n    this.data = this.dataStore.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Generic function to encapsulate any Baas used\r\n   */\r\n  protected callFunction<T>(functionName, parameters?: any[]): Promise<any> {\r\n    return this.backendService.callFunction(functionName, parameters);\r\n  }\r\n\r\n  /**\r\n   * Generic function to encapsulate any Baas used\r\n   */\r\n  // protected callFunctionViaHook<T>(\r\n  //   functionName,\r\n  //   parameters?: T[]\r\n  // ): Promise<any> {\r\n  //   return this.backendService.callFunctionViaHook(functionName, parameters);\r\n  // }\r\n\r\n  /**\r\n   * Update the store with the most recent data from the DB\r\n   * @param values\r\n   */\r\n  protected updateStore(values: any): void {\r\n    this.dataStore.next(values);\r\n  }\r\n\r\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   * @Todo Fix this\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\r\n  protected handleError<T>(\r\n    operation = 'operation',\r\n    error: any,\r\n    result?: T,\r\n    service?: string\r\n  ): T {\r\n    // For now, just throw the error.\r\n    if (error) {\r\n      throw error;\r\n    }\r\n\r\n    return result;\r\n    // return (error: any): Observable<T> => {\r\n    //   // TODO: send the error to remote logging infrastructure\r\n    //   console.error(error); // log to console instead\r\n\r\n    //   const errorMsg =\r\n    //     error.error && error.error.message\r\n    //       ? error.error.message\r\n    //       : error.statusText;\r\n    //   // TODO: better job of transforming error for user consumption\r\n    //   this.log(`${operation} failed: ${errorMsg}`);\r\n\r\n    //   // Let the app keep running by returning an empty result.\r\n    //   // return of(result as T);\r\n    // };\r\n  }\r\n\r\n  /**\r\n   * Log an error/message to send the developer\r\n   */\r\n  protected log(message: string, service?: string) {\r\n    service = service !== undefined ? service : this.constructor.name;\r\n    this.messageService.add(`${service}: ${message}`);\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAyBA,eAAe,QAAQ,MAAM;;AAKtD;;;AAIA,OAAM,MAAgBC,aAAa;EAcjCC,YAAA;IAbA;;;;IAIU,KAAAC,SAAS,GAAyB,IAAIH,eAAe,CAAM,EAAE,CAAC;IAUtE,IAAI,CAACI,IAAI,GAAG,IAAI,CAACD,SAAS,CAACE,YAAY,EAAE;EAC3C;EAEA;;;EAGUC,YAAYA,CAAIC,YAAY,EAAEC,UAAkB;IACxD,OAAO,IAAI,CAACC,cAAc,CAACH,YAAY,CAACC,YAAY,EAAEC,UAAU,CAAC;EACnE;EAEA;;;EAGA;EACA;EACA;EACA;EACA;EACA;EAEA;;;;EAIUE,WAAWA,CAACC,MAAW;IAC/B,IAAI,CAACR,SAAS,CAACS,IAAI,CAACD,MAAM,CAAC;EAC7B;EAEA;;;;;;;EAOUE,WAAWA,CACnBC,SAAS,GAAG,WAAW,EACvBC,KAAU,EACVC,MAAU,EACVC,OAAgB;IAEhB;IACA,IAAIF,KAAK,EAAE;MACT,MAAMA,KAAK;;IAGb,OAAOC,MAAM;IACb;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;EACF;EAEA;;;EAGUE,GAAGA,CAACC,OAAe,EAAEF,OAAgB;IAC7CA,OAAO,GAAGA,OAAO,KAAKG,SAAS,GAAGH,OAAO,GAAG,IAAI,CAACf,WAAW,CAACmB,IAAI;IACjE,IAAI,CAACC,cAAc,CAACC,GAAG,CAAC,GAAGN,OAAO,KAAKE,OAAO,EAAE,CAAC;EACnD;EAAC,QAAAK,CAAA,G;qBApFmBvB,aAAa;EAAA;EAAA,QAAAwB,EAAA,G;WAAbxB,aAAa;IAAAyB,OAAA,EAAbzB,aAAa,CAAA0B;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}