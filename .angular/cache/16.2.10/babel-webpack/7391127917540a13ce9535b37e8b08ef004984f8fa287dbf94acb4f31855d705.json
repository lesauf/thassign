{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/CSEG/Desktop/thassign/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { User } from '@src/app/core/models/user/user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"@angular/fire/auth\";\nexport class FirebaseService {\n  constructor(\n  // private authService: AuthService,\n  firestore, fireAuth) {\n    this.firestore = firestore;\n    this.fireAuth = fireAuth;\n    this.fireAuth.onAuthStateChanged(user => {\n      if (user) {\n        this.signedInUser = new User({\n          _id: user.uid,\n          firstName: user.displayName,\n          email: user.email,\n          ownerId: user.uid\n        });\n        // console.log('Auth Changed', this.signedInUser);\n      } else {\n        this.signedInUser = null;\n      }\n    });\n  }\n  init() {}\n  /**\r\n   * Create user and authenticate him at once\r\n   * then save it in the users collection\r\n   * @param email\r\n   * @param password\r\n   */\n  createUserAccount(email, password) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this.fireAuth.createUserWithEmailAndPassword(email, password);\n        return yield _this.fireAuth.signInWithEmailAndPassword(email, password);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }\n  authenticate(provider, email, password) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        if (provider === 'emailPassword') {\n          return yield _this2.fireAuth.signInWithEmailAndPassword(email, password);\n        }\n        if (provider === 'google') {\n          return yield _this2.fireAuth.signInWithPopup(new firebase.auth.GoogleAuthProvider());\n        }\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }\n  /**\r\n   *\r\n   */\n  isLoggedIn() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this3.fireAuth.currentUser;\n      return user != null;\n    })();\n  }\n  logout() {\n    return this.fireAuth.signOut();\n  }\n  /**\r\n   * return the current signed in user (or null)\r\n   */\n  getSignedInUser() {\n    return this.signedInUser;\n  }\n  /**\r\n   * Insert, replace, merge or delete one document in the specified collection\r\n   * @param collection\r\n   * @param converter\r\n   * @param data\r\n   * @param id\r\n   * @param operation\r\n   * @param merge\r\n   */\n  upsertOneDoc(collection, data, id, operation = 'set', merge = false, converter) {\n    if (!id) {\n      if (operation === 'set') {\n        // Generate id for that insert\n        id = this.firestore.createId();\n        data['_id'] = id;\n      } else {\n        // Error: delete operation without specified id\n        throw new Error('No doc id specified for a delete operation');\n      }\n    }\n    if (operation === 'set') {\n      // add/update/merge\n      return this.firestore.collection(this.getCollectionWithConverter(collection, converter)).doc(id).set(data, {\n        merge: merge\n      });\n    } else {\n      // Delete\n      return this.firestore.collection(this.getCollectionWithConverter(collection, converter)).doc(id).delete();\n    }\n  }\n  /**\r\n   * Insert, replace, merge or delete many documents in the specified collection\r\n   * @param collection\r\n   * @param converter\r\n   * @param data In case of delete, contains an array of ids to delete\r\n   * @param operation\r\n   * @param merge\r\n   */\n  upsertManyDocs(collection, data, operation = 'set', merge = false, converter) {\n    // Get a new write batch\n    var batch = this.firestore.firestore.batch();\n    // Loop through the array to add them to the batch\n    data.forEach(item => {\n      let currentId;\n      if (!item._id) {\n        if (operation === 'set') {\n          // Generate id for that insert\n          item['_id'] = this.firestore.createId();\n          currentId = item['_id'];\n        } else {\n          // delete operation without specified id\n          // The item is the id to delete\n          currentId = item;\n        }\n      } else {\n        currentId = item._id;\n      }\n      const colRef = this.firestore.collection(this.getCollectionWithConverter(collection, converter)).doc(currentId);\n      if (operation === 'set') {\n        batch.set(colRef.ref, item, {\n          merge: merge\n        });\n      } else {\n        batch.delete(colRef.ref);\n      }\n    });\n    // Commit the batch\n    return batch.commit(); // .catch((err) => console.error(err));\n  }\n  /**\r\n   * @see https://github.com/angular/angularfire/issues/2291#issuecomment-600911909\r\n   *\r\n   * @param collName\r\n   * @param converter\r\n   */\n  getCollectionWithConverter(collName, converter) {\n    if (converter !== undefined) {\n      return firebase.firestore().collection(collName).withConverter(converter);\n    } else {\n      return firebase.firestore().collection(collName);\n    }\n  }\n  /**\r\n   * Return an observable on a collection\r\n   * @param collName\r\n   */\n  getQueryForCurrentUser(collName, sortField, sortDirection = 'asc') {\n    return this.firestore.collection(collName, ref => {\n      const query = ref.where('ownerId', '==', this.signedInUser._id);\n      if (sortField !== undefined) {\n        return query.orderBy(sortField, sortDirection);\n      } else {\n        return query;\n      }\n    });\n  }\n  /**\r\n   * Get data in a given range\r\n   * @param collName Collection name\r\n   * @param field\r\n   * @param start\r\n   * @param end\r\n   */\n  getDocsInRange(collName, field, start, end) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const querySnapshot = yield _this4.getQueryForCurrentUser(collName).ref.where(field, '>', start).where(field, '<', end).get();\n      const data = [];\n      querySnapshot.forEach(doc => {\n        data.push(doc.data());\n      });\n      return data;\n    })();\n  }\n  paginateQuery(collName, converter, sortField = 'lastName', sortOrder = 'asc', pageSize = 50, pageIndex = 1, filters) {\n    const colRef = this.firestore.firestore.collection(collName).withConverter(converter).where('ownerId', '==', this.signedInUser._id).orderBy(sortField, sortOrder).startAfter(pageSize * pageIndex).limit(pageSize);\n    if (filters.length) {\n      filters.forEach(filter => colRef.where(filter.field, filter.opStr, filter.value));\n    }\n  }\n  test() {\n    return this.firestore.collection('cities', ref => ref.where('capital', '==', true)).valueChanges();\n  }\n  static #_ = this.ɵfac = function FirebaseService_Factory(t) {\n    return new (t || FirebaseService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireAuth));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FirebaseService,\n    factory: FirebaseService.ɵfac\n  });\n}","map":{"version":3,"names":["firebase","User","FirebaseService","constructor","firestore","fireAuth","onAuthStateChanged","user","signedInUser","_id","uid","firstName","displayName","email","ownerId","init","createUserAccount","password","_this","_asyncToGenerator","createUserWithEmailAndPassword","signInWithEmailAndPassword","error","authenticate","provider","_this2","signInWithPopup","auth","GoogleAuthProvider","isLoggedIn","_this3","currentUser","logout","signOut","getSignedInUser","upsertOneDoc","collection","data","id","operation","merge","converter","createId","Error","getCollectionWithConverter","doc","set","delete","upsertManyDocs","batch","forEach","item","currentId","colRef","ref","commit","collName","undefined","withConverter","getQueryForCurrentUser","sortField","sortDirection","query","where","orderBy","getDocsInRange","field","start","end","_this4","querySnapshot","get","push","paginateQuery","sortOrder","pageSize","pageIndex","filters","startAfter","limit","length","filter","opStr","value","test","valueChanges","_","i0","ɵɵinject","i1","AngularFirestore","i2","AngularFireAuth","_2","factory","ɵfac"],"sources":["C:\\Users\\CSEG\\Desktop\\thassign\\src\\app\\core\\services\\firebase.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport {\r\n  AngularFirestore,\r\n  AngularFirestoreCollection,\r\n  CollectionReference,\r\n} from '@angular/fire/firestore';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nimport { User } from '@src/app/core/models/user/user.model';\r\n\r\n@Injectable()\r\nexport class FirebaseService {\r\n  signedInUser: User;\r\n\r\n  constructor(\r\n    // private authService: AuthService,\r\n    private firestore: AngularFirestore,\r\n    private fireAuth: AngularFireAuth\r\n  ) {\r\n    this.fireAuth.onAuthStateChanged((user: firebase.User) => {\r\n      if (user) {\r\n        this.signedInUser = new User({\r\n          _id: user.uid,\r\n          firstName: user.displayName,\r\n          email: user.email,\r\n          ownerId: user.uid,\r\n        });\r\n        // console.log('Auth Changed', this.signedInUser);\r\n      } else {\r\n        this.signedInUser = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  init() {}\r\n\r\n  /**\r\n   * Create user and authenticate him at once\r\n   * then save it in the users collection\r\n   * @param email\r\n   * @param password\r\n   */\r\n  async createUserAccount(\r\n    email: string,\r\n    password: string\r\n  ): Promise<firebase.auth.UserCredential> {\r\n    try {\r\n      await this.fireAuth.createUserWithEmailAndPassword(email, password);\r\n\r\n      return await this.fireAuth.signInWithEmailAndPassword(email, password);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async authenticate(provider: any, email?: string, password?: string) {\r\n    try {\r\n      if (provider === 'emailPassword') {\r\n        return await this.fireAuth.signInWithEmailAndPassword(email, password);\r\n      }\r\n\r\n      if (provider === 'google') {\r\n        return await this.fireAuth.signInWithPopup(\r\n          new firebase.auth.GoogleAuthProvider()\r\n        );\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  async isLoggedIn(): Promise<boolean> {\r\n    const user = await this.fireAuth.currentUser;\r\n\r\n    return user != null;\r\n  }\r\n\r\n  logout() {\r\n    return this.fireAuth.signOut();\r\n  }\r\n\r\n  /**\r\n   * return the current signed in user (or null)\r\n   */\r\n  getSignedInUser(): User {\r\n    return this.signedInUser;\r\n  }\r\n\r\n  /**\r\n   * Insert, replace, merge or delete one document in the specified collection\r\n   * @param collection\r\n   * @param converter\r\n   * @param data\r\n   * @param id\r\n   * @param operation\r\n   * @param merge\r\n   */\r\n  upsertOneDoc(\r\n    collection: string,\r\n    data: any,\r\n    id?: string,\r\n    operation: 'set' | 'delete' = 'set',\r\n    merge = false,\r\n    converter?: object\r\n  ): Promise<any> {\r\n    if (!id) {\r\n      if (operation === 'set') {\r\n        // Generate id for that insert\r\n        id = this.firestore.createId();\r\n        data['_id'] = id;\r\n      } else {\r\n        // Error: delete operation without specified id\r\n        throw new Error('No doc id specified for a delete operation');\r\n      }\r\n    }\r\n\r\n    if (operation === 'set') {\r\n      // add/update/merge\r\n      return this.firestore\r\n        .collection(this.getCollectionWithConverter(collection, converter))\r\n        .doc(id)\r\n        .set(data, { merge: merge });\r\n    } else {\r\n      // Delete\r\n      return this.firestore\r\n        .collection(this.getCollectionWithConverter(collection, converter))\r\n        .doc(id)\r\n        .delete();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Insert, replace, merge or delete many documents in the specified collection\r\n   * @param collection\r\n   * @param converter\r\n   * @param data In case of delete, contains an array of ids to delete\r\n   * @param operation\r\n   * @param merge\r\n   */\r\n  upsertManyDocs(\r\n    collection: string,\r\n    data: any[],\r\n    operation: 'set' | 'delete' = 'set',\r\n    merge = false,\r\n    converter?: object\r\n  ): Promise<any> {\r\n    // Get a new write batch\r\n    var batch = this.firestore.firestore.batch();\r\n\r\n    // Loop through the array to add them to the batch\r\n    data.forEach((item) => {\r\n      let currentId;\r\n\r\n      if (!item._id) {\r\n        if (operation === 'set') {\r\n          // Generate id for that insert\r\n          item['_id'] = this.firestore.createId();\r\n          currentId = item['_id'];\r\n        } else {\r\n          // delete operation without specified id\r\n          // The item is the id to delete\r\n          currentId = item;\r\n        }\r\n      } else {\r\n        currentId = item._id;\r\n      }\r\n\r\n      const colRef = this.firestore\r\n        .collection(this.getCollectionWithConverter(collection, converter))\r\n        .doc(currentId);\r\n\r\n      if (operation === 'set') {\r\n        batch.set(colRef.ref, item, { merge: merge });\r\n      } else {\r\n        batch.delete(colRef.ref);\r\n      }\r\n    });\r\n\r\n    // Commit the batch\r\n    return batch.commit(); // .catch((err) => console.error(err));\r\n  }\r\n\r\n  /**\r\n   * @see https://github.com/angular/angularfire/issues/2291#issuecomment-600911909\r\n   *\r\n   * @param collName\r\n   * @param converter\r\n   */\r\n  getCollectionWithConverter(collName, converter?: any): CollectionReference {\r\n    if (converter !== undefined) {\r\n      return firebase.firestore().collection(collName).withConverter(converter);\r\n    } else {\r\n      return firebase.firestore().collection(collName);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return an observable on a collection\r\n   * @param collName\r\n   */\r\n  getQueryForCurrentUser(\r\n    collName,\r\n    sortField?: string,\r\n    sortDirection: firebase.firestore.OrderByDirection = 'asc'\r\n  ): AngularFirestoreCollection<unknown> {\r\n    return this.firestore.collection(collName, (ref) => {\r\n      const query = ref.where('ownerId', '==', this.signedInUser._id);\r\n\r\n      if (sortField !== undefined) {\r\n        return query.orderBy(sortField, sortDirection);\r\n      } else {\r\n        return query;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get data in a given range\r\n   * @param collName Collection name\r\n   * @param field\r\n   * @param start\r\n   * @param end\r\n   */\r\n  async getDocsInRange(\r\n    collName: string,\r\n    field: string,\r\n    start: any,\r\n    end: any\r\n  ): Promise<any[]> {\r\n    const querySnapshot = await this.getQueryForCurrentUser(collName)\r\n      .ref.where(field, '>', start)\r\n      .where(field, '<', end)\r\n      .get();\r\n\r\n    const data = [];\r\n\r\n    querySnapshot.forEach((doc) => {\r\n      data.push(doc.data());\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  paginateQuery(\r\n    collName: string,\r\n    converter: firebase.firestore.FirestoreDataConverter<unknown>,\r\n    sortField: string = 'lastName',\r\n    sortOrder: firebase.firestore.OrderByDirection = 'asc',\r\n    pageSize: number = 50,\r\n    pageIndex: number = 1,\r\n    filters: Array<{\r\n      field: string;\r\n      opStr: firebase.firestore.WhereFilterOp;\r\n      value: any;\r\n    }>\r\n  ) {\r\n    const colRef = this.firestore.firestore\r\n      .collection(collName)\r\n      .withConverter(converter)\r\n      .where('ownerId', '==', this.signedInUser._id)\r\n      .orderBy(sortField, sortOrder)\r\n      .startAfter(pageSize * pageIndex)\r\n      .limit(pageSize);\r\n    if (filters.length) {\r\n      filters.forEach((filter) =>\r\n        colRef.where(filter.field, filter.opStr, filter.value)\r\n      );\r\n    }\r\n  }\r\n\r\n  test() {\r\n    return this.firestore\r\n      .collection('cities', (ref) => ref.where('capital', '==', true))\r\n      .valueChanges();\r\n  }\r\n}\r\n"],"mappings":";AAOA,OAAOA,QAAQ,MAAM,cAAc;AACnC,OAAO,oBAAoB;AAC3B,OAAO,eAAe;AAEtB,SAASC,IAAI,QAAQ,sCAAsC;;;;AAG3D,OAAM,MAAOC,eAAe;EAG1BC;EACE;EACQC,SAA2B,EAC3BC,QAAyB;IADzB,KAAAD,SAAS,GAATA,SAAS;IACT,KAAAC,QAAQ,GAARA,QAAQ;IAEhB,IAAI,CAACA,QAAQ,CAACC,kBAAkB,CAAEC,IAAmB,IAAI;MACvD,IAAIA,IAAI,EAAE;QACR,IAAI,CAACC,YAAY,GAAG,IAAIP,IAAI,CAAC;UAC3BQ,GAAG,EAAEF,IAAI,CAACG,GAAG;UACbC,SAAS,EAAEJ,IAAI,CAACK,WAAW;UAC3BC,KAAK,EAAEN,IAAI,CAACM,KAAK;UACjBC,OAAO,EAAEP,IAAI,CAACG;SACf,CAAC;QACF;OACD,MAAM;QACL,IAAI,CAACF,YAAY,GAAG,IAAI;;IAE5B,CAAC,CAAC;EACJ;EAEAO,IAAIA,CAAA,GAAI;EAER;;;;;;EAMMC,iBAAiBA,CACrBH,KAAa,EACbI,QAAgB;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAEhB,IAAI;QACF,MAAMD,KAAI,CAACb,QAAQ,CAACe,8BAA8B,CAACP,KAAK,EAAEI,QAAQ,CAAC;QAEnE,aAAaC,KAAI,CAACb,QAAQ,CAACgB,0BAA0B,CAACR,KAAK,EAAEI,QAAQ,CAAC;OACvE,CAAC,OAAOK,KAAK,EAAE;QACd,MAAMA,KAAK;;IACZ;EACH;EAEMC,YAAYA,CAACC,QAAa,EAAEX,KAAc,EAAEI,QAAiB;IAAA,IAAAQ,MAAA;IAAA,OAAAN,iBAAA;MACjE,IAAI;QACF,IAAIK,QAAQ,KAAK,eAAe,EAAE;UAChC,aAAaC,MAAI,CAACpB,QAAQ,CAACgB,0BAA0B,CAACR,KAAK,EAAEI,QAAQ,CAAC;;QAGxE,IAAIO,QAAQ,KAAK,QAAQ,EAAE;UACzB,aAAaC,MAAI,CAACpB,QAAQ,CAACqB,eAAe,CACxC,IAAI1B,QAAQ,CAAC2B,IAAI,CAACC,kBAAkB,EAAE,CACvC;;OAEJ,CAAC,OAAON,KAAK,EAAE;QACd,MAAMA,KAAK;;IACZ;EACH;EAEA;;;EAGMO,UAAUA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAX,iBAAA;MACd,MAAMZ,IAAI,SAASuB,MAAI,CAACzB,QAAQ,CAAC0B,WAAW;MAE5C,OAAOxB,IAAI,IAAI,IAAI;IAAC;EACtB;EAEAyB,MAAMA,CAAA;IACJ,OAAO,IAAI,CAAC3B,QAAQ,CAAC4B,OAAO,EAAE;EAChC;EAEA;;;EAGAC,eAAeA,CAAA;IACb,OAAO,IAAI,CAAC1B,YAAY;EAC1B;EAEA;;;;;;;;;EASA2B,YAAYA,CACVC,UAAkB,EAClBC,IAAS,EACTC,EAAW,EACXC,SAAA,GAA8B,KAAK,EACnCC,KAAK,GAAG,KAAK,EACbC,SAAkB;IAElB,IAAI,CAACH,EAAE,EAAE;MACP,IAAIC,SAAS,KAAK,KAAK,EAAE;QACvB;QACAD,EAAE,GAAG,IAAI,CAAClC,SAAS,CAACsC,QAAQ,EAAE;QAC9BL,IAAI,CAAC,KAAK,CAAC,GAAGC,EAAE;OACjB,MAAM;QACL;QACA,MAAM,IAAIK,KAAK,CAAC,4CAA4C,CAAC;;;IAIjE,IAAIJ,SAAS,KAAK,KAAK,EAAE;MACvB;MACA,OAAO,IAAI,CAACnC,SAAS,CAClBgC,UAAU,CAAC,IAAI,CAACQ,0BAA0B,CAACR,UAAU,EAAEK,SAAS,CAAC,CAAC,CAClEI,GAAG,CAACP,EAAE,CAAC,CACPQ,GAAG,CAACT,IAAI,EAAE;QAAEG,KAAK,EAAEA;MAAK,CAAE,CAAC;KAC/B,MAAM;MACL;MACA,OAAO,IAAI,CAACpC,SAAS,CAClBgC,UAAU,CAAC,IAAI,CAACQ,0BAA0B,CAACR,UAAU,EAAEK,SAAS,CAAC,CAAC,CAClEI,GAAG,CAACP,EAAE,CAAC,CACPS,MAAM,EAAE;;EAEf;EAEA;;;;;;;;EAQAC,cAAcA,CACZZ,UAAkB,EAClBC,IAAW,EACXE,SAAA,GAA8B,KAAK,EACnCC,KAAK,GAAG,KAAK,EACbC,SAAkB;IAElB;IACA,IAAIQ,KAAK,GAAG,IAAI,CAAC7C,SAAS,CAACA,SAAS,CAAC6C,KAAK,EAAE;IAE5C;IACAZ,IAAI,CAACa,OAAO,CAAEC,IAAI,IAAI;MACpB,IAAIC,SAAS;MAEb,IAAI,CAACD,IAAI,CAAC1C,GAAG,EAAE;QACb,IAAI8B,SAAS,KAAK,KAAK,EAAE;UACvB;UACAY,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC/C,SAAS,CAACsC,QAAQ,EAAE;UACvCU,SAAS,GAAGD,IAAI,CAAC,KAAK,CAAC;SACxB,MAAM;UACL;UACA;UACAC,SAAS,GAAGD,IAAI;;OAEnB,MAAM;QACLC,SAAS,GAAGD,IAAI,CAAC1C,GAAG;;MAGtB,MAAM4C,MAAM,GAAG,IAAI,CAACjD,SAAS,CAC1BgC,UAAU,CAAC,IAAI,CAACQ,0BAA0B,CAACR,UAAU,EAAEK,SAAS,CAAC,CAAC,CAClEI,GAAG,CAACO,SAAS,CAAC;MAEjB,IAAIb,SAAS,KAAK,KAAK,EAAE;QACvBU,KAAK,CAACH,GAAG,CAACO,MAAM,CAACC,GAAG,EAAEH,IAAI,EAAE;UAAEX,KAAK,EAAEA;QAAK,CAAE,CAAC;OAC9C,MAAM;QACLS,KAAK,CAACF,MAAM,CAACM,MAAM,CAACC,GAAG,CAAC;;IAE5B,CAAC,CAAC;IAEF;IACA,OAAOL,KAAK,CAACM,MAAM,EAAE,CAAC,CAAC;EACzB;EAEA;;;;;;EAMAX,0BAA0BA,CAACY,QAAQ,EAAEf,SAAe;IAClD,IAAIA,SAAS,KAAKgB,SAAS,EAAE;MAC3B,OAAOzD,QAAQ,CAACI,SAAS,EAAE,CAACgC,UAAU,CAACoB,QAAQ,CAAC,CAACE,aAAa,CAACjB,SAAS,CAAC;KAC1E,MAAM;MACL,OAAOzC,QAAQ,CAACI,SAAS,EAAE,CAACgC,UAAU,CAACoB,QAAQ,CAAC;;EAEpD;EAEA;;;;EAIAG,sBAAsBA,CACpBH,QAAQ,EACRI,SAAkB,EAClBC,aAAA,GAAqD,KAAK;IAE1D,OAAO,IAAI,CAACzD,SAAS,CAACgC,UAAU,CAACoB,QAAQ,EAAGF,GAAG,IAAI;MACjD,MAAMQ,KAAK,GAAGR,GAAG,CAACS,KAAK,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAACvD,YAAY,CAACC,GAAG,CAAC;MAE/D,IAAImD,SAAS,KAAKH,SAAS,EAAE;QAC3B,OAAOK,KAAK,CAACE,OAAO,CAACJ,SAAS,EAAEC,aAAa,CAAC;OAC/C,MAAM;QACL,OAAOC,KAAK;;IAEhB,CAAC,CAAC;EACJ;EAEA;;;;;;;EAOMG,cAAcA,CAClBT,QAAgB,EAChBU,KAAa,EACbC,KAAU,EACVC,GAAQ;IAAA,IAAAC,MAAA;IAAA,OAAAlD,iBAAA;MAER,MAAMmD,aAAa,SAASD,MAAI,CAACV,sBAAsB,CAACH,QAAQ,CAAC,CAC9DF,GAAG,CAACS,KAAK,CAACG,KAAK,EAAE,GAAG,EAAEC,KAAK,CAAC,CAC5BJ,KAAK,CAACG,KAAK,EAAE,GAAG,EAAEE,GAAG,CAAC,CACtBG,GAAG,EAAE;MAER,MAAMlC,IAAI,GAAG,EAAE;MAEfiC,aAAa,CAACpB,OAAO,CAAEL,GAAG,IAAI;QAC5BR,IAAI,CAACmC,IAAI,CAAC3B,GAAG,CAACR,IAAI,EAAE,CAAC;MACvB,CAAC,CAAC;MAEF,OAAOA,IAAI;IAAC;EACd;EAEAoC,aAAaA,CACXjB,QAAgB,EAChBf,SAA6D,EAC7DmB,SAAA,GAAoB,UAAU,EAC9Bc,SAAA,GAAiD,KAAK,EACtDC,QAAA,GAAmB,EAAE,EACrBC,SAAA,GAAoB,CAAC,EACrBC,OAIE;IAEF,MAAMxB,MAAM,GAAG,IAAI,CAACjD,SAAS,CAACA,SAAS,CACpCgC,UAAU,CAACoB,QAAQ,CAAC,CACpBE,aAAa,CAACjB,SAAS,CAAC,CACxBsB,KAAK,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAACvD,YAAY,CAACC,GAAG,CAAC,CAC7CuD,OAAO,CAACJ,SAAS,EAAEc,SAAS,CAAC,CAC7BI,UAAU,CAACH,QAAQ,GAAGC,SAAS,CAAC,CAChCG,KAAK,CAACJ,QAAQ,CAAC;IAClB,IAAIE,OAAO,CAACG,MAAM,EAAE;MAClBH,OAAO,CAAC3B,OAAO,CAAE+B,MAAM,IACrB5B,MAAM,CAACU,KAAK,CAACkB,MAAM,CAACf,KAAK,EAAEe,MAAM,CAACC,KAAK,EAAED,MAAM,CAACE,KAAK,CAAC,CACvD;;EAEL;EAEAC,IAAIA,CAAA;IACF,OAAO,IAAI,CAAChF,SAAS,CAClBgC,UAAU,CAAC,QAAQ,EAAGkB,GAAG,IAAKA,GAAG,CAACS,KAAK,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAC/DsB,YAAY,EAAE;EACnB;EAAC,QAAAC,CAAA,G;qBA1QUpF,eAAe,EAAAqF,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,gBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,eAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAf3F,eAAe;IAAA4F,OAAA,EAAf5F,eAAe,CAAA6F;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}