{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/CSEG/Desktop/thassign/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// import { Subject } from 'rxjs/Subject';\nimport { validate } from 'class-validator';\nimport { CommonService } from '@src/app/core/services/common.service';\nimport { User } from '@src/app/core/models/user/user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@src/app/core/services/backend.service\";\nimport * as i2 from \"@src/app/modules/users/user.service\";\n// import { TooltipComponent } from '@angular/material/tooltip';\nexport class AuthService extends CommonService {\n  constructor(backendService, userService) {\n    super();\n    this.backendService = backendService;\n    this.userService = userService;\n    // store the URL so we can redirect after logging in\n    this.redirectUrl = '';\n  }\n  isLoggedIn() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return yield _this.backendService.isLoggedIn();\n    })();\n  }\n  emailLogin(username, password) {\n    return this.backendService.authenticate('emailPassword', username, password);\n  }\n  googleLogin() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.backendService.authenticate('google');\n      const sUser = _this2.backendService.getSignedInUser();\n      // Store/update the user info on my side if not already done\n      if ((yield _this2.userService.getUserFromDb(sUser._id)) === null) {\n        yield _this2.userService.updateUser(sUser);\n      }\n    })();\n  }\n  refreshCustomData() {\n    return this.backendService.refreshCustomData();\n  }\n  register(email, password, repeatPassword, firstname, lastname) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      // console.log('User: ', {\n      //   email,\n      //   password,\n      //   repeatPassword,\n      //   firstname,\n      //   lastname,\n      // });\n      // Create user then authenticate him at one\n      try {\n        if (password !== repeatPassword) {\n          throw new Error('Password does not match');\n        }\n        password = password; // Apply the hash here\n        // save user data\n        const user = {\n          firstName: firstname,\n          lastName: lastname,\n          email: email,\n          hashedPassword: password,\n          userId: ''\n        };\n        const validationErrors = yield validate(user);\n        if (validationErrors.length > 0) {\n          throw validationErrors;\n        }\n        // Create user and authenticate at once to get his _id\n        const authedUser = yield _this3.backendService.createUserAccount(email, password);\n        // Save custom user data\n        yield _this3.userService.addUser(_this3.backendService.getSignedInUser());\n        // console.log('Logged :', this.backendService.getSignedInUser());\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }\n  /**\r\n   * Set logged in user infos\r\n   * @param user\r\n   */\n  setUser(user) {\n    this.backendService.signedInUser = new User(user);\n  }\n  /**\r\n   * Get logged in user infos\r\n   * @param user\r\n   */\n  getUser() {\n    return this.backendService.getSignedInUser();\n  }\n  me() {}\n  logout() {\n    this.backendService.logout();\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.BackendService), i0.ɵɵinject(i2.UserService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n}","map":{"version":3,"names":["validate","CommonService","User","AuthService","constructor","backendService","userService","redirectUrl","isLoggedIn","_this","_asyncToGenerator","emailLogin","username","password","authenticate","googleLogin","_this2","sUser","getSignedInUser","getUserFromDb","_id","updateUser","refreshCustomData","register","email","repeatPassword","firstname","lastname","_this3","Error","user","firstName","lastName","hashedPassword","userId","validationErrors","length","authedUser","createUserAccount","addUser","error","setUser","signedInUser","getUser","me","logout","_","i0","ɵɵinject","i1","BackendService","i2","UserService","_2","factory","ɵfac"],"sources":["C:\\Users\\CSEG\\Desktop\\thassign\\src\\app\\modules\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n// import { Subject } from 'rxjs/Subject';\r\n\r\nimport { validate } from 'class-validator';\r\nimport { BackendService } from '@src/app/core/services/backend.service';\r\nimport { CommonService } from '@src/app/core/services/common.service';\r\nimport { User } from '@src/app/core/models/user/user.model';\r\nimport { UserService } from '@src/app/modules/users/user.service';\r\n// import { TooltipComponent } from '@angular/material/tooltip';\r\n\r\n@Injectable()\r\nexport class AuthService extends CommonService<User> {\r\n  // store the URL so we can redirect after logging in\r\n  redirectUrl = '';\r\n\r\n  constructor(\r\n    protected backendService: BackendService,\r\n    protected userService: UserService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  async isLoggedIn(): Promise<boolean> {\r\n    return await this.backendService.isLoggedIn();\r\n  }\r\n\r\n  emailLogin(username: string, password: string): Promise<any> {\r\n    return this.backendService.authenticate(\r\n      'emailPassword',\r\n      username,\r\n      password\r\n    );\r\n  }\r\n\r\n  async googleLogin(): Promise<void> {\r\n    await this.backendService.authenticate('google');\r\n\r\n    const sUser = this.backendService.getSignedInUser();\r\n    // Store/update the user info on my side if not already done\r\n    if ((await this.userService.getUserFromDb(sUser._id)) === null) {\r\n      await this.userService.updateUser(sUser);\r\n    }\r\n  }\r\n\r\n  refreshCustomData() {\r\n    return this.backendService.refreshCustomData();\r\n  }\r\n\r\n  async register(\r\n    email: string,\r\n    password: string,\r\n    repeatPassword: string,\r\n    firstname?: string,\r\n    lastname?: string\r\n  ): Promise<void> {\r\n    // console.log('User: ', {\r\n    //   email,\r\n    //   password,\r\n    //   repeatPassword,\r\n    //   firstname,\r\n    //   lastname,\r\n    // });\r\n\r\n    // Create user then authenticate him at one\r\n    try {\r\n      if (password !== repeatPassword) {\r\n        throw new Error('Password does not match');\r\n      }\r\n\r\n      password = password; // Apply the hash here\r\n\r\n      // save user data\r\n      const user = {\r\n        firstName: firstname,\r\n        lastName: lastname,\r\n        email: email,\r\n        hashedPassword: password,\r\n        userId: '',\r\n      };\r\n\r\n      const validationErrors = await validate(user);\r\n\r\n      if (validationErrors.length > 0) {\r\n        throw validationErrors;\r\n      }\r\n\r\n      // Create user and authenticate at once to get his _id\r\n      const authedUser = await this.backendService.createUserAccount(\r\n        email,\r\n        password\r\n      );\r\n\r\n      // Save custom user data\r\n      await this.userService.addUser(this.backendService.getSignedInUser());\r\n\r\n      // console.log('Logged :', this.backendService.getSignedInUser());\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set logged in user infos\r\n   * @param user\r\n   */\r\n  setUser(user: any) {\r\n    this.backendService.signedInUser = new User(user);\r\n  }\r\n\r\n  /**\r\n   * Get logged in user infos\r\n   * @param user\r\n   */\r\n  getUser(): User {\r\n    return this.backendService.getSignedInUser();\r\n  }\r\n\r\n  me() {}\r\n\r\n  logout(): void {\r\n    this.backendService.logout();\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}