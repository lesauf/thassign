{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { UntypedFormControl, UntypedFormGroup } from '@angular/forms';\nimport { IsString, IsInt, IsObject, IsOptional } from 'class-validator';\nimport { DateTime } from 'luxon';\nexport class Assignment {\n  /**\r\n   * @todo Sanitize/clean the object passed (apply some rules,\r\n   * like women can not give public talks ...)\r\n   */\n  constructor(props, allParts, allUsers) {\n    /**\r\n     * Zero-based position of the assignment in its week\r\n     */\n    this.position = 1;\n    this.hall = 'main'; // \"main\" | \"second\" | \"third\"\n    if (props) {\n      // Converting week to Luxon date if not\n      if (!props['week']?.hasOwnProperty('isLuxonDateTime')) {\n        const refDate = DateTime.utc();\n        props['week'] = DateTime.fromISO(props['week'], {\n          zone: refDate.zone,\n          locale: refDate.locale\n        });\n      }\n      // Get part, assignee, assistant\n      if (typeof props['part'] === 'string' || typeof props['assignee'] === 'string') {\n        props = this.convertForeignKeys(props, allParts, allUsers);\n      }\n      Object.assign(this, props);\n    }\n  }\n  /**\r\n   * Replace part, assignee and assistant with model object.\r\n   * if coming from the DB. The form contain already the right Objects types\r\n   * @param props\r\n   * @param allParts\r\n   * @param allUsers\r\n   */\n  convertForeignKeys(props, allParts, allUsers) {\n    // Part: converted only if it is a string (coming from DB)\n    if (allParts && typeof props['part'] === 'string') {\n      const part = allParts.find(part => part.name === props['part']);\n      props['part'] = part ? part : '';\n    }\n    if (allUsers) {\n      // Assignee coming from DB\n      if (props['assignee'] && typeof props['assignee'] === 'string') {\n        const assignee = allUsers.find(user => user._id === props['assignee']);\n        props['assignee'] = assignee ? assignee : '';\n      }\n      // Assistant coming from DB\n      if (props['assistant'] && typeof props['assistant'] === 'string') {\n        const assistant = allUsers.find(user => user._id === props['assistant']);\n        props['assistant'] = assistant ? assistant : '';\n      }\n    }\n    return props;\n  }\n  /**\r\n   * Convert the user to the format accepted in the db\r\n   * for example, replace parts with their ids\r\n   */\n  prepareToSave() {\n    // Remove empty fields\n    if (!this.assistant) {\n      delete this.assistant;\n    }\n    if (!this.title) {\n      delete this.title;\n    }\n    if (!this.description) {\n      delete this.description;\n    }\n    if (!this.number) {\n      delete this.number;\n    }\n  }\n  toFormGroup() {\n    return new UntypedFormGroup({\n      week: new UntypedFormControl(this.week || ''),\n      part: new UntypedFormControl(this.part || ''),\n      assignee: new UntypedFormControl(this.assignee || ''),\n      hall: new UntypedFormControl(this.hall || ''),\n      ownerId: new UntypedFormControl(this.ownerId || ''),\n      position: new UntypedFormControl(this.position),\n      assistant: new UntypedFormControl(this.assistant || ''),\n      title: new UntypedFormControl(this.title || ''),\n      description: new UntypedFormControl(this.description || ''),\n      number: new UntypedFormControl(this.number || '')\n    });\n  }\n  /**\r\n   * Convert to a standard object for saving\r\n   */\n  toObject() {\n    return {\n      ...(this._id && {\n        _id: this._id\n      }),\n      ownerId: this.ownerId,\n      week: this.week.toFormat('yyyyMMdd'),\n      part: this.part.name,\n      position: this.position,\n      ...(this.assignee && {\n        assignee: this.assignee._id\n      }),\n      ...(this.assistant && {\n        assistant: this.assistant._id\n      }),\n      ...(this.title && {\n        title: this.title\n      }),\n      ...(this.description && {\n        description: this.description\n      }),\n      ...(this.hall && {\n        hall: this.hall\n      }),\n      ...(this.number && {\n        number: this.number\n      })\n    };\n  }\n  /**\r\n   * Create instances from JSON or array of JSON objects\r\n   *\r\n   * @param properties JSON object with properties\r\n   */\n  static fromJson(properties) {\n    if (properties instanceof Array) {\n      return properties.map(obj => new Assignment(obj));\n    } else {\n      return new Assignment(properties);\n    }\n  }\n  /**\r\n   * The unique identifier of this assignment in the form\r\n   */\n  get key() {\n    return this.week.toFormat('yyyyMMdd') + this.position;\n  }\n  set assignableUsers(users) {\n    this._assignableUsers = users;\n  }\n  get assignableUsers() {\n    return this._assignableUsers;\n  }\n  set assignableAssistants(users) {\n    this._assignableAssistants = users;\n  }\n  get assignableAssistants() {\n    return this._assignableAssistants;\n  }\n}\n__decorate([IsObject(), IsOptional()\n// Joi.string().alphanum()\n// tslint:disable-next-line: variable-name\n], Assignment.prototype, \"_id\", void 0);\n__decorate([IsObject(), IsOptional()], Assignment.prototype, \"week\", void 0);\n__decorate([IsString()], Assignment.prototype, \"part\", void 0);\n__decorate([IsString()], Assignment.prototype, \"assignee\", void 0);\n__decorate([IsString()], Assignment.prototype, \"ownerId\", void 0);\n__decorate([IsString(), IsOptional()], Assignment.prototype, \"assistant\", void 0);\n__decorate([IsInt()], Assignment.prototype, \"position\", void 0);\n__decorate([IsString(), IsOptional()], Assignment.prototype, \"title\", void 0);\n__decorate([IsString(), IsOptional()], Assignment.prototype, \"description\", void 0);\n__decorate([IsString(), IsOptional()], Assignment.prototype, \"hall\", void 0);\n__decorate([IsInt(), IsOptional()], Assignment.prototype, \"number\", void 0);","map":{"version":3,"names":["UntypedFormControl","UntypedFormGroup","IsString","IsInt","IsObject","IsOptional","DateTime","Assignment","constructor","props","allParts","allUsers","position","hall","hasOwnProperty","refDate","utc","fromISO","zone","locale","convertForeignKeys","Object","assign","part","find","name","assignee","user","_id","assistant","prepareToSave","title","description","number","toFormGroup","week","ownerId","toObject","toFormat","fromJson","properties","Array","map","obj","key","assignableUsers","users","_assignableUsers","assignableAssistants","_assignableAssistants","__decorate"],"sources":["C:\\Users\\CSEG\\Desktop\\thassign\\src\\app\\core\\models\\assignment\\assignment.model.ts"],"sourcesContent":["import { UntypedFormControl, UntypedFormGroup } from '@angular/forms';\r\nimport {\r\n  IsBoolean,\r\n  IsDate,\r\n  IsString,\r\n  IsInt,\r\n  IsObject,\r\n  IsOptional,\r\n} from 'class-validator';\r\nimport { DateTime } from 'luxon';\r\n\r\nimport { Part, ObjectId } from '@src/app/core/models/part/part.model';\r\nimport { User } from '@src/app/core/models/user/user.model';\r\nimport { exit } from 'process';\r\n\r\nexport class Assignment {\r\n  @IsObject()\r\n  @IsOptional()\r\n  // Joi.string().alphanum()\r\n  // tslint:disable-next-line: variable-name\r\n  _id: string;\r\n\r\n  @IsObject()\r\n  @IsOptional()\r\n  week: DateTime;\r\n\r\n  @IsString()\r\n  part: Part;\r\n\r\n  @IsString()\r\n  assignee: User;\r\n\r\n  @IsString()\r\n  ownerId: string;\r\n\r\n  @IsString()\r\n  @IsOptional()\r\n  assistant: User;\r\n\r\n  /**\r\n   * Zero-based position of the assignment in its week\r\n   */\r\n  @IsInt()\r\n  position = 1;\r\n\r\n  /**\r\n   * Theme of the assignment\r\n   */\r\n  @IsString()\r\n  @IsOptional()\r\n  title: string;\r\n\r\n  /**\r\n   * Description of the assignment\r\n   */\r\n  @IsString()\r\n  @IsOptional()\r\n  description: string;\r\n\r\n  @IsString()\r\n  @IsOptional()\r\n  hall = 'main'; // \"main\" | \"second\" | \"third\"\r\n\r\n  @IsInt()\r\n  @IsOptional()\r\n  number: number; // like public talk number\r\n\r\n  private _assignableUsers: User[];\r\n\r\n  private _assignableAssistants: User[];\r\n\r\n  /**\r\n   * @todo Sanitize/clean the object passed (apply some rules,\r\n   * like women can not give public talks ...)\r\n   */\r\n  constructor(props?: object, allParts?: Part[], allUsers?: User[]) {\r\n    if (props) {\r\n      // Converting week to Luxon date if not\r\n      if (!props['week']?.hasOwnProperty('isLuxonDateTime')) {\r\n        const refDate = DateTime.utc();\r\n\r\n        props['week'] = DateTime.fromISO(props['week'], {\r\n          zone: refDate.zone,\r\n          locale: refDate.locale,\r\n        });\r\n      }\r\n\r\n      // Get part, assignee, assistant\r\n      if (\r\n        typeof props['part'] === 'string' ||\r\n        typeof props['assignee'] === 'string'\r\n      ) {\r\n        props = this.convertForeignKeys(props, allParts, allUsers);\r\n      }\r\n      Object.assign(this, props);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Replace part, assignee and assistant with model object.\r\n   * if coming from the DB. The form contain already the right Objects types\r\n   * @param props\r\n   * @param allParts\r\n   * @param allUsers\r\n   */\r\n  convertForeignKeys(props: object, allParts?: Part[], allUsers?: User[]) {\r\n    // Part: converted only if it is a string (coming from DB)\r\n    if (allParts && typeof props['part'] === 'string') {\r\n      const part = allParts.find((part) => part.name === props['part']);\r\n      props['part'] = part ? part : '';\r\n    }\r\n\r\n    if (allUsers) {\r\n      // Assignee coming from DB\r\n      if (props['assignee'] && typeof props['assignee'] === 'string') {\r\n        const assignee = allUsers.find(\r\n          (user) => user._id === props['assignee']\r\n        );\r\n        props['assignee'] = assignee ? assignee : '';\r\n      }\r\n\r\n      // Assistant coming from DB\r\n      if (props['assistant'] && typeof props['assistant'] === 'string') {\r\n        const assistant = allUsers.find(\r\n          (user) => user._id === props['assistant']\r\n        );\r\n        props['assistant'] = assistant ? assistant : '';\r\n      }\r\n    }\r\n\r\n    return props;\r\n  }\r\n\r\n  /**\r\n   * Convert the user to the format accepted in the db\r\n   * for example, replace parts with their ids\r\n   */\r\n  prepareToSave(): void {\r\n    // Remove empty fields\r\n    if (!this.assistant) {\r\n      delete this.assistant;\r\n    }\r\n    if (!this.title) {\r\n      delete this.title;\r\n    }\r\n    if (!this.description) {\r\n      delete this.description;\r\n    }\r\n    if (!this.number) {\r\n      delete this.number;\r\n    }\r\n  }\r\n\r\n  toFormGroup() {\r\n    return new UntypedFormGroup({\r\n      week: new UntypedFormControl(this.week || ''),\r\n      part: new UntypedFormControl(this.part || ''),\r\n      assignee: new UntypedFormControl(this.assignee || ''),\r\n      hall: new UntypedFormControl(this.hall || ''),\r\n      ownerId: new UntypedFormControl(this.ownerId || ''),\r\n      position: new UntypedFormControl(this.position),\r\n      assistant: new UntypedFormControl(this.assistant || ''),\r\n      title: new UntypedFormControl(this.title || ''),\r\n      description: new UntypedFormControl(this.description || ''),\r\n      number: new UntypedFormControl(this.number || ''),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Convert to a standard object for saving\r\n   */\r\n  toObject() {\r\n    return {\r\n      ...(this._id && { _id: this._id }),\r\n      ownerId: this.ownerId,\r\n      week: this.week.toFormat('yyyyMMdd'),\r\n      part: this.part.name,\r\n      position: this.position,\r\n\r\n      ...(this.assignee && { assignee: this.assignee._id }),\r\n      ...(this.assistant && { assistant: this.assistant._id }),\r\n      ...(this.title && { title: this.title }),\r\n      ...(this.description && { description: this.description }),\r\n      ...(this.hall && { hall: this.hall }),\r\n      ...(this.number && { number: this.number }),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create instances from JSON or array of JSON objects\r\n   *\r\n   * @param properties JSON object with properties\r\n   */\r\n  public static fromJson(properties?: object) {\r\n    if (properties instanceof Array) {\r\n      return properties.map((obj) => new Assignment(obj));\r\n    } else {\r\n      return new Assignment(properties);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The unique identifier of this assignment in the form\r\n   */\r\n  get key() {\r\n    return this.week.toFormat('yyyyMMdd') + this.position;\r\n  }\r\n\r\n  set assignableUsers(users: User[]) {\r\n    this._assignableUsers = users;\r\n  }\r\n\r\n  get assignableUsers() {\r\n    return this._assignableUsers;\r\n  }\r\n\r\n  set assignableAssistants(users: User[]) {\r\n    this._assignableAssistants = users;\r\n  }\r\n\r\n  get assignableAssistants() {\r\n    return this._assignableAssistants;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}