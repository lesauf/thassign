{"ast":null,"code":"import { combineLatest } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@src/app/modules/auth/auth.service\";\nimport * as i2 from \"@src/app/modules/assignments/services/assignment.service\";\nimport * as i3 from \"@src/app/core/services/backend.service\";\nimport * as i4 from \"@src/app/core/services/part.service\";\nimport * as i5 from \"@src/app/core/services/program.service\";\nimport * as i6 from \"@src/app/modules/users/user.service\";\nexport class AppResolverService {\n  constructor(authService, assignmentService, backendService, partService, programService, userService) {\n    this.authService = authService;\n    this.assignmentService = assignmentService;\n    this.backendService = backendService;\n    this.partService = partService;\n    this.programService = programService;\n    this.userService = userService;\n  }\n  resolve(route, state) {\n    try {\n      // const data = await this.backendService.callFunction('getData');\n      // this.userService.destroy();\n      // const allParts = this.partService.storeParts(data?.parts);\n      // Set a listener on users collections\n      const users$ = this.backendService.getQueryForCurrentUser('users').valueChanges();\n      // Set a listener on programs collections\n      const programs$ = this.backendService.getQueryForCurrentUser('programs').valueChanges();\n      // Set a listener on assignments collections\n      // const assignments$ = this.backendService\n      //   .getQueryForCurrentUser('assignments', 'week')\n      //   .valueChanges();\n      combineLatest([users$, programs$]).subscribe(([users, programs]) => {\n        const parts = this.partService.getParts();\n        // Handle assignments\n        // COnvert first the users as User objects to populate the assignments\n        // const usersObjects = this.userService.createUser(\n        //   users,\n        //   parts\n        // ) as User[];\n        // Then store the users and pass them the converted assignments\n        // I know, a bit twisted, but it works\n        const allUsers = this.userService.storeUsers(users, this.partService.getParts());\n        // Store all programs (al all so the assignments in them)\n        const allPrograms = this.programService.storePrograms(programs, parts, allUsers);\n      });\n      return 'Data fetched';\n    } catch (error) {\n      throw error;\n      // return error.message;\n    }\n  }\n  static #_ = this.ɵfac = function AppResolverService_Factory(t) {\n    return new (t || AppResolverService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.AssignmentService), i0.ɵɵinject(i3.BackendService), i0.ɵɵinject(i4.PartService), i0.ɵɵinject(i5.ProgramService), i0.ɵɵinject(i6.UserService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppResolverService,\n    factory: AppResolverService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["combineLatest","AppResolverService","constructor","authService","assignmentService","backendService","partService","programService","userService","resolve","route","state","users$","getQueryForCurrentUser","valueChanges","programs$","subscribe","users","programs","parts","getParts","allUsers","storeUsers","allPrograms","storePrograms","error","_","i0","ɵɵinject","i1","AuthService","i2","AssignmentService","i3","BackendService","i4","PartService","i5","ProgramService","i6","UserService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\CSEG\\Desktop\\thassign\\src\\app\\app-resolver.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\nimport { Part } from '@src/app/core/models/part/part.model';\r\nimport { User } from '@src/app/core/models/user/user.model';\r\nimport { Observable, EMPTY, of, combineLatest } from 'rxjs';\r\nimport { PartService } from '@src/app/core/services/part.service';\r\nimport { UserService } from '@src/app/modules/users/user.service';\r\nimport { AssignmentService } from '@src/app/modules/assignments/services/assignment.service';\r\nimport { AssignmentConverter } from '@src/app/core/models/assignment/assignment.converter';\r\nimport { BackendService } from '@src/app/core/services/backend.service';\r\nimport { AuthService } from '@src/app/modules/auth/auth.service';\r\nimport { ProgramService } from '@src/app/core/services/program.service';\r\nimport { UserConverter } from '@src/app/core/models/user/user.converter';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AppResolverService  {\r\n  constructor(\r\n    protected authService: AuthService,\r\n    protected assignmentService: AssignmentService,\r\n    protected backendService: BackendService,\r\n    protected partService: PartService,\r\n    protected programService: ProgramService,\r\n    protected userService: UserService,\r\n  ) {}\r\n\r\n  resolve(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): string {\r\n    try {\r\n      // const data = await this.backendService.callFunction('getData');\r\n\r\n      // this.userService.destroy();\r\n      // const allParts = this.partService.storeParts(data?.parts);\r\n\r\n      // Set a listener on users collections\r\n      const users$ = this.backendService\r\n        .getQueryForCurrentUser('users')\r\n        .valueChanges();\r\n\r\n      // Set a listener on programs collections\r\n      const programs$ = this.backendService\r\n        .getQueryForCurrentUser('programs')\r\n        .valueChanges();\r\n\r\n      // Set a listener on assignments collections\r\n      // const assignments$ = this.backendService\r\n      //   .getQueryForCurrentUser('assignments', 'week')\r\n      //   .valueChanges();\r\n\r\n      combineLatest([users$, programs$]).subscribe(\r\n        ([users, programs]) => {\r\n          const parts = this.partService.getParts();\r\n\r\n          // Handle assignments\r\n          // COnvert first the users as User objects to populate the assignments\r\n          // const usersObjects = this.userService.createUser(\r\n          //   users,\r\n          //   parts\r\n          // ) as User[];\r\n\r\n          // Then store the users and pass them the converted assignments\r\n          // I know, a bit twisted, but it works\r\n          const allUsers = this.userService.storeUsers(\r\n            users,\r\n            this.partService.getParts()\r\n          );\r\n\r\n          // Store all programs (al all so the assignments in them)\r\n          const allPrograms = this.programService.storePrograms(\r\n            programs,\r\n            parts,\r\n            allUsers\r\n          );\r\n        }\r\n      );\r\n\r\n      return 'Data fetched';\r\n    } catch (error) {\r\n      throw error;\r\n      // return error.message;\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAMA,SAAgCA,aAAa,QAAQ,MAAM;;;;;;;;AAa3D,OAAM,MAAOC,kBAAkB;EAC7BC,YACYC,WAAwB,EACxBC,iBAAoC,EACpCC,cAA8B,EAC9BC,WAAwB,EACxBC,cAA8B,EAC9BC,WAAwB;IALxB,KAAAL,WAAW,GAAXA,WAAW;IACX,KAAAC,iBAAiB,GAAjBA,iBAAiB;IACjB,KAAAC,cAAc,GAAdA,cAAc;IACd,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,cAAc,GAAdA,cAAc;IACd,KAAAC,WAAW,GAAXA,WAAW;EACpB;EAEHC,OAAOA,CACLC,KAA6B,EAC7BC,KAA0B;IAE1B,IAAI;MACF;MAEA;MACA;MAEA;MACA,MAAMC,MAAM,GAAG,IAAI,CAACP,cAAc,CAC/BQ,sBAAsB,CAAC,OAAO,CAAC,CAC/BC,YAAY,EAAE;MAEjB;MACA,MAAMC,SAAS,GAAG,IAAI,CAACV,cAAc,CAClCQ,sBAAsB,CAAC,UAAU,CAAC,CAClCC,YAAY,EAAE;MAEjB;MACA;MACA;MACA;MAEAd,aAAa,CAAC,CAACY,MAAM,EAAEG,SAAS,CAAC,CAAC,CAACC,SAAS,CAC1C,CAAC,CAACC,KAAK,EAAEC,QAAQ,CAAC,KAAI;QACpB,MAAMC,KAAK,GAAG,IAAI,CAACb,WAAW,CAACc,QAAQ,EAAE;QAEzC;QACA;QACA;QACA;QACA;QACA;QAEA;QACA;QACA,MAAMC,QAAQ,GAAG,IAAI,CAACb,WAAW,CAACc,UAAU,CAC1CL,KAAK,EACL,IAAI,CAACX,WAAW,CAACc,QAAQ,EAAE,CAC5B;QAED;QACA,MAAMG,WAAW,GAAG,IAAI,CAAChB,cAAc,CAACiB,aAAa,CACnDN,QAAQ,EACRC,KAAK,EACLE,QAAQ,CACT;MACH,CAAC,CACF;MAED,OAAO,cAAc;KACtB,CAAC,OAAOI,KAAK,EAAE;MACd,MAAMA,KAAK;MACX;;EAEJ;EAAC,QAAAC,CAAA,G;qBAnEUzB,kBAAkB,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,iBAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,cAAA,GAAAP,EAAA,CAAAC,QAAA,CAAAO,EAAA,CAAAC,WAAA,GAAAT,EAAA,CAAAC,QAAA,CAAAS,EAAA,CAAAC,cAAA,GAAAX,EAAA,CAAAC,QAAA,CAAAW,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlBxC,kBAAkB;IAAAyC,OAAA,EAAlBzC,kBAAkB,CAAA0C,IAAA;IAAAC,UAAA,EAFjB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}