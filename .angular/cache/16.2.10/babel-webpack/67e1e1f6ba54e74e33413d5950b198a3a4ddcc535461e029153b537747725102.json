{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { ConfirmDialogComponent } from '@src/app/shared/components/confirm-dialog/confirm-dialog.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/legacy-dialog\";\n/**\r\n * Open a dialog to confirm the action\r\n */\nexport class ConfirmDirective {\n  constructor(el, _matDialog) {\n    this.el = el;\n    this._matDialog = _matDialog;\n    this.confirmed = new EventEmitter();\n  }\n  onMouseEnter() {\n    this.openConfirmationDialog();\n  }\n  openConfirmationDialog() {\n    // First display the confirmation dialog\n    const dialogRef = this._matDialog.open(ConfirmDialogComponent, {\n      data: {\n        confirmationTitle: this.title,\n        confirmationMessage: this.message,\n        confirmationCancelButton: this.cancelButton,\n        confirmationConfirmButton: this.confirmButton\n      }\n    });\n    // Then emit confirmed event if delete confirmed\n    dialogRef.afterClosed().subscribe(result => {\n      if (result !== undefined && result.isConfirmed) {\n        this.confirmed.emit(true);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function ConfirmDirective_Factory(t) {\n    return new (t || ConfirmDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.MatLegacyDialog));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ConfirmDirective,\n    selectors: [[\"\", \"appConfirm\", \"\"]],\n    hostBindings: function ConfirmDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function ConfirmDirective_click_HostBindingHandler() {\n          return ctx.onMouseEnter();\n        });\n      }\n    },\n    inputs: {\n      title: [\"appConfirm\", \"title\"],\n      message: \"message\",\n      cancelButton: \"cancelButton\",\n      confirmButton: \"confirmButton\"\n    },\n    outputs: {\n      confirmed: \"confirmed\"\n    }\n  });\n}","map":{"version":3,"names":["EventEmitter","ConfirmDialogComponent","ConfirmDirective","constructor","el","_matDialog","confirmed","onMouseEnter","openConfirmationDialog","dialogRef","open","data","confirmationTitle","title","confirmationMessage","message","confirmationCancelButton","cancelButton","confirmationConfirmButton","confirmButton","afterClosed","subscribe","result","undefined","isConfirmed","emit","_","i0","ɵɵdirectiveInject","ElementRef","i1","MatLegacyDialog","_2","selectors","hostBindings","ConfirmDirective_HostBindings","rf","ctx"],"sources":["C:\\Users\\CSEG\\Desktop\\thassign\\src\\app\\shared\\directives\\confirm.directive.ts"],"sourcesContent":["import {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  Output\r\n} from '@angular/core';\r\nimport { MatLegacyDialog as MatDialog } from '@angular/material/legacy-dialog';\r\nimport { ConfirmDialogComponent } from '@src/app/shared/components/confirm-dialog/confirm-dialog.component';\r\n\r\n@Directive({\r\n  selector: '[appConfirm]'\r\n})\r\n/**\r\n * Open a dialog to confirm the action\r\n */\r\nexport class ConfirmDirective {\r\n  /**\r\n   * Dialog title and directive selector\r\n   */\r\n  @Input('appConfirm') title: string;\r\n  @Input() message: string;\r\n  @Input() cancelButton: string;\r\n  @Input() confirmButton: string;\r\n\r\n  @Output()\r\n  confirmed: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  constructor(private el: ElementRef, private _matDialog: MatDialog) {}\r\n\r\n  @HostListener('click') onMouseEnter() {\r\n    this.openConfirmationDialog();\r\n  }\r\n\r\n  private openConfirmationDialog() {\r\n    // First display the confirmation dialog\r\n    const dialogRef = this._matDialog.open(ConfirmDialogComponent, {\r\n      data: {\r\n        confirmationTitle: this.title,\r\n        confirmationMessage: this.message,\r\n        confirmationCancelButton: this.cancelButton,\r\n        confirmationConfirmButton: this.confirmButton\r\n      }\r\n    });\r\n    // Then emit confirmed event if delete confirmed\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result !== undefined && result.isConfirmed) {\r\n        this.confirmed.emit(true);\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAGEA,YAAY,QAIP,eAAe;AAEtB,SAASC,sBAAsB,QAAQ,oEAAoE;;;AAK3G;;;AAGA,OAAM,MAAOC,gBAAgB;EAY3BC,YAAoBC,EAAc,EAAUC,UAAqB;IAA7C,KAAAD,EAAE,GAAFA,EAAE;IAAsB,KAAAC,UAAU,GAAVA,UAAU;IAFtD,KAAAC,SAAS,GAA0B,IAAIN,YAAY,EAAW;EAEM;EAE7CO,YAAYA,CAAA;IACjC,IAAI,CAACC,sBAAsB,EAAE;EAC/B;EAEQA,sBAAsBA,CAAA;IAC5B;IACA,MAAMC,SAAS,GAAG,IAAI,CAACJ,UAAU,CAACK,IAAI,CAACT,sBAAsB,EAAE;MAC7DU,IAAI,EAAE;QACJC,iBAAiB,EAAE,IAAI,CAACC,KAAK;QAC7BC,mBAAmB,EAAE,IAAI,CAACC,OAAO;QACjCC,wBAAwB,EAAE,IAAI,CAACC,YAAY;QAC3CC,yBAAyB,EAAE,IAAI,CAACC;;KAEnC,CAAC;IACF;IACAV,SAAS,CAACW,WAAW,EAAE,CAACC,SAAS,CAACC,MAAM,IAAG;MACzC,IAAIA,MAAM,KAAKC,SAAS,IAAID,MAAM,CAACE,WAAW,EAAE;QAC9C,IAAI,CAAClB,SAAS,CAACmB,IAAI,CAAC,IAAI,CAAC;;IAE7B,CAAC,CAAC;EACJ;EAAC,QAAAC,CAAA,G;qBAlCUxB,gBAAgB,EAAAyB,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA,GAAAF,EAAA,CAAAC,iBAAA,CAAAE,EAAA,CAAAC,eAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAhB9B,gBAAgB;IAAA+B,SAAA;IAAAC,YAAA,WAAAC,8BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;;iBAAhBC,GAAA,CAAA9B,YAAA,EAAc;QAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}