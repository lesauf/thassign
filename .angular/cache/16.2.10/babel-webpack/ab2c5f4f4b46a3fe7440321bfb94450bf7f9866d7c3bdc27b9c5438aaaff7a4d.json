{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/CSEG/Desktop/thassign/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Book } from 'epubjs';\nimport { DateTime } from 'luxon';\nimport { CommonService } from '@src/app/core/services/common.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@src/app/core/services/message.service\";\nexport class EpubService extends CommonService {\n  constructor(messageService) {\n    super();\n    this.messageService = messageService;\n    this.epubFilename = '';\n    this.epubPath = '/assets/epubs/';\n    /**\r\n     * English program coming straight from the epub.\r\n     * It will be used to create all the other programs\r\n     */\n    this.referencePrograms = new Array();\n  }\n  /**\r\n   * Extract the meeting parts from the epub\r\n   * @param epubFilename\r\n   */\n  getProgramsFromEpub(epubFilename, ownerId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.epubFilename = epubFilename;\n      _this.getMonthFromEpubFilename(epubFilename);\n      _this.book = new Book();\n      // this.book = ePub(this.epubPath + epubFilename + '.epub');\n      try {\n        yield _this.book.open(_this.epubPath + epubFilename + '.epub');\n      } catch (error) {\n        if (error.status === 404) {\n          // No epub, notify the dev\n          _this.messageService.log('Please provide the epub for ' + epubFilename);\n        } else {\n          _this.messageService.log(error.message, error);\n        }\n        _this.messageService.presentToast('Sorry, you cannot create the program for now: ' + _this.epubMonth);\n        // Return empty array as reference program\n        return [];\n      }\n      // console.log('Book', this.book);\n      // Extract the programs\n      const referencePrograms = yield _this.extractMwbPrograms(ownerId);\n      // console.log('Ref Program', referencePrograms);\n      return referencePrograms;\n    })();\n  }\n  /**\r\n   * Load the sections/pages of the epub\r\n   *\r\n   */\n  getXmlOfSections() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return yield Promise.all(_this2.book.spine['spineItems'].map(item => item.load(_this2.book.load.bind(_this2.book)).then(xml => {\n        return {\n          index: item.index,\n          xml: xml\n        };\n      }).finally(item.unload.bind(item)))).then(results => Promise.resolve(results));\n    })();\n  }\n  /**\r\n   * Get the list of parts for every week in the month\r\n   * from the epub\r\n   */\n  extractMwbPrograms(ownerId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const referencePrograms = [];\n      // Fetch book\n      yield _this3.book.ready;\n      const weekPages = yield _this3.getXmlOfSections();\n      // console.log('weekPages', weekPages);\n      // Store the current week\n      let currentWeek;\n      weekPages.forEach(weekPage => {\n        // We look for the sections/pages containing the referenceProgram\n        const ministrySection = weekPage.xml.getElementsByClassName('mwbHeadingIcon and ministry--rev2021');\n        if (ministrySection.length !== 0) {\n          // console.log(ministrySection);\n          // Get the week\n          const weekString = weekPage.xml.querySelector(\"[id='p1']\").lastElementChild.innerHTML;\n          const weekStringFull = _this3.convertWeekToDateString(weekString);\n          if (weekStringFull !== null) {\n            if (currentWeek === undefined) {\n              // First week\n              currentWeek = DateTime.fromISO(weekStringFull);\n            } else {\n              // subsequent weeks just get calculated\n              // so that they can cross the months easily\n              currentWeek = currentWeek.plus({\n                days: 7\n              });\n            }\n            // ------------------------------------\n            // Prepare the Program object         -\n            // ------------------------------------\n            const referenceProgram = {\n              // referenceProgram reference key is week + userId\n              _id: currentWeek.toFormat('yyyyMMdd') + ownerId,\n              meeting: 'midweek',\n              week: currentWeek.toFormat('yyyyMMdd'),\n              month: currentWeek.toFormat('yyyyMM'),\n              // xhtml: weekPage.xml.toString(),\n              // sectionIndex: weekPage.index,\n              assignments: [],\n              ownerId: ownerId\n            };\n            // The details for assignments are in ul.noMarker tags\n            // We do not need them\n            const parts = weekPage.xml.querySelectorAll('ul > li > p'); // 'ul:not(.noMarker) > li > p'\n            // console.log('Parts', parts);\n            for (let index = 0; index < parts.length; index++) {\n              // get the meeting section of this part\n              let partSection = 'chairman';\n              const partSectionDiv = parts.item(index).parentElement.parentElement.parentElement.parentElement.getElementsByTagName('div');\n              // console.log('partSectionDiv: ', partSectionDiv);\n              if (partSectionDiv.length) {\n                const classes = partSectionDiv.item(0).getAttribute('class');\n                partSection = classes.substring(classes.lastIndexOf(' '), classes.indexOf('-')).trim();\n                // console.log('Classes: ', partSection);\n              }\n\n              const partTitle = _this3.extractPartTitleAndDescription(parts.item(index).textContent);\n              referenceProgram.assignments.push({\n                meeting: 'midweek',\n                week: currentWeek.toFormat('yyyyMMdd'),\n                position: index,\n                partSection,\n                ownerId: '',\n                assignee: '',\n                title: partTitle[0].trim(),\n                // part with a description (separated by column :)\n                ...(partTitle.length > 1 ? {\n                  description: partTitle[1].trim()\n                } : null)\n              });\n            }\n            referencePrograms.push(referenceProgram);\n          }\n        }\n      });\n      return referencePrograms;\n    })();\n  }\n  /**\r\n   * The part title is separated from the description with a column,\r\n   * or an opening bracket so we can split and extract the description\r\n   * @param partText Coming from the epub part description\r\n   * @param separators list of known separators\r\n   */\n  extractPartTitleAndDescription(partText, separators = [':', '(']) {\n    let fsPos = 500; // great value so that the first separator update it\n    let firstSeparator = separators[0];\n    separators.forEach(sep => {\n      const sIndex = partText.indexOf(sep);\n      if (sIndex !== -1 && fsPos > sIndex) {\n        // Separator found before the default\n        firstSeparator = sep;\n        fsPos = sIndex;\n      }\n    });\n    // get the position of each separator and then keep the first appearing\n    // return partText.split(firstSeparator);\n    return [partText.substr(0, fsPos), partText.substr(fsPos)];\n  }\n  /**\r\n   * Convert the first day of a week string to\r\n   * a complete date string of type yyyymmdd\r\n   * @param week\r\n   */\n  convertWeekToDateString(weekString, separatorSameMonth = '-', separatorDiffMonth = '–') {\n    let firstPart;\n    let separatorIndex = weekString.indexOf(separatorSameMonth);\n    if (separatorIndex !== -1) {\n      // week start and end in the same month\n      firstPart = weekString.substr(0, separatorIndex);\n    } else {\n      // week start and end in differents month\n      separatorIndex = weekString.indexOf(separatorDiffMonth);\n      firstPart = weekString.substr(0, separatorIndex);\n    }\n    // Extract the day number from the string\n    var matches = firstPart.match(/(\\d+)/);\n    if (matches) {\n      // If day number is only one character convert it to 2 char\n      const dayAsNumber = parseInt(matches[0]);\n      const day = matches[0].length === 1 ? '0' + dayAsNumber : dayAsNumber;\n      return this.epubMonth + day;\n    } else {\n      console.log('No day in the week string provided');\n      return null;\n    }\n  }\n  /**\r\n   * Extract the month from the epub filename\r\n   * ex: mwb_F_201908 => 201908\r\n   */\n  getMonthFromEpubFilename(epubFilename, pubCode = 'mwb') {\n    if (epubFilename === undefined) {\n      epubFilename = this.epubFilename;\n    }\n    this.epubLangCode = this.getLanguageFromEpubFilename(epubFilename, pubCode);\n    const startMonth = epubFilename.lastIndexOf(pubCode + '_' + this.epubLangCode + '_') + pubCode.length + this.epubLangCode.length + 2;\n    this.epubMonth = epubFilename.substring(startMonth);\n    // const month = epubFilename.substring(startMonth);\n    // UTC date used here\n    // const refDate = DateTime.utc();\n    // this.epubMonth = DateTime.fromISO(month, {\n    //   zone: refDate.zone,\n    //   locale: refDate.locale,\n    // });\n  }\n  /**\r\n   * Extract the month from the epub filename\r\n   * ex: mwb_F_201908 => F\r\n   */\n  getLanguageFromEpubFilename(epubFilename, pubCode = 'mwb') {\n    if (epubFilename === undefined) {\n      epubFilename = this.epubFilename;\n    }\n    const startLanguage = epubFilename.lastIndexOf(pubCode + '_') + pubCode.length + 1;\n    const endLanguage = epubFilename.length - 7;\n    return epubFilename.substring(startLanguage, endLanguage);\n  }\n  /**\r\n   * Searching the entire book\r\n   * @see https://github.com/futurepress/epub.js/wiki/Tips-and-Tricks-(v0.3)#searching-the-entire-book\r\n   */\n  search(q) {\n    return Promise.all(this.book.spine['spineItems'].map(item => item.load(this.book.load.bind(this.book)).then(item.find.bind(item, q)).finally(item.unload.bind(item)))).then(results => Promise.resolve([].concat.apply([], results)));\n  }\n  static #_ = this.ɵfac = function EpubService_Factory(t) {\n    return new (t || EpubService)(i0.ɵɵinject(i1.MessageService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EpubService,\n    factory: EpubService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Book","DateTime","CommonService","EpubService","constructor","messageService","epubFilename","epubPath","referencePrograms","Array","getProgramsFromEpub","ownerId","_this","_asyncToGenerator","getMonthFromEpubFilename","book","open","error","status","log","message","presentToast","epubMonth","extractMwbPrograms","getXmlOfSections","_this2","Promise","all","spine","map","item","load","bind","then","xml","index","finally","unload","results","resolve","_this3","ready","weekPages","currentWeek","forEach","weekPage","ministrySection","getElementsByClassName","length","weekString","querySelector","lastElementChild","innerHTML","weekStringFull","convertWeekToDateString","undefined","fromISO","plus","days","referenceProgram","_id","toFormat","meeting","week","month","assignments","parts","querySelectorAll","partSection","partSectionDiv","parentElement","getElementsByTagName","classes","getAttribute","substring","lastIndexOf","indexOf","trim","partTitle","extractPartTitleAndDescription","textContent","push","position","assignee","title","description","partText","separators","fsPos","firstSeparator","sep","sIndex","substr","separatorSameMonth","separatorDiffMonth","firstPart","separatorIndex","matches","match","dayAsNumber","parseInt","day","console","pubCode","epubLangCode","getLanguageFromEpubFilename","startMonth","startLanguage","endLanguage","search","q","find","concat","apply","_","i0","ɵɵinject","i1","MessageService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\CSEG\\Desktop\\thassign\\src\\app\\core\\services\\epub.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Book, Rendition } from 'epubjs';\r\nimport { DateTime } from 'luxon';\r\n\r\nimport { CommonService } from '@src/app/core/services/common.service';\r\nimport { MessageService } from '@src/app/core/services/message.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class EpubService extends CommonService<any> {\r\n  epubFilename = '';\r\n\r\n  public epubPath = '/assets/epubs/';\r\n\r\n  public book: Book;\r\n\r\n  public rendition: Rendition;\r\n\r\n  /**\r\n   * English program coming straight from the epub.\r\n   * It will be used to create all the other programs\r\n   */\r\n  public referencePrograms: Array<any> = new Array();\r\n\r\n  /**\r\n   * Language of the book,\r\n   * taken from the filename\r\n   */\r\n  public epubLangCode: string;\r\n\r\n  /**\r\n   * Month of the epub,\r\n   * taken from the filename\r\n   */\r\n  public epubMonth: string;\r\n\r\n  constructor(protected messageService: MessageService) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Extract the meeting parts from the epub\r\n   * @param epubFilename\r\n   */\r\n  async getProgramsFromEpub(epubFilename: string, ownerId: string) {\r\n    this.epubFilename = epubFilename;\r\n    this.getMonthFromEpubFilename(epubFilename);\r\n\r\n    this.book = new Book();\r\n    // this.book = ePub(this.epubPath + epubFilename + '.epub');\r\n    try {\r\n      await this.book.open(this.epubPath + epubFilename + '.epub');\r\n    } catch (error) {\r\n      if (error.status === 404) {\r\n        // No epub, notify the dev\r\n        this.messageService.log('Please provide the epub for ' + epubFilename);\r\n      } else {\r\n        this.messageService.log(error.message, error);\r\n      }\r\n      this.messageService.presentToast(\r\n        'Sorry, you cannot create the program for now: ' + this.epubMonth\r\n      );\r\n      // Return empty array as reference program\r\n      return [];\r\n    }\r\n    // console.log('Book', this.book);\r\n    // Extract the programs\r\n    const referencePrograms = await this.extractMwbPrograms(ownerId);\r\n    // console.log('Ref Program', referencePrograms);\r\n\r\n    return referencePrograms;\r\n  }\r\n\r\n  /**\r\n   * Load the sections/pages of the epub\r\n   *\r\n   */\r\n  async getXmlOfSections(): Promise<any> {\r\n    return await Promise.all(\r\n      this.book.spine['spineItems'].map((item) =>\r\n        item\r\n          .load(this.book.load.bind(this.book))\r\n          .then((xml) => {\r\n            return { index: item.index, xml: xml };\r\n          })\r\n          .finally(item.unload.bind(item))\r\n      )\r\n    ).then((results) => Promise.resolve(results));\r\n  }\r\n\r\n  /**\r\n   * Get the list of parts for every week in the month\r\n   * from the epub\r\n   */\r\n  async extractMwbPrograms(ownerId: string) {\r\n    const referencePrograms = [];\r\n\r\n    // Fetch book\r\n    await this.book.ready;\r\n\r\n    const weekPages = await this.getXmlOfSections();\r\n    // console.log('weekPages', weekPages);\r\n    // Store the current week\r\n    let currentWeek: DateTime;\r\n\r\n    weekPages.forEach((weekPage) => {\r\n      // We look for the sections/pages containing the referenceProgram\r\n      const ministrySection = weekPage.xml.getElementsByClassName(\r\n        'mwbHeadingIcon and ministry--rev2021'\r\n      );\r\n\r\n      if (ministrySection.length !== 0) {\r\n        // console.log(ministrySection);\r\n        // Get the week\r\n        const weekString =\r\n          weekPage.xml.querySelector(\"[id='p1']\").lastElementChild.innerHTML;\r\n\r\n        const weekStringFull = this.convertWeekToDateString(weekString);\r\n\r\n        if (weekStringFull !== null) {\r\n          if (currentWeek === undefined) {\r\n            // First week\r\n            currentWeek = DateTime.fromISO(weekStringFull);\r\n          } else {\r\n            // subsequent weeks just get calculated\r\n            // so that they can cross the months easily\r\n            currentWeek = currentWeek.plus({ days: 7 });\r\n          }\r\n\r\n          // ------------------------------------\r\n          // Prepare the Program object         -\r\n          // ------------------------------------\r\n          const referenceProgram = {\r\n            // referenceProgram reference key is week + userId\r\n            _id: currentWeek.toFormat('yyyyMMdd') + ownerId,\r\n            meeting: 'midweek',\r\n            week: currentWeek.toFormat('yyyyMMdd'),\r\n            month: currentWeek.toFormat('yyyyMM'), // also store the month\r\n            // xhtml: weekPage.xml.toString(),\r\n            // sectionIndex: weekPage.index,\r\n            assignments: [],\r\n            ownerId: ownerId,\r\n          };\r\n\r\n          // The details for assignments are in ul.noMarker tags\r\n          // We do not need them\r\n          const parts: NodeList = weekPage.xml.querySelectorAll('ul > li > p'); // 'ul:not(.noMarker) > li > p'\r\n          // console.log('Parts', parts);\r\n          for (let index = 0; index < parts.length; index++) {\r\n            // get the meeting section of this part\r\n            let partSection = 'chairman';\r\n            const partSectionDiv = parts\r\n              .item(index)\r\n              .parentElement.parentElement.parentElement.parentElement.getElementsByTagName(\r\n                'div'\r\n              );\r\n            // console.log('partSectionDiv: ', partSectionDiv);\r\n            if (partSectionDiv.length) {\r\n              const classes = partSectionDiv.item(0).getAttribute('class');\r\n\r\n              partSection = classes\r\n                .substring(classes.lastIndexOf(' '), classes.indexOf('-'))\r\n                .trim();\r\n              // console.log('Classes: ', partSection);\r\n            }\r\n\r\n            const partTitle: string[] = this.extractPartTitleAndDescription(\r\n              parts.item(index).textContent\r\n            );\r\n\r\n            referenceProgram.assignments.push({\r\n              meeting: 'midweek',\r\n              week: currentWeek.toFormat('yyyyMMdd'),\r\n              position: index,\r\n              partSection,\r\n              ownerId: '',\r\n              assignee: '',\r\n              title: partTitle[0].trim(),\r\n              // part with a description (separated by column :)\r\n              ...(partTitle.length > 1\r\n                ? { description: partTitle[1].trim() }\r\n                : null),\r\n            });\r\n          }\r\n\r\n          referencePrograms.push(referenceProgram);\r\n        }\r\n      }\r\n    });\r\n\r\n    return referencePrograms;\r\n  }\r\n\r\n  /**\r\n   * The part title is separated from the description with a column,\r\n   * or an opening bracket so we can split and extract the description\r\n   * @param partText Coming from the epub part description\r\n   * @param separators list of known separators\r\n   */\r\n  extractPartTitleAndDescription(\r\n    partText: string,\r\n    separators = [':', '(']\r\n  ): string[] {\r\n    let fsPos = 500; // great value so that the first separator update it\r\n    let firstSeparator = separators[0];\r\n    separators.forEach((sep) => {\r\n      const sIndex = partText.indexOf(sep);\r\n      if (sIndex !== -1 && fsPos > sIndex) {\r\n        // Separator found before the default\r\n        firstSeparator = sep;\r\n        fsPos = sIndex;\r\n      }\r\n    });\r\n\r\n    // get the position of each separator and then keep the first appearing\r\n    // return partText.split(firstSeparator);\r\n    return [partText.substr(0, fsPos), partText.substr(fsPos)];\r\n  }\r\n\r\n  /**\r\n   * Convert the first day of a week string to\r\n   * a complete date string of type yyyymmdd\r\n   * @param week\r\n   */\r\n  convertWeekToDateString(\r\n    weekString: string,\r\n    separatorSameMonth = '-',\r\n    separatorDiffMonth = '–'\r\n  ) {\r\n    let firstPart: string;\r\n\r\n    let separatorIndex = weekString.indexOf(separatorSameMonth);\r\n\r\n    if (separatorIndex !== -1) {\r\n      // week start and end in the same month\r\n      firstPart = weekString.substr(0, separatorIndex);\r\n    } else {\r\n      // week start and end in differents month\r\n      separatorIndex = weekString.indexOf(separatorDiffMonth);\r\n      firstPart = weekString.substr(0, separatorIndex);\r\n    }\r\n\r\n    // Extract the day number from the string\r\n    var matches = firstPart.match(/(\\d+)/);\r\n\r\n    if (matches) {\r\n      // If day number is only one character convert it to 2 char\r\n      const dayAsNumber = parseInt(matches[0]);\r\n      const day = matches[0].length === 1 ? '0' + dayAsNumber : dayAsNumber;\r\n\r\n      return this.epubMonth + day;\r\n    } else {\r\n      console.log('No day in the week string provided');\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract the month from the epub filename\r\n   * ex: mwb_F_201908 => 201908\r\n   */\r\n  getMonthFromEpubFilename(epubFilename?: string, pubCode: string = 'mwb') {\r\n    if (epubFilename === undefined) {\r\n      epubFilename = this.epubFilename;\r\n    }\r\n\r\n    this.epubLangCode = this.getLanguageFromEpubFilename(epubFilename, pubCode);\r\n\r\n    const startMonth =\r\n      epubFilename.lastIndexOf(pubCode + '_' + this.epubLangCode + '_') +\r\n      pubCode.length +\r\n      this.epubLangCode.length +\r\n      2;\r\n\r\n    this.epubMonth = epubFilename.substring(startMonth);\r\n\r\n    // const month = epubFilename.substring(startMonth);\r\n\r\n    // UTC date used here\r\n    // const refDate = DateTime.utc();\r\n    // this.epubMonth = DateTime.fromISO(month, {\r\n    //   zone: refDate.zone,\r\n    //   locale: refDate.locale,\r\n    // });\r\n  }\r\n\r\n  /**\r\n   * Extract the month from the epub filename\r\n   * ex: mwb_F_201908 => F\r\n   */\r\n  getLanguageFromEpubFilename(epubFilename?: string, pubCode: string = 'mwb') {\r\n    if (epubFilename === undefined) {\r\n      epubFilename = this.epubFilename;\r\n    }\r\n\r\n    const startLanguage =\r\n      epubFilename.lastIndexOf(pubCode + '_') + pubCode.length + 1;\r\n    const endLanguage = epubFilename.length - 7;\r\n\r\n    return epubFilename.substring(startLanguage, endLanguage);\r\n  }\r\n\r\n  /**\r\n   * Searching the entire book\r\n   * @see https://github.com/futurepress/epub.js/wiki/Tips-and-Tricks-(v0.3)#searching-the-entire-book\r\n   */\r\n  search(q: string) {\r\n    return Promise.all(\r\n      this.book.spine['spineItems'].map((item) =>\r\n        item\r\n          .load(this.book.load.bind(this.book))\r\n          .then(item.find.bind(item, q))\r\n          .finally(item.unload.bind(item))\r\n      )\r\n    ).then((results) => Promise.resolve([].concat.apply([], results)));\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}