{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/CSEG/Desktop/thassign/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { Interval } from 'luxon';\nimport { CommonService } from '@src/app/core/services/common.service';\nimport { Assignment } from '@src/app/core/models/assignment/assignment.model';\nimport { AssignmentConverter } from '@src/app/core/models/assignment/assignment.converter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@src/app/modules/auth/auth.service\";\nimport * as i2 from \"@src/app/core/services/backend.service\";\nimport * as i3 from \"@src/app/core/services/message.service\";\nimport * as i4 from \"@src/app/core/services/part.service\";\nimport * as i5 from \"@src/app/core/services/setting.service\";\nimport * as i6 from \"@src/app/modules/users/user.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  }),\n  reportProgress: true\n};\n/**\r\n * Get data about assignments from storage\r\n */\nexport class AssignmentService extends CommonService {\n  constructor(authService, backendService, messageService, partService, settingService, userService) {\n    super();\n    this.authService = authService;\n    this.backendService = backendService;\n    this.messageService = messageService;\n    this.partService = partService;\n    this.settingService = settingService;\n    this.userService = userService;\n    // public abstract weekendParts = [\n    //   'weekend.publicTalk.chairman',\n    //   'weekend.publicTalk.speaker',\n    //   'weekend.watchtower.conductor',\n    //   'weekend.watchtower.reader',\n    // ];\n    // private assignmentsUrl = 'api/assignment'; // URL to web api\n    /**\r\n     * Filtered assignments store\r\n     */\n    this.pAssignmentsStore = new BehaviorSubject([]);\n    /**\r\n     * Paginated user list observable\r\n     */\n    this.pAssignments = this.pAssignmentsStore.asObservable();\n    /**\r\n     * All the assignments separated by users\r\n     * userId => Assignment[]\r\n     */\n    this.assignmentsByUser = new Map();\n    // Get some settings\n    this.displayStudentsParts = this.settingService.displayStudentsParts;\n    // generateAssignments(userService, partSer);\n  }\n\n  destroy() {\n    this.pAssignmentsStore.complete();\n    this.dataStore.complete();\n  }\n  /**\r\n   * Create Assignment instances from JSON or array of JSON objects\r\n   *\r\n   * @param props JSON object/array with properties\r\n   */\n  createAssignment(props, allParts, allUsers) {\n    if (props instanceof Array) {\n      const assignments = props.map((obj, index) => {\n        return new Assignment(obj, allParts, allUsers);\n      });\n      return assignments;\n    } else {\n      return new Assignment(props);\n    }\n  }\n  /**\r\n   * Populate assignmentsByUser\r\n   * Sorted by week ( and position ?)\r\n   * @param allAssignments\r\n   */\n  groupAssignmentsByUser(allAssignments, users) {\n    if (allAssignments === undefined) {\n      allAssignments = this.getAssignments();\n    }\n    if (users === undefined) {\n      users = this.userService.getUsers();\n    }\n    users.forEach(user => {\n      // Convert the Map assignments to an array to make the search\n      const assMap = [...allAssignments.values()];\n      let userAss = assMap.filter(ass => {\n        const isAssignee = ass.assignee?._id === user._id;\n        const isAssistant = ass.assistant?._id === user._id;\n        // Assignee or assistant\n        return isAssignee || isAssistant;\n      });\n      this.assignmentsByUser.set(user._id, userAss);\n    });\n  }\n  generateAssignments(meeting, month, listOfParts, assignableUsersByPart) {\n    const assignments = [];\n    const weeks = this.getAllWeeksOfTheSelectedMonth(month);\n    const listOfPartsByWeek = this.getListOfPartsByWeek(meeting, month);\n    // console.log(weeks);\n    weeks.forEach((week, index) => {\n      let position = 1;\n      // TODO fetch from the db, from the epub\n      listOfPartsByWeek[index].forEach(partName => {\n        // Set the position for repetitive parts\n        const previous = assignments.slice(-1)[0];\n        if (previous?.part.name === listOfParts[partName].name) {\n          position = previous.position + 1;\n        }\n        assignments.push(new Assignment({\n          week: week.start.toJSDate(),\n          part: listOfParts[partName],\n          assignee: {},\n          position: position,\n          assignableUsers: assignableUsersByPart[partName],\n          // https://stackoverflow.com/a/40560953\n          ...(listOfParts[partName]['withAssistant'] && {\n            assistant: {}\n          }),\n          ...(listOfParts[partName]['withTitle'] && {\n            title: ''\n          }),\n          ...(listOfParts[partName]['withAssistant'] && {\n            assignableAssistants: assignableUsersByPart['studentAssistant']\n          })\n        }));\n      });\n    });\n    return assignments;\n  }\n  /**\r\n   * Get assignments from store\r\n   */\n  getAssignments() {\n    return this.dataStore.getValue();\n  }\n  /**\r\n   * Get all assignments from the server\r\n   */\n  storeAssignments(assignments, allParts, allUsers) {\n    try {\n      this.updateStore(assignments);\n      // this.log('fetched Assignments', 'AssignmentService');\n      // return allAssignments;\n    } catch (error) {\n      return this.handleError('storeAssignments', error, [], '');\n    }\n  }\n  /**\r\n   * Get the assignments for some parts during a month\r\n   * Update the pAssignments observable\r\n   * @param month Luxon DateTime first day of the desired month\r\n   * @param listOfParts Part[] List of parts we want to get the assignments on\r\n   */\n  getAssignmentsByPartsAndMonth(month, listOfParts, assignments) {\n    if (assignments === undefined) {\n      const assMap = this.getAssignments();\n      assignments = [...assMap.values()];\n    }\n    let pAssignments;\n    if (assignments !== null) {\n      pAssignments = assignments.filter(assignment => {\n        const isForMeeting = listOfParts.find(part => part.name === assignment.part.name) !== undefined;\n        const isForMonth = month.get('month') === assignment.week.get('month');\n        return isForMeeting && isForMonth;\n      });\n      pAssignments = pAssignments.sort((a, b) => a.part.position - b.part.position);\n      // console.log('PASS', pAssignments);\n      this.pAssignmentsStore.next(pAssignments);\n    } else {\n      this.pAssignmentsStore.next([]);\n    }\n    return pAssignments;\n  }\n  /**\r\n   * Check if the current user is handling the given part\r\n   * @param part\r\n   */\n  isWorkingOnPart(part) {\n    const isStudentPart = this.partService.meetingParts['midweek-students'].includes(part.name);\n    if (this.displayStudentsParts === true) {\n      // Only display students parts\n      return isStudentPart;\n    } else if (this.displayStudentsParts === false) {\n      // Only display non students parts\n      return !isStudentPart;\n    } else {\n      // Display all the parts\n      return true;\n    }\n  }\n  //////// Save methods //////////\n  /**\r\n   * @POST add a new assignment to the server\r\n   */\n  addAssignment(assignment) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this.backendService.upsertOneDoc('assignments', assignment, null, 'set', false, new AssignmentConverter());\n        _this.log(`added assignment`);\n      } catch (error) {\n        _this.handleError('addAssignment', error);\n      }\n    })();\n  }\n  /**\r\n   * @PUT: update the assignment on the server\r\n   */\n  updateAssignment(assignment) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this2.backendService.upsertOneDoc('assignments', assignment, assignment._id, 'set', true, new AssignmentConverter());\n        _this2.log(`updated assignment`);\n      } catch (error) {\n        _this2.handleError('updateAssignment', error);\n      }\n    })();\n  }\n  /**\r\n   * DELETE: delete the assignment from the server\r\n   */\n  deleteAssignment(assignmentId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        if (assignmentId.hasOwnProperty('length')) {\n          // many assignments\n          yield _this3.backendService.upsertManyDocs('assignments', assignmentId, 'delete', false, new AssignmentConverter());\n          _this3.log(`deleted assignments`);\n        } else {\n          // Only one assignment\n          yield _this3.backendService.upsertOneDoc('users', null, assignmentId, 'delete', false, new AssignmentConverter());\n          _this3.log(`deleted assignment`);\n        }\n      } catch (error) {\n        _this3.handleError('deleteAssignment', error);\n      }\n    })();\n  }\n  /**\r\n   * Insert assignment if not existent, update it otherwise\r\n   * @param assignments Assignment list\r\n   */\n  saveAssignments(assignments, startDate, allParts, allUsers) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const endDate = startDate.set({\n        day: startDate.daysInMonth\n      });\n      const toSave = [];\n      // convert User, assignee and Part to their _id\n      assignments.forEach((ass, i) => {\n        ass.prepareToSave();\n        toSave[i] = {};\n        Object.assign(toSave[i], ass);\n        toSave[i].week = ass.week.toISO();\n        toSave[i].part = ass.part.name;\n        toSave[i].assignee = ass.assignee?._id;\n        if (ass.assistant) {\n          toSave[i].assistant = ass.assistant?._id;\n        }\n      });\n      try {\n        // First delete all the assignments for the given period\n        const assToDelete = yield _this4.backendService.getDocsInRange('assignments', 'week', startDate.toISODate(), endDate.toISODate());\n        if (assToDelete.length) {\n          _this4.backendService.upsertManyDocs('assignments', assToDelete, 'delete', false, new AssignmentConverter());\n        }\n        // Then insert the new ones\n        yield _this4.backendService.upsertManyDocs('assignments', toSave, 'set', false, new AssignmentConverter());\n        //  Save the assignments and fetch all of them from the DB\n        // const result = await this.callFunction('Assignments_insertMany', [\n        //   startDate.toISO(),\n        //   endDate.toISO(),\n        //   toSave,\n        // ]);\n        // Then update Store\n        // this.updateStore(\n        //   this.createAssignment(result, allParts, allUsers) as Assignment[]\n        // );\n      } catch (error) {\n        _this4.handleError('saveAssignments', error);\n      }\n    })();\n  }\n  // saveWeekendAssignments(weekendAssignments: Array<any>) {\n  //   this.upsertAssignment(weekendAssignments['chairman']);\n  //   this.upsertAssignment(weekendAssignments['speaker']);\n  //   this.upsertAssignment(weekendAssignments['conductor']);\n  //   this.upsertAssignment(weekendAssignments['reader']);\n  // }\n  // Date functions to move to another service\n  getFirstWeekOfTheSelectedMonth(month) {\n    const firstMondayOfMonth = month.weekday === 1 ? month : month.set({\n      weekday: 8\n    }); // set the date as the first monday of the month\n    const endTime = firstMondayOfMonth.plus({\n      days: 6\n    });\n    return Interval.fromDateTimes(firstMondayOfMonth, endTime);\n    // if (this.month.weekday !== this.settingService.getStartDayOfWeek()) {\n    //   this.firstWeekOfTheMonth = this.month\n    //     .plus({ week: 1 })\n    //     .set({ weekday: this.settingService.getStartDayOfWeek() });\n    // } else {\n    //   this.firstWeekOfTheMonth = this.month;\n    // }\n  }\n  /**\r\n   * Get an array of all the weeks in the selected month\r\n   */\n  getAllWeeksOfTheSelectedMonth(month) {\n    const weeks = [];\n    const nextMonth = month.plus({\n      month: 1\n    });\n    for (let currentWeek = this.getFirstWeekOfTheSelectedMonth(month); currentWeek.start < nextMonth; currentWeek = currentWeek.set({\n      // we shift to the next week\n      start: currentWeek.start.plus({\n        week: 1\n      }),\n      end: currentWeek.end.plus({\n        week: 1\n      })\n    })) {\n      weeks.push(currentWeek);\n    }\n    return weeks;\n  }\n  /**\r\n   * TODO Fetch them either from the epub or from jw.org.\r\n   * Read the contract of jw.org\r\n   */\n  getListOfPartsByWeek(meeting, month) {\n    const listOfPartsByWeek = [['bibleReading', 'studentTalk'], ['bibleReading', 'initialCall', 'initialCall', 'initialCall'], ['bibleReading', 'firstReturnVisit', 'firstReturnVisit'], ['bibleReading', 'secondReturnVisit', 'bibleStudy'], ['bibleReading', 'secondReturnVisit', 'bibleStudy', 'bibleStudy']];\n    return listOfPartsByWeek;\n  }\n  static #_ = this.ɵfac = function AssignmentService_Factory(t) {\n    return new (t || AssignmentService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.BackendService), i0.ɵɵinject(i3.MessageService), i0.ɵɵinject(i4.PartService), i0.ɵɵinject(i5.SettingService), i0.ɵɵinject(i6.UserService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AssignmentService,\n    factory: AssignmentService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","Interval","CommonService","Assignment","AssignmentConverter","httpOptions","headers","reportProgress","AssignmentService","constructor","authService","backendService","messageService","partService","settingService","userService","pAssignmentsStore","pAssignments","asObservable","assignmentsByUser","Map","displayStudentsParts","destroy","complete","dataStore","createAssignment","props","allParts","allUsers","Array","assignments","map","obj","index","groupAssignmentsByUser","allAssignments","users","undefined","getAssignments","getUsers","forEach","user","assMap","values","userAss","filter","ass","isAssignee","assignee","_id","isAssistant","assistant","set","generateAssignments","meeting","month","listOfParts","assignableUsersByPart","weeks","getAllWeeksOfTheSelectedMonth","listOfPartsByWeek","getListOfPartsByWeek","week","position","partName","previous","slice","part","name","push","start","toJSDate","assignableUsers","title","assignableAssistants","getValue","storeAssignments","updateStore","error","handleError","getAssignmentsByPartsAndMonth","assignment","isForMeeting","find","isForMonth","get","sort","a","b","next","isWorkingOnPart","isStudentPart","meetingParts","includes","addAssignment","_this","_asyncToGenerator","upsertOneDoc","log","updateAssignment","_this2","deleteAssignment","assignmentId","_this3","hasOwnProperty","upsertManyDocs","saveAssignments","startDate","_this4","endDate","day","daysInMonth","toSave","i","prepareToSave","Object","assign","toISO","assToDelete","getDocsInRange","toISODate","length","getFirstWeekOfTheSelectedMonth","firstMondayOfMonth","weekday","endTime","plus","days","fromDateTimes","nextMonth","currentWeek","end","_","i0","ɵɵinject","i1","AuthService","i2","BackendService","i3","MessageService","i4","PartService","i5","SettingService","i6","UserService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\CSEG\\Desktop\\thassign\\src\\app\\modules\\assignments\\services\\assignment.service.ts"],"sourcesContent":["import { HttpHeaders } from '@angular/common/http';\r\nimport { Injectable, ɵConsole } from '@angular/core';\r\nimport { Observable, BehaviorSubject, of } from 'rxjs';\r\nimport { DateTime, Interval } from 'luxon';\r\n\r\nimport { AuthService } from '@src/app/modules/auth/auth.service';\r\nimport { BackendService } from '@src/app/core/services/backend.service';\r\nimport { CommonService } from '@src/app/core/services/common.service';\r\nimport { MessageService } from '@src/app/core/services/message.service';\r\nimport { PartService } from '@src/app/core/services/part.service';\r\nimport { SettingService } from '@src/app/core/services/setting.service';\r\nimport { UserService } from '@src/app/modules/users/user.service';\r\nimport { Assignment } from '@src/app/core/models/assignment/assignment.model';\r\nimport { Part } from '@src/app/core/models/part/part.model';\r\nimport { User } from '@src/app/core/models/user/user.model';\r\nimport { AssignmentConverter } from '@src/app/core/models/assignment/assignment.converter';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n  reportProgress: true,\r\n};\r\n\r\n/**\r\n * Get data about assignments from storage\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport abstract class AssignmentService extends CommonService<Assignment> {\r\n  // public abstract weekendParts = [\r\n  //   'weekend.publicTalk.chairman',\r\n  //   'weekend.publicTalk.speaker',\r\n  //   'weekend.watchtower.conductor',\r\n  //   'weekend.watchtower.reader',\r\n  // ];\r\n\r\n  // private assignmentsUrl = 'api/assignment'; // URL to web api\r\n\r\n  /**\r\n   * Filtered assignments store\r\n   */\r\n  private pAssignmentsStore: BehaviorSubject<\r\n    Assignment[]\r\n  > = new BehaviorSubject<Assignment[]>([]);\r\n\r\n  /**\r\n   * Paginated user list observable\r\n   */\r\n  pAssignments: Observable<\r\n    Assignment[]\r\n  > = this.pAssignmentsStore.asObservable();\r\n\r\n  /**\r\n   * All the assignments separated by users\r\n   * userId => Assignment[]\r\n   */\r\n  assignmentsByUser: Map<string, Assignment[]> = new Map();\r\n\r\n  /**\r\n   * Display the Students part ?\r\n   * if undefined display all parts\r\n   *\r\n   * This is used for a session. The one in SettingService\r\n   * is persisted in the DB\r\n   */\r\n  displayStudentsParts: boolean;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    protected backendService: BackendService,\r\n    protected messageService: MessageService,\r\n    protected partService: PartService,\r\n    protected settingService: SettingService,\r\n    protected userService: UserService\r\n  ) {\r\n    super();\r\n\r\n    // Get some settings\r\n    this.displayStudentsParts = this.settingService.displayStudentsParts;\r\n\r\n    // generateAssignments(userService, partSer);\r\n  }\r\n\r\n  destroy() {\r\n    this.pAssignmentsStore.complete();\r\n    this.dataStore.complete();\r\n  }\r\n\r\n  /**\r\n   * Create Assignment instances from JSON or array of JSON objects\r\n   *\r\n   * @param props JSON object/array with properties\r\n   */\r\n  createAssignment(\r\n    props: object,\r\n    allParts?: Part[],\r\n    allUsers?: User[]\r\n  ): Assignment | Assignment[] {\r\n    if (props instanceof Array) {\r\n      const assignments = props.map((obj, index) => {\r\n        return new Assignment(obj, allParts, allUsers);\r\n      }) as Assignment[];\r\n\r\n      return assignments;\r\n    } else {\r\n      return new Assignment(props) as Assignment;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Populate assignmentsByUser\r\n   * Sorted by week ( and position ?)\r\n   * @param allAssignments\r\n   */\r\n  groupAssignmentsByUser(allAssignments?: Map<string, Assignment>, users?: User[]) {\r\n    if (allAssignments === undefined) {\r\n      allAssignments = this.getAssignments();\r\n    }\r\n\r\n    if (users === undefined) {\r\n      users = this.userService.getUsers();\r\n    }\r\n    users.forEach((user) => {\r\n      // Convert the Map assignments to an array to make the search\r\n      const assMap = [...allAssignments.values()];\r\n      let userAss = assMap.filter((ass: Assignment) => {\r\n        const isAssignee = ass.assignee?._id === user._id;\r\n        const isAssistant = ass.assistant?._id === user._id;\r\n        // Assignee or assistant\r\n        return isAssignee || isAssistant;\r\n      });\r\n\r\n      this.assignmentsByUser.set(user._id, userAss);\r\n    });\r\n  }\r\n\r\n  generateAssignments(\r\n    meeting: string,\r\n    month: DateTime,\r\n    listOfParts: object,\r\n    assignableUsersByPart: object\r\n  ) {\r\n    const assignments: Assignment[] = [];\r\n    const weeks = this.getAllWeeksOfTheSelectedMonth(month);\r\n    const listOfPartsByWeek = this.getListOfPartsByWeek(meeting, month);\r\n    // console.log(weeks);\r\n    weeks.forEach((week, index) => {\r\n      let position = 1;\r\n      // TODO fetch from the db, from the epub\r\n\r\n      listOfPartsByWeek[index].forEach((partName) => {\r\n        // Set the position for repetitive parts\r\n\r\n        const previous = assignments.slice(-1)[0];\r\n\r\n        if (previous?.part.name === listOfParts[partName].name) {\r\n          position = previous.position + 1;\r\n        }\r\n\r\n        assignments.push(\r\n          new Assignment({\r\n            week: week.start.toJSDate(),\r\n            part: listOfParts[partName],\r\n            assignee: {},\r\n            position: position,\r\n            assignableUsers: assignableUsersByPart[partName],\r\n            // https://stackoverflow.com/a/40560953\r\n            ...(listOfParts[partName]['withAssistant'] && {\r\n              assistant: {},\r\n            }),\r\n            ...(listOfParts[partName]['withTitle'] && { title: '' }),\r\n            ...(listOfParts[partName]['withAssistant'] && {\r\n              assignableAssistants: assignableUsersByPart['studentAssistant'],\r\n            }),\r\n          })\r\n        );\r\n      });\r\n    });\r\n\r\n    return assignments;\r\n  }\r\n\r\n  /**\r\n   * Get assignments from store\r\n   */\r\n  getAssignments(): Map<string, Assignment> {\r\n    return this.dataStore.getValue();\r\n  }\r\n\r\n  /**\r\n   * Get all assignments from the server\r\n   */\r\n  storeAssignments(\r\n    assignments: Map<string, Assignment>,\r\n    allParts?: Part[],\r\n    allUsers?: User[]\r\n  ) {\r\n    try {\r\n      this.updateStore(assignments);\r\n      // this.log('fetched Assignments', 'AssignmentService');\r\n\r\n      // return allAssignments;\r\n    } catch (error) {\r\n      return this.handleError('storeAssignments', error, [], '');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the assignments for some parts during a month\r\n   * Update the pAssignments observable\r\n   * @param month Luxon DateTime first day of the desired month\r\n   * @param listOfParts Part[] List of parts we want to get the assignments on\r\n   */\r\n  getAssignmentsByPartsAndMonth(\r\n    month: DateTime,\r\n    listOfParts: Part[],\r\n    assignments?: Assignment[]\r\n  ): Assignment[] {\r\n    if (assignments === undefined) {\r\n      const assMap = this.getAssignments();\r\n      assignments = [...assMap.values()];\r\n    }\r\n\r\n    let pAssignments: Assignment[];\r\n    if (assignments !== null) {\r\n      pAssignments = assignments.filter((assignment) => {\r\n        const isForMeeting =\r\n          listOfParts.find((part) => part.name === assignment.part.name) !==\r\n          undefined;\r\n\r\n        const isForMonth = month.get('month') === assignment.week.get('month');\r\n\r\n        return isForMeeting && isForMonth;\r\n      });\r\n\r\n      pAssignments = pAssignments.sort(\r\n        (a, b) => a.part.position - b.part.position\r\n      );\r\n      // console.log('PASS', pAssignments);\r\n\r\n      this.pAssignmentsStore.next(pAssignments);\r\n    } else {\r\n      this.pAssignmentsStore.next([]);\r\n    }\r\n\r\n    return pAssignments;\r\n  }\r\n\r\n  /**\r\n   * Check if the current user is handling the given part\r\n   * @param part\r\n   */\r\n  isWorkingOnPart(part: Part): boolean {\r\n    const isStudentPart = this.partService.meetingParts[\r\n      'midweek-students'\r\n    ].includes(part.name);\r\n    \r\n    if (this.displayStudentsParts === true) {\r\n      // Only display students parts\r\n      return isStudentPart;\r\n    } else if (this.displayStudentsParts === false) {\r\n      // Only display non students parts\r\n      return !isStudentPart;\r\n    } else {\r\n      // Display all the parts\r\n      return true;\r\n    }\r\n  }\r\n\r\n  //////// Save methods //////////\r\n  /**\r\n   * @POST add a new assignment to the server\r\n   */\r\n  async addAssignment(assignment: Assignment): Promise<any> {\r\n    try {\r\n      await this.backendService.upsertOneDoc(\r\n        'assignments',\r\n        assignment,\r\n        null,\r\n        'set',\r\n        false,\r\n        new AssignmentConverter()\r\n      );\r\n\r\n      this.log(`added assignment`);\r\n    } catch (error) {\r\n      this.handleError<any>('addAssignment', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @PUT: update the assignment on the server\r\n   */\r\n  async updateAssignment(assignment: Assignment): Promise<void> {\r\n    try {\r\n      await this.backendService.upsertOneDoc(\r\n        'assignments',\r\n        assignment,\r\n        assignment._id,\r\n        'set',\r\n        true,\r\n        new AssignmentConverter()\r\n      );\r\n\r\n      this.log(`updated assignment`);\r\n    } catch (error) {\r\n      this.handleError<any>('updateAssignment', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * DELETE: delete the assignment from the server\r\n   */\r\n  async deleteAssignment(assignmentId: string | string[]): Promise<any> {\r\n    try {\r\n      if (assignmentId.hasOwnProperty('length')) {\r\n        // many assignments\r\n        await this.backendService.upsertManyDocs(\r\n          'assignments',\r\n          assignmentId as String[],\r\n          'delete',\r\n          false,\r\n          new AssignmentConverter()\r\n        );\r\n\r\n        this.log(`deleted assignments`);\r\n      } else {\r\n        // Only one assignment\r\n        await this.backendService.upsertOneDoc(\r\n          'users',\r\n          null,\r\n          assignmentId as string,\r\n          'delete',\r\n          false,\r\n          new AssignmentConverter()\r\n        );\r\n\r\n        this.log(`deleted assignment`);\r\n      }\r\n    } catch (error) {\r\n      this.handleError<any>('deleteAssignment', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Insert assignment if not existent, update it otherwise\r\n   * @param assignments Assignment list\r\n   */\r\n  async saveAssignments(\r\n    assignments: Assignment[],\r\n    startDate: DateTime,\r\n    allParts: Part[],\r\n    allUsers: User[]\r\n  ): Promise<void> {\r\n    const endDate = startDate.set({ day: startDate.daysInMonth });\r\n\r\n    const toSave = [];\r\n    // convert User, assignee and Part to their _id\r\n    assignments.forEach((ass, i) => {\r\n      ass.prepareToSave();\r\n\r\n      toSave[i] = {};\r\n      Object.assign(toSave[i], ass);\r\n      toSave[i].week = ass.week.toISO();\r\n      toSave[i].part = ass.part.name;\r\n      toSave[i].assignee = ass.assignee?._id;\r\n      if (ass.assistant) {\r\n        toSave[i].assistant = ass.assistant?._id;\r\n      }\r\n    });\r\n\r\n    try {\r\n      // First delete all the assignments for the given period\r\n      const assToDelete = await this.backendService.getDocsInRange(\r\n        'assignments',\r\n        'week',\r\n        startDate.toISODate(),\r\n        endDate.toISODate()\r\n      );\r\n      if (assToDelete.length) {\r\n        this.backendService.upsertManyDocs(\r\n          'assignments',\r\n          assToDelete,\r\n          'delete',\r\n          false,\r\n          new AssignmentConverter()\r\n        );\r\n      }\r\n\r\n      // Then insert the new ones\r\n      await this.backendService.upsertManyDocs(\r\n        'assignments',\r\n        toSave,\r\n        'set',\r\n        false,\r\n        new AssignmentConverter()\r\n      );\r\n\r\n      //  Save the assignments and fetch all of them from the DB\r\n      // const result = await this.callFunction('Assignments_insertMany', [\r\n      //   startDate.toISO(),\r\n      //   endDate.toISO(),\r\n      //   toSave,\r\n      // ]);\r\n\r\n      // Then update Store\r\n      // this.updateStore(\r\n      //   this.createAssignment(result, allParts, allUsers) as Assignment[]\r\n      // );\r\n    } catch (error) {\r\n      this.handleError<any>('saveAssignments', error);\r\n    }\r\n  }\r\n\r\n  // saveWeekendAssignments(weekendAssignments: Array<any>) {\r\n  //   this.upsertAssignment(weekendAssignments['chairman']);\r\n  //   this.upsertAssignment(weekendAssignments['speaker']);\r\n  //   this.upsertAssignment(weekendAssignments['conductor']);\r\n  //   this.upsertAssignment(weekendAssignments['reader']);\r\n  // }\r\n\r\n  // Date functions to move to another service\r\n  getFirstWeekOfTheSelectedMonth(month: DateTime) {\r\n    const firstMondayOfMonth =\r\n      month.weekday === 1 ? month : month.set({ weekday: 8 }); // set the date as the first monday of the month\r\n    const endTime = firstMondayOfMonth.plus({ days: 6 });\r\n\r\n    return Interval.fromDateTimes(firstMondayOfMonth, endTime);\r\n\r\n    // if (this.month.weekday !== this.settingService.getStartDayOfWeek()) {\r\n    //   this.firstWeekOfTheMonth = this.month\r\n    //     .plus({ week: 1 })\r\n    //     .set({ weekday: this.settingService.getStartDayOfWeek() });\r\n    // } else {\r\n    //   this.firstWeekOfTheMonth = this.month;\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * Get an array of all the weeks in the selected month\r\n   */\r\n  getAllWeeksOfTheSelectedMonth(month: DateTime): Interval[] {\r\n    const weeks = [];\r\n    const nextMonth = month.plus({ month: 1 });\r\n\r\n    for (\r\n      let currentWeek = this.getFirstWeekOfTheSelectedMonth(month);\r\n      currentWeek.start < nextMonth;\r\n      currentWeek = currentWeek.set({\r\n        // we shift to the next week\r\n        start: currentWeek.start.plus({ week: 1 }),\r\n        end: currentWeek.end.plus({ week: 1 }),\r\n      })\r\n    ) {\r\n      weeks.push(currentWeek);\r\n    }\r\n\r\n    return weeks;\r\n  }\r\n\r\n  /**\r\n   * TODO Fetch them either from the epub or from jw.org.\r\n   * Read the contract of jw.org\r\n   */\r\n  getListOfPartsByWeek(meeting, month) {\r\n    const listOfPartsByWeek = [\r\n      ['bibleReading', 'studentTalk'],\r\n      ['bibleReading', 'initialCall', 'initialCall', 'initialCall'],\r\n      ['bibleReading', 'firstReturnVisit', 'firstReturnVisit'],\r\n      ['bibleReading', 'secondReturnVisit', 'bibleStudy'],\r\n      ['bibleReading', 'secondReturnVisit', 'bibleStudy', 'bibleStudy'],\r\n    ];\r\n\r\n    return listOfPartsByWeek;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}