{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@src/app/modules/auth/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/fire/auth\";\nexport class AuthGuard {\n  constructor(authService, router, fireAuth) {\n    this.authService = authService;\n    this.router = router;\n    this.fireAuth = fireAuth;\n  }\n  canActivate(next, state) {\n    const url = state.url;\n    return new Promise((resolve, reject) => {\n      this.fireAuth.authState.subscribe(user => {\n        if (user) {\n          this.authService.setUser({\n            _id: user.uid,\n            firstName: user.displayName,\n            email: user.email,\n            ownerId: user.uid\n          });\n          resolve(true);\n        } else {\n          this.authService.setUser(null);\n          this.router.navigateByUrl('/auth');\n          resolve(false);\n        }\n      });\n    });\n  }\n  // async checkLogin(url: string): Promise<boolean> {\n  //   try {\n  //     // Store the attempted URL for redirecting\n  //     this.authService.redirectUrl = url;\n  //     // Navigate to the login page with extras\n  //     this.router.navigate(['/auth/login']);\n  //     return false;\n  //   } catch (error) {\n  //     throw error;\n  //   }\n  // }\n  canActivateChild(route, state) {\n    return this.canActivate(route, state);\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AngularFireAuth));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac\n  });\n}","map":{"version":3,"names":["AuthGuard","constructor","authService","router","fireAuth","canActivate","next","state","url","Promise","resolve","reject","authState","subscribe","user","setUser","_id","uid","firstName","displayName","email","ownerId","navigateByUrl","canActivateChild","route","_","i0","ɵɵinject","i1","AuthService","i2","Router","i3","AngularFireAuth","_2","factory","ɵfac"],"sources":["C:\\Users\\CSEG\\Desktop\\thassign\\src\\app\\modules\\auth\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot, Route, UrlSegment } from '@angular/router';\r\nimport firebase from 'firebase';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\n\r\nimport { AuthService } from '@src/app/modules/auth/auth.service';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class AuthGuard  {\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private fireAuth: AngularFireAuth\r\n  ) {}\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): boolean | Observable<boolean> | Promise<boolean> {\r\n    const url: string = state.url;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.fireAuth.authState.subscribe((user: firebase.User) => {\r\n        if (user) {\r\n          this.authService.setUser({\r\n            _id: user.uid,\r\n            firstName: user.displayName,\r\n            email: user.email,\r\n            ownerId: user.uid,\r\n          });\r\n\r\n          resolve(true);\r\n        } else {\r\n          this.authService.setUser(null);\r\n\r\n          this.router.navigateByUrl('/auth');\r\n          resolve(false);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  // async checkLogin(url: string): Promise<boolean> {\r\n  //   try {\r\n  //     // Store the attempted URL for redirecting\r\n  //     this.authService.redirectUrl = url;\r\n\r\n  //     // Navigate to the login page with extras\r\n  //     this.router.navigate(['/auth/login']);\r\n  //     return false;\r\n  //   } catch (error) {\r\n  //     throw error;\r\n  //   }\r\n  // }\r\n\r\n  canActivateChild(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): boolean | Observable<boolean> | Promise<boolean> {\r\n    return this.canActivate(route, state);\r\n  }\r\n}\r\n"],"mappings":";;;;AASA,OAAM,MAAOA,SAAS;EACpBC,YACUC,WAAwB,EACxBC,MAAc,EACdC,QAAyB;IAFzB,KAAAF,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,QAAQ,GAARA,QAAQ;EACf;EAEHC,WAAWA,CACTC,IAA4B,EAC5BC,KAA0B;IAE1B,MAAMC,GAAG,GAAWD,KAAK,CAACC,GAAG;IAE7B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACrC,IAAI,CAACP,QAAQ,CAACQ,SAAS,CAACC,SAAS,CAAEC,IAAmB,IAAI;QACxD,IAAIA,IAAI,EAAE;UACR,IAAI,CAACZ,WAAW,CAACa,OAAO,CAAC;YACvBC,GAAG,EAAEF,IAAI,CAACG,GAAG;YACbC,SAAS,EAAEJ,IAAI,CAACK,WAAW;YAC3BC,KAAK,EAAEN,IAAI,CAACM,KAAK;YACjBC,OAAO,EAAEP,IAAI,CAACG;WACf,CAAC;UAEFP,OAAO,CAAC,IAAI,CAAC;SACd,MAAM;UACL,IAAI,CAACR,WAAW,CAACa,OAAO,CAAC,IAAI,CAAC;UAE9B,IAAI,CAACZ,MAAM,CAACmB,aAAa,CAAC,OAAO,CAAC;UAClCZ,OAAO,CAAC,KAAK,CAAC;;MAElB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAa,gBAAgBA,CACdC,KAA6B,EAC7BjB,KAA0B;IAE1B,OAAO,IAAI,CAACF,WAAW,CAACmB,KAAK,EAAEjB,KAAK,CAAC;EACvC;EAAC,QAAAkB,CAAA,G;qBApDUzB,SAAS,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,eAAA;EAAA;EAAA,QAAAC,EAAA,G;WAATlC,SAAS;IAAAmC,OAAA,EAATnC,SAAS,CAAAoC;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}