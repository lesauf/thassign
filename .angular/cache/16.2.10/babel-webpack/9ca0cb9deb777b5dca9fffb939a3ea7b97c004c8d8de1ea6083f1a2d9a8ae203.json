{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/CSEG/Desktop/thassign/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// import { RealmService } from '@src/app/core/services/realm.service';\nimport { FirebaseService } from '@src/app/core/services/firebase.service';\nimport * as i0 from \"@angular/core\";\nexport class BackendService extends FirebaseService {\n  /**\r\n   * Put here any initialization for the backend\r\n   */\n  init() {}\n  /**\r\n   * Some test queries to check the connexion\r\n   */\n  // test() {}\n  callFunction(functionName, parameters) {\n    return _asyncToGenerator(function* () {\n      try {\n        return null;\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }\n  // isLoggedIn(): boolean {\n  //   return false;\n  // }\n  // async authenticate(username, password) {\n  //   return { id: null };\n  // }\n  refreshCustomData() {}\n  static #_ = this.ɵfac = /*@__PURE__*/function () {\n    let ɵBackendService_BaseFactory;\n    return function BackendService_Factory(t) {\n      return (ɵBackendService_BaseFactory || (ɵBackendService_BaseFactory = i0.ɵɵgetInheritedFactory(BackendService)))(t || BackendService);\n    };\n  }();\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BackendService,\n    factory: BackendService.ɵfac\n  });\n}","map":{"version":3,"names":["FirebaseService","BackendService","init","callFunction","functionName","parameters","_asyncToGenerator","error","refreshCustomData","_","t","_2","factory","ɵfac"],"sources":["C:\\Users\\CSEG\\Desktop\\thassign\\src\\app\\core\\services\\backend.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n// import { RealmService } from '@src/app/core/services/realm.service';\r\nimport { FirebaseService } from '@src/app/core/services/firebase.service';\r\n\r\n@Injectable()\r\nexport class BackendService extends FirebaseService {\r\n  /**\r\n   * Put here any initialization for the backend\r\n   */\r\n  init() {}\r\n\r\n  /**\r\n   * Some test queries to check the connexion\r\n   */\r\n  // test() {}\r\n\r\n  async callFunction(functionName, parameters?: any[]) {\r\n    try {\r\n      return null;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // isLoggedIn(): boolean {\r\n  //   return false;\r\n  // }\r\n\r\n  // async authenticate(username, password) {\r\n  //   return { id: null };\r\n  // }\r\n\r\n  refreshCustomData() {}\r\n\r\n  // createUserAccount(email: string, password: string) {\r\n  //   return { id: null };\r\n  // }\r\n\r\n  // logout() {}\r\n\r\n  // getUser() {\r\n  //   return { id: null, customData: {} };\r\n  // }\r\n}\r\n"],"mappings":";AAEA;AACA,SAASA,eAAe,QAAQ,yCAAyC;;AAGzE,OAAM,MAAOC,cAAe,SAAQD,eAAe;EACjD;;;EAGAE,IAAIA,CAAA,GAAI;EAER;;;EAGA;EAEMC,YAAYA,CAACC,YAAY,EAAEC,UAAkB;IAAA,OAAAC,iBAAA;MACjD,IAAI;QACF,OAAO,IAAI;OACZ,CAAC,OAAOC,KAAK,EAAE;QACd,MAAMA,KAAK;;IACZ;EACH;EAEA;EACA;EACA;EAEA;EACA;EACA;EAEAC,iBAAiBA,CAAA,GAAI;EAAC,QAAAC,CAAA,G;;;qGA3BXR,cAAc,IAAAS,CAAA,IAAdT,cAAc;IAAA;EAAA;EAAA,QAAAU,EAAA,G;WAAdV,cAAc;IAAAW,OAAA,EAAdX,cAAc,CAAAY;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}