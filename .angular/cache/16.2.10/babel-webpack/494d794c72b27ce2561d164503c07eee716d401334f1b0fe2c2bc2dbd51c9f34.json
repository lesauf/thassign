{"ast":null,"code":"/**\n * @private\n */\n\nimport Zone from \"../zone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport InvalidZone from \"../zones/invalidZone.js\";\nimport { isUndefined, isString, isNumber } from \"./util.js\";\nexport function normalizeZone(input, defaultZone) {\n  let offset;\n  if (isUndefined(input) || input === null) {\n    return defaultZone;\n  } else if (input instanceof Zone) {\n    return input;\n  } else if (isString(input)) {\n    const lowered = input.toLowerCase();\n    if (lowered === \"local\" || lowered === \"system\") return defaultZone;else if (lowered === \"utc\" || lowered === \"gmt\") return FixedOffsetZone.utcInstance;else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);\n  } else if (isNumber(input)) {\n    return FixedOffsetZone.instance(input);\n  } else if (typeof input === \"object\" && input.offset && typeof input.offset === \"number\") {\n    // This is dumb, but the instanceof check above doesn't seem to really work\n    // so we're duck checking it\n    return input;\n  } else {\n    return new InvalidZone(input);\n  }\n}","map":{"version":3,"names":["Zone","IANAZone","FixedOffsetZone","InvalidZone","isUndefined","isString","isNumber","normalizeZone","input","defaultZone","offset","lowered","toLowerCase","utcInstance","parseSpecifier","create","instance"],"sources":["C:/Users/CSEG/Desktop/thassign/node_modules/luxon/src/impl/zoneUtil.js"],"sourcesContent":["/**\n * @private\n */\n\nimport Zone from \"../zone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport InvalidZone from \"../zones/invalidZone.js\";\n\nimport { isUndefined, isString, isNumber } from \"./util.js\";\n\nexport function normalizeZone(input, defaultZone) {\n  let offset;\n  if (isUndefined(input) || input === null) {\n    return defaultZone;\n  } else if (input instanceof Zone) {\n    return input;\n  } else if (isString(input)) {\n    const lowered = input.toLowerCase();\n    if (lowered === \"local\" || lowered === \"system\") return defaultZone;\n    else if (lowered === \"utc\" || lowered === \"gmt\") return FixedOffsetZone.utcInstance;\n    else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);\n  } else if (isNumber(input)) {\n    return FixedOffsetZone.instance(input);\n  } else if (typeof input === \"object\" && input.offset && typeof input.offset === \"number\") {\n    // This is dumb, but the instanceof check above doesn't seem to really work\n    // so we're duck checking it\n    return input;\n  } else {\n    return new InvalidZone(input);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,eAAe,MAAM,6BAA6B;AACzD,OAAOC,WAAW,MAAM,yBAAyB;AAEjD,SAASC,WAAW,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,WAAW;AAE3D,OAAO,SAASC,aAAaA,CAACC,KAAK,EAAEC,WAAW,EAAE;EAChD,IAAIC,MAAM;EACV,IAAIN,WAAW,CAACI,KAAK,CAAC,IAAIA,KAAK,KAAK,IAAI,EAAE;IACxC,OAAOC,WAAW;EACpB,CAAC,MAAM,IAAID,KAAK,YAAYR,IAAI,EAAE;IAChC,OAAOQ,KAAK;EACd,CAAC,MAAM,IAAIH,QAAQ,CAACG,KAAK,CAAC,EAAE;IAC1B,MAAMG,OAAO,GAAGH,KAAK,CAACI,WAAW,CAAC,CAAC;IACnC,IAAID,OAAO,KAAK,OAAO,IAAIA,OAAO,KAAK,QAAQ,EAAE,OAAOF,WAAW,CAAC,KAC/D,IAAIE,OAAO,KAAK,KAAK,IAAIA,OAAO,KAAK,KAAK,EAAE,OAAOT,eAAe,CAACW,WAAW,CAAC,KAC/E,OAAOX,eAAe,CAACY,cAAc,CAACH,OAAO,CAAC,IAAIV,QAAQ,CAACc,MAAM,CAACP,KAAK,CAAC;EAC/E,CAAC,MAAM,IAAIF,QAAQ,CAACE,KAAK,CAAC,EAAE;IAC1B,OAAON,eAAe,CAACc,QAAQ,CAACR,KAAK,CAAC;EACxC,CAAC,MAAM,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACE,MAAM,IAAI,OAAOF,KAAK,CAACE,MAAM,KAAK,QAAQ,EAAE;IACxF;IACA;IACA,OAAOF,KAAK;EACd,CAAC,MAAM;IACL,OAAO,IAAIL,WAAW,CAACK,KAAK,CAAC;EAC/B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}