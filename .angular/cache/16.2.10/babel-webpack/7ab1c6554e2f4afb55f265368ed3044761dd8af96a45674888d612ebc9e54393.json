{"ast":null,"code":"import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Optional, Inject, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport * as i3 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, MatCommonModule, ErrorStateMatcher } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport * as i1$1 from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { MatLegacyFormFieldControl } from '@angular/material/legacy-form-field';\n\n/**\n * Event object emitted by MatChip when selected or deselected.\n * @deprecated Use `MatChipSelectionChange` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst _c0 = [\"*\"];\nclass MatLegacyChipSelectionChange {\n  constructor( /** Reference to the chip that emitted the event. */\n  source, /** Whether the chip that emitted the event is selected. */\n  selected, /** Whether the selection change was a result of a user interaction. */\n  isUserInput = false) {\n    this.source = source;\n    this.selected = selected;\n    this.isUserInput = isUserInput;\n  }\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n * @deprecated Use `MAT_CHIP_REMOVE` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n * @deprecated Use `MAT_CHIP_AVATAR` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n * @deprecated Use `MAT_CHIP_TRAILING_ICON` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n * @deprecated Use `MatChipAvatar` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipAvatar {}\nMatLegacyChipAvatar.ɵfac = function MatLegacyChipAvatar_Factory(t) {\n  return new (t || MatLegacyChipAvatar)();\n};\nMatLegacyChipAvatar.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyChipAvatar,\n  selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-chip-avatar\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_LEGACY_CHIP_AVATAR,\n    useExisting: MatLegacyChipAvatar\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyChipAvatar, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-avatar, [matChipAvatar]',\n      host: {\n        'class': 'mat-chip-avatar'\n      },\n      providers: [{\n        provide: MAT_LEGACY_CHIP_AVATAR,\n        useExisting: MatLegacyChipAvatar\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n * @deprecated Use `MatChipTrailingIcon` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipTrailingIcon {}\nMatLegacyChipTrailingIcon.ɵfac = function MatLegacyChipTrailingIcon_Factory(t) {\n  return new (t || MatLegacyChipTrailingIcon)();\n};\nMatLegacyChipTrailingIcon.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyChipTrailingIcon,\n  selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]],\n  hostAttrs: [1, \"mat-chip-trailing-icon\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_LEGACY_CHIP_TRAILING_ICON,\n    useExisting: MatLegacyChipTrailingIcon\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyChipTrailingIcon, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n      host: {\n        'class': 'mat-chip-trailing-icon'\n      },\n      providers: [{\n        provide: MAT_LEGACY_CHIP_TRAILING_ICON,\n        useExisting: MatLegacyChipTrailingIcon\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Material Design styled chip directive. Used inside the MatChipList component.\n * @deprecated Use `MatChip` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChip extends _MatChipMixinBase {\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled() {\n    return this.disabled || this.disableRipple || this._animationsDisabled || !!this.rippleConfig.disabled;\n  }\n  /** Whether the chip is selected. */\n  get selected() {\n    return this._selected;\n  }\n  set selected(value) {\n    const coercedValue = coerceBooleanProperty(value);\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  get value() {\n    return this._value !== undefined ? this._value : this._elementRef.nativeElement.textContent;\n  }\n  set value(value) {\n    this._value = value;\n  }\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  get selectable() {\n    return this._selectable && this.chipListSelectable;\n  }\n  set selectable(value) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  /** Whether the chip is disabled. */\n  get disabled() {\n    return this._chipListDisabled || this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  get removable() {\n    return this._removable;\n  }\n  set removable(value) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected() {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ? this.selected.toString() : null;\n  }\n  constructor(elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n    super(elementRef);\n    this._ngZone = _ngZone;\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Whether the chip has focus. */\n    this._hasFocus = false;\n    /** Whether the chip list is selectable */\n    this.chipListSelectable = true;\n    /** Whether the chip list is in multi-selection mode. */\n    this._chipListMultiple = false;\n    /** Whether the chip list as a whole is disabled. */\n    this._chipListDisabled = false;\n    /** ARIA role that should be applied to the chip. */\n    this.role = 'option';\n    this._selected = false;\n    this._selectable = true;\n    this._disabled = false;\n    this._removable = true;\n    /** Emits when the chip is focused. */\n    this._onFocus = new Subject();\n    /** Emits when the chip is blurred. */\n    this._onBlur = new Subject();\n    /** Emitted when the chip is selected or deselected. */\n    this.selectionChange = new EventEmitter();\n    /** Emitted when the chip is destroyed. */\n    this.destroyed = new EventEmitter();\n    /** Emitted when a chip is to be removed. */\n    this.removed = new EventEmitter();\n    this._addHostClassName();\n    // Dynamically create the ripple target, append it within the chip, and use it as the\n    // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n    // the proper styles.\n    this._chipRippleTarget = _document.createElement('div');\n    this._chipRippleTarget.classList.add('mat-chip-ripple');\n    this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n    this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n    this._chipRipple.setupTriggerEvents(elementRef);\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n    this.tabIndex = tabIndex != null ? parseInt(tabIndex) || -1 : -1;\n  }\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement;\n    if (element.hasAttribute(basicChipAttrName) || element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n  ngOnDestroy() {\n    this.destroyed.emit({\n      chip: this\n    });\n    this._chipRipple._removeTriggerEvents();\n  }\n  /** Selects the chip. */\n  select() {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Deselects the chip. */\n  deselect() {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Select this chip and emit selected event */\n  selectViaInteraction() {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput = false) {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    this._changeDetectorRef.markForCheck();\n    return this.selected;\n  }\n  /** Allows for programmatic focusing of the chip. */\n  focus() {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({\n        chip: this\n      });\n    }\n    this._hasFocus = true;\n  }\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove() {\n    if (this.removable) {\n      this.removed.emit({\n        chip: this\n      });\n    }\n  }\n  /** Handles click events on the chip. */\n  _handleClick(event) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n  /** Handle custom key presses. */\n  _handleKeydown(event) {\n    if (this.disabled) {\n      return;\n    }\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n  _blur() {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      this._ngZone.run(() => {\n        this._hasFocus = false;\n        this._onBlur.next({\n          chip: this\n        });\n      });\n    });\n  }\n  _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\nMatLegacyChip.ɵfac = function MatLegacyChip_Factory(t) {\n  return new (t || MatLegacyChip)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵinjectAttribute('tabindex'));\n};\nMatLegacyChip.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyChip,\n  selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]],\n  contentQueries: function MatLegacyChip_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MAT_LEGACY_CHIP_AVATAR, 5);\n      i0.ɵɵcontentQuery(dirIndex, MAT_LEGACY_CHIP_TRAILING_ICON, 5);\n      i0.ɵɵcontentQuery(dirIndex, MAT_LEGACY_CHIP_REMOVE, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-chip\", \"mat-focus-indicator\"],\n  hostVars: 15,\n  hostBindings: function MatLegacyChip_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MatLegacyChip_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      })(\"keydown\", function MatLegacyChip_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatLegacyChip_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatLegacyChip_blur_HostBindingHandler() {\n        return ctx._blur();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"role\", ctx.role)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n      i0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\",\n    role: \"role\",\n    selected: \"selected\",\n    value: \"value\",\n    selectable: \"selectable\",\n    disabled: \"disabled\",\n    removable: \"removable\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\",\n    destroyed: \"destroyed\",\n    removed: \"removed\"\n  },\n  exportAs: [\"matChip\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyChip, [{\n    type: Directive,\n    args: [{\n      selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n      inputs: ['color', 'disableRipple', 'tabIndex'],\n      exportAs: 'matChip',\n      host: {\n        'class': 'mat-chip mat-focus-indicator',\n        '[attr.tabindex]': 'disabled ? null : tabIndex',\n        '[attr.role]': 'role',\n        '[class.mat-chip-selected]': 'selected',\n        '[class.mat-chip-with-avatar]': 'avatar',\n        '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mat-chip-disabled]': 'disabled',\n        '[class._mat-animation-noopable]': '_animationsDisabled',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-selected]': 'ariaSelected',\n        '(click)': '_handleClick($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    avatar: [{\n      type: ContentChild,\n      args: [MAT_LEGACY_CHIP_AVATAR]\n    }],\n    trailingIcon: [{\n      type: ContentChild,\n      args: [MAT_LEGACY_CHIP_TRAILING_ICON]\n    }],\n    removeIcon: [{\n      type: ContentChild,\n      args: [MAT_LEGACY_CHIP_REMOVE]\n    }],\n    role: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    removable: [{\n      type: Input\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    destroyed: [{\n      type: Output\n    }],\n    removed: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n *\n * @deprecated Use `MatChipRemove` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipRemove {\n  constructor(_parentChip, elementRef) {\n    this._parentChip = _parentChip;\n    if (elementRef.nativeElement.nodeName === 'BUTTON') {\n      elementRef.nativeElement.setAttribute('type', 'button');\n    }\n  }\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event) {\n    const parentChip = this._parentChip;\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n    event.preventDefault();\n  }\n}\nMatLegacyChipRemove.ɵfac = function MatLegacyChipRemove_Factory(t) {\n  return new (t || MatLegacyChipRemove)(i0.ɵɵdirectiveInject(MatLegacyChip), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nMatLegacyChipRemove.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyChipRemove,\n  selectors: [[\"\", \"matChipRemove\", \"\"]],\n  hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"],\n  hostBindings: function MatLegacyChipRemove_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MatLegacyChipRemove_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      });\n    }\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_LEGACY_CHIP_REMOVE,\n    useExisting: MatLegacyChipRemove\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyChipRemove, [{\n    type: Directive,\n    args: [{\n      selector: '[matChipRemove]',\n      host: {\n        'class': 'mat-chip-remove mat-chip-trailing-icon',\n        '(click)': '_handleClick($event)'\n      },\n      providers: [{\n        provide: MAT_LEGACY_CHIP_REMOVE,\n        useExisting: MatLegacyChipRemove\n      }]\n    }]\n  }], function () {\n    return [{\n      type: MatLegacyChip\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token to be used to override the default options for the chips module.\n * @deprecated Use `MAT_CHIPS_DEFAULT_OPTIONS` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nconst _MatChipListBase = mixinErrorState(class {\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n  /**\n   * Form control bound to the component.\n   * Implemented as part of `MatFormFieldControl`.\n   * @docs-private\n   */\n  ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n    /**\n     * Emits whenever the component state changes and should cause the parent\n     * form-field to update. Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    this.stateChanges = new Subject();\n  }\n});\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId$1 = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n * @deprecated Use `MatChipListChange` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipListChange {\n  constructor( /** Chip list that emitted the event. */\n  source, /** Value of the chip list when the event was emitted. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n * @deprecated Use `MatChipList` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipList extends _MatChipListBase {\n  /** The array of selected chips inside chip list. */\n  get selected() {\n    return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n  }\n  /** The ARIA role applied to the chip list. */\n  get role() {\n    if (this._explicitRole) {\n      return this._explicitRole;\n    }\n    return this.empty ? null : 'listbox';\n  }\n  set role(role) {\n    this._explicitRole = role;\n  }\n  /** Whether the user should be allowed to select multiple chips. */\n  get multiple() {\n    return this._multiple;\n  }\n  set multiple(value) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  get compareWith() {\n    return this._compareWith;\n  }\n  set compareWith(fn) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get value() {\n    return this._value;\n  }\n  set value(value) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id() {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get required() {\n    return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n  }\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused() {\n    return this._chipInput && this._chipInput.focused || this._hasFocusedChip();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty() {\n    return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat() {\n    return !this.empty || this.focused;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get disabled() {\n    return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  get selectable() {\n    return this._selectable;\n  }\n  set selectable(value) {\n    this._selectable = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  set tabIndex(value) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges() {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges() {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges() {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges() {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n  constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    this.controlType = 'mat-chip-list';\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     */\n    this._lastDestroyedChipIndex = null;\n    /** Subject that emits when the component has been destroyed. */\n    this._destroyed = new Subject();\n    /** Uid of the chip list */\n    this._uid = `mat-chip-list-${nextUniqueId$1++}`;\n    /** Tab index for the chip list. */\n    this._tabIndex = 0;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     */\n    this._userTabIndex = null;\n    /** Function when touched */\n    this._onTouched = () => {};\n    /** Function when changed */\n    this._onChange = () => {};\n    this._multiple = false;\n    this._compareWith = (o1, o2) => o1 === o2;\n    this._disabled = false;\n    /** Orientation of the chip list. */\n    this.ariaOrientation = 'horizontal';\n    this._selectable = true;\n    /** Event emitted when the selected chip list value has been changed by the user. */\n    this.change = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    this.valueChange = new EventEmitter();\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this.chips).withWrap().withVerticalOrientation().withHomeAndEnd().withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n    this._keyManager.tabOut.subscribe(() => this._allowFocusEscape());\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled || !this.selectable) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n      this._resetChips();\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n      this.stateChanges.next();\n    });\n  }\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n      if (this.ngControl.disabled !== this._disabled) {\n        this.disabled = !!this.ngControl.disabled;\n      }\n    }\n  }\n  ngOnDestroy() {\n    this._keyManager?.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n    this._dropSubscriptions();\n  }\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement) {\n    this._chipInput = inputElement;\n    // We use this attribute to match the chip list to its input in test harnesses.\n    // Set the attribute directly here to avoid \"changed after checked\" errors.\n    this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids) {\n    if (ids.length) {\n      this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n    } else {\n      this._elementRef.nativeElement.removeAttribute('aria-describedby');\n    }\n  }\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value) {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(options) {\n    if (this.disabled) {\n      return;\n    }\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput(options);\n      this.stateChanges.next();\n    }\n  }\n  /** Attempt to focus an input if we have one. */\n  _focusInput(options) {\n    if (this._chipInput) {\n      this._chipInput.focus(options);\n    }\n  }\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event) {\n    const target = event.target;\n    if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  _updateTabIndex() {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n    this._lastDestroyedChipIndex = null;\n  }\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  _isValidIndex(index) {\n    return index >= 0 && index < this.chips.length;\n  }\n  _setSelectionByValue(value, isUserInput = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  _selectValue(value, isUserInput = true) {\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value, value);\n    });\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n    return correspondingChip;\n  }\n  _initializeSelection() {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  _clearSelection(skip) {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  _sortValues() {\n    if (this._multiple) {\n      this._selectionModel.clear();\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n  /** Emits change event to set the model value. */\n  _propagateChanges(fallbackValue) {\n    let valueToEmit = null;\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatLegacyChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n  _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n  _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n  /** Listens to user-generated selection events on each chip. */\n  _listenToChipsSelection() {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected ? this._selectionModel.select(event.source) : this._selectionModel.deselect(event.source);\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n  /** Listens to user-generated selection events on each chip. */\n  _listenToChipsFocus() {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex = this.chips.toArray().indexOf(event.chip);\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItem(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n  _listenToChipsRemoved() {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n  /** Checks whether an event comes from inside a chip element. */\n  _originatesFromChip(event) {\n    let currentElement = event.target;\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n      currentElement = currentElement.parentElement;\n    }\n    return false;\n  }\n  /** Checks whether any of the chips is focused. */\n  _hasFocusedChip() {\n    return this.chips && this.chips.some(chip => chip._hasFocus);\n  }\n  /** Syncs the list's state with the individual chips. */\n  _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip._chipListDisabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n        chip.chipListSelectable = this._selectable;\n      });\n    }\n  }\n}\nMatLegacyChipList.ɵfac = function MatLegacyChipList_Factory(t) {\n  return new (t || MatLegacyChipList)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1$1.Directionality, 8), i0.ɵɵdirectiveInject(i2.NgForm, 8), i0.ɵɵdirectiveInject(i2.FormGroupDirective, 8), i0.ɵɵdirectiveInject(i3.ErrorStateMatcher), i0.ɵɵdirectiveInject(i2.NgControl, 10));\n};\nMatLegacyChipList.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatLegacyChipList,\n  selectors: [[\"mat-chip-list\"]],\n  contentQueries: function MatLegacyChipList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatLegacyChip, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chips = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-chip-list\"],\n  hostVars: 14,\n  hostBindings: function MatLegacyChipList_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focus\", function MatLegacyChipList_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatLegacyChipList_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"keydown\", function MatLegacyChipList_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx._uid);\n      i0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n      i0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    }\n  },\n  inputs: {\n    role: \"role\",\n    userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"],\n    errorStateMatcher: \"errorStateMatcher\",\n    multiple: \"multiple\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    required: \"required\",\n    placeholder: \"placeholder\",\n    disabled: \"disabled\",\n    ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"],\n    selectable: \"selectable\",\n    tabIndex: \"tabIndex\"\n  },\n  outputs: {\n    change: \"change\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matChipList\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MatLegacyFormFieldControl,\n    useExisting: MatLegacyChipList\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-chip-list-wrapper\"]],\n  template: function MatLegacyChipList_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵprojection(1);\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:rgba(0,0,0,0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-chip::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 2px) * -1)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}.mat-standard-chip._mat-animation-noopable{transition:none !important;animation:none !important}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip.mat-chip-selected{outline-width:3px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden;transform:translateZ(0)}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyChipList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-chip-list',\n      template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n      exportAs: 'matChipList',\n      host: {\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[attr.aria-required]': 'role ? required : null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.role]': 'role',\n        '[class.mat-chip-list-disabled]': 'disabled',\n        '[class.mat-chip-list-invalid]': 'errorState',\n        '[class.mat-chip-list-required]': 'required',\n        '[attr.aria-orientation]': 'ariaOrientation',\n        'class': 'mat-chip-list',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()',\n        '(keydown)': '_keydown($event)',\n        '[id]': '_uid'\n      },\n      providers: [{\n        provide: MatLegacyFormFieldControl,\n        useExisting: MatLegacyChipList\n      }],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:rgba(0,0,0,0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-chip::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 2px) * -1)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}.mat-standard-chip._mat-animation-noopable{transition:none !important;animation:none !important}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip.mat-chip-selected{outline-width:3px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden;transform:translateZ(0)}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1$1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3.ErrorStateMatcher\n    }, {\n      type: i2.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }];\n  }, {\n    role: [{\n      type: Input\n    }],\n    userAriaDescribedBy: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    ariaOrientation: [{\n      type: Input,\n      args: ['aria-orientation']\n    }],\n    selectable: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    chips: [{\n      type: ContentChildren,\n      args: [MatLegacyChip, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n * @deprecated Use `MatChipInput` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipInput {\n  /** Register input for chip list */\n  set chipList(value) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  get addOnBlur() {\n    return this._addOnBlur;\n  }\n  set addOnBlur(value) {\n    this._addOnBlur = coerceBooleanProperty(value);\n  }\n  /** Whether the input is disabled. */\n  get disabled() {\n    return this._disabled || this._chipList && this._chipList.disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /** Whether the input is empty. */\n  get empty() {\n    return !this.inputElement.value;\n  }\n  constructor(_elementRef, _defaultOptions) {\n    this._elementRef = _elementRef;\n    this._defaultOptions = _defaultOptions;\n    /** Whether the control is focused. */\n    this.focused = false;\n    this._addOnBlur = false;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n    /** Emitted when a chip is to be added. */\n    this.chipEnd = new EventEmitter();\n    /** The input's placeholder text. */\n    this.placeholder = '';\n    /** Unique id for the input. */\n    this.id = `mat-chip-list-input-${nextUniqueId++}`;\n    this._disabled = false;\n    this.inputElement = this._elementRef.nativeElement;\n  }\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n  ngOnDestroy() {\n    this.chipEnd.complete();\n  }\n  ngAfterContentInit() {\n    this._focusLastChipOnBackspace = this.empty;\n  }\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event) {\n    if (event) {\n      // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n      // want to do this when going backwards, because focus should go back to the first chip.\n      if (event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n        this._chipList._allowFocusEscape();\n      }\n      // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n      // We focus the last chip on backspace only after the user has released the backspace button,\n      // and the input is empty (see behaviour in _keyup)\n      if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n        this._chipList._keyManager.setLastItemActive();\n        event.preventDefault();\n        return;\n      } else {\n        this._focusLastChipOnBackspace = false;\n      }\n    }\n    this._emitChipEnd(event);\n  }\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keyup(event) {\n    // Allow user to move focus to chips next time he presses backspace\n    if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n      this._focusLastChipOnBackspace = true;\n      event.preventDefault();\n    }\n  }\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n  _focus() {\n    this.focused = true;\n    this._focusLastChipOnBackspace = this.empty;\n    this._chipList.stateChanges.next();\n  }\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event) {\n    if (!this.inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({\n        input: this.inputElement,\n        value: this.inputElement.value,\n        chipInput: this\n      });\n      event?.preventDefault();\n    }\n  }\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n  /** Focuses the input. */\n  focus(options) {\n    this.inputElement.focus(options);\n  }\n  /** Clears the input */\n  clear() {\n    this.inputElement.value = '';\n    this._focusLastChipOnBackspace = true;\n  }\n  /** Checks whether a keycode is one of the configured separators. */\n  _isSeparatorKey(event) {\n    return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n  }\n}\nMatLegacyChipInput.ɵfac = function MatLegacyChipInput_Factory(t) {\n  return new (t || MatLegacyChipInput)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MAT_LEGACY_CHIPS_DEFAULT_OPTIONS));\n};\nMatLegacyChipInput.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyChipInput,\n  selectors: [[\"input\", \"matChipInputFor\", \"\"]],\n  hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"],\n  hostVars: 5,\n  hostBindings: function MatLegacyChipInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function MatLegacyChipInput_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      })(\"keyup\", function MatLegacyChipInput_keyup_HostBindingHandler($event) {\n        return ctx._keyup($event);\n      })(\"blur\", function MatLegacyChipInput_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"focus\", function MatLegacyChipInput_focus_HostBindingHandler() {\n        return ctx._focus();\n      })(\"input\", function MatLegacyChipInput_input_HostBindingHandler() {\n        return ctx._onInput();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n      i0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    }\n  },\n  inputs: {\n    chipList: [\"matChipInputFor\", \"chipList\"],\n    addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"],\n    separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"],\n    placeholder: \"placeholder\",\n    id: \"id\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    chipEnd: \"matChipInputTokenEnd\"\n  },\n  exportAs: [\"matChipInput\", \"matChipInputFor\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyChipInput, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matChipInputFor]',\n      exportAs: 'matChipInput, matChipInputFor',\n      host: {\n        'class': 'mat-chip-input mat-input-element',\n        '(keydown)': '_keydown($event)',\n        '(keyup)': '_keyup($event)',\n        '(blur)': '_blur()',\n        '(focus)': '_focus()',\n        '(input)': '_onInput()',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n        '[attr.aria-required]': '_chipList && _chipList.required || null'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_LEGACY_CHIPS_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    chipList: [{\n      type: Input,\n      args: ['matChipInputFor']\n    }],\n    addOnBlur: [{\n      type: Input,\n      args: ['matChipInputAddOnBlur']\n    }],\n    separatorKeyCodes: [{\n      type: Input,\n      args: ['matChipInputSeparatorKeyCodes']\n    }],\n    chipEnd: [{\n      type: Output,\n      args: ['matChipInputTokenEnd']\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHIP_DECLARATIONS = [MatLegacyChipList, MatLegacyChip, MatLegacyChipInput, MatLegacyChipRemove, MatLegacyChipAvatar, MatLegacyChipTrailingIcon];\n/**\n * @deprecated Use `MatChipsModule` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipsModule {}\nMatLegacyChipsModule.ɵfac = function MatLegacyChipsModule_Factory(t) {\n  return new (t || MatLegacyChipsModule)();\n};\nMatLegacyChipsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatLegacyChipsModule\n});\nMatLegacyChipsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ErrorStateMatcher, {\n    provide: MAT_LEGACY_CHIPS_DEFAULT_OPTIONS,\n    useValue: {\n      separatorKeyCodes: [ENTER]\n    }\n  }],\n  imports: [MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyChipsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: CHIP_DECLARATIONS,\n      declarations: CHIP_DECLARATIONS,\n      providers: [ErrorStateMatcher, {\n        provide: MAT_LEGACY_CHIPS_DEFAULT_OPTIONS,\n        useValue: {\n          separatorKeyCodes: [ENTER]\n        }\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_LEGACY_CHIPS_DEFAULT_OPTIONS, MAT_LEGACY_CHIP_AVATAR, MAT_LEGACY_CHIP_REMOVE, MAT_LEGACY_CHIP_TRAILING_ICON, MatLegacyChip, MatLegacyChipAvatar, MatLegacyChipInput, MatLegacyChipList, MatLegacyChipListChange, MatLegacyChipRemove, MatLegacyChipSelectionChange, MatLegacyChipTrailingIcon, MatLegacyChipsModule };","map":{"version":3,"names":["SPACE","BACKSPACE","DELETE","TAB","hasModifierKey","ENTER","i0","InjectionToken","Directive","EventEmitter","Optional","Inject","Attribute","ContentChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","Self","ContentChildren","NgModule","i3","mixinTabIndex","mixinColor","mixinDisableRipple","RippleRenderer","MAT_RIPPLE_GLOBAL_OPTIONS","mixinErrorState","MatCommonModule","ErrorStateMatcher","coerceBooleanProperty","i1","DOCUMENT","ANIMATION_MODULE_TYPE","Subject","merge","take","takeUntil","startWith","FocusKeyManager","i1$1","SelectionModel","i2","Validators","MatLegacyFormFieldControl","_c0","MatLegacyChipSelectionChange","constructor","source","selected","isUserInput","MAT_LEGACY_CHIP_REMOVE","MAT_LEGACY_CHIP_AVATAR","MAT_LEGACY_CHIP_TRAILING_ICON","MatChipBase","_elementRef","_MatChipMixinBase","MatLegacyChipAvatar","ɵfac","MatLegacyChipAvatar_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","features","ɵɵProvidersFeature","provide","useExisting","ngDevMode","ɵsetClassMetadata","args","selector","host","providers","MatLegacyChipTrailingIcon","MatLegacyChipTrailingIcon_Factory","MatLegacyChip","rippleDisabled","disabled","disableRipple","_animationsDisabled","rippleConfig","_selected","value","coercedValue","_dispatchSelectionChange","_value","undefined","nativeElement","textContent","selectable","_selectable","chipListSelectable","_chipListDisabled","_disabled","removable","_removable","ariaSelected","_chipListMultiple","toString","elementRef","_ngZone","platform","globalRippleOptions","_changeDetectorRef","_document","animationMode","tabIndex","_hasFocus","role","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRippleTarget","createElement","classList","add","appendChild","_chipRipple","setupTriggerEvents","parseInt","basicChipAttrName","element","hasAttribute","tagName","toLowerCase","ngOnDestroy","emit","chip","_removeTriggerEvents","select","markForCheck","deselect","selectViaInteraction","toggleSelected","focus","next","remove","_handleClick","event","preventDefault","_handleKeydown","keyCode","_blur","onStable","pipe","subscribe","run","MatLegacyChip_Factory","ɵɵdirectiveInject","ElementRef","NgZone","Platform","ChangeDetectorRef","ɵɵinjectAttribute","contentQueries","MatLegacyChip_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","avatar","first","trailingIcon","removeIcon","hostVars","hostBindings","MatLegacyChip_HostBindings","ɵɵlistener","MatLegacyChip_click_HostBindingHandler","$event","MatLegacyChip_keydown_HostBindingHandler","MatLegacyChip_focus_HostBindingHandler","MatLegacyChip_blur_HostBindingHandler","ɵɵattribute","ɵɵclassProp","inputs","color","outputs","exportAs","ɵɵInheritDefinitionFeature","decorators","MatLegacyChipRemove","_parentChip","nodeName","setAttribute","parentChip","stopPropagation","MatLegacyChipRemove_Factory","MatLegacyChipRemove_HostBindings","MatLegacyChipRemove_click_HostBindingHandler","MAT_LEGACY_CHIPS_DEFAULT_OPTIONS","_MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","stateChanges","nextUniqueId$1","MatLegacyChipListChange","MatLegacyChipList","multiple","_selectionModel","_explicitRole","empty","_multiple","_syncChipsState","compareWith","_compareWith","fn","_initializeSelection","writeValue","id","_chipInput","_uid","required","_required","control","hasValidator","placeholder","_placeholder","focused","_hasFocusedChip","chips","length","shouldLabelFloat","_userTabIndex","_tabIndex","chipSelectionChanges","map","chipFocusChanges","chipBlurChanges","chipRemoveChanges","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_onTouched","_onChange","o1","o2","ariaOrientation","change","valueChange","valueAccessor","ngAfterContentInit","_keyManager","withWrap","withVerticalOrientation","withHomeAndEnd","withHorizontalOrientation","dir","tabOut","_allowFocusEscape","changes","Promise","resolve","then","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","ngOnInit","ngDoCheck","updateErrorState","destroy","complete","_dropSubscriptions","registerInput","inputElement","setDescribedByIds","ids","join","removeAttribute","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","onContainerClick","_originatesFromChip","options","setFirstItemActive","_focusInput","_keydown","target","contains","onKeydown","newChipIndex","Math","min","setActiveItem","_isValidIndex","index","_clearSelection","forEach","Array","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","skip","clear","_propagateChanges","fallbackValue","valueToEmit","setTimeout","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","unsubscribe","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","isSelected","chipIndex","toArray","indexOf","updateActiveItem","currentElement","parentElement","some","MatLegacyChipList_Factory","Directionality","NgForm","FormGroupDirective","NgControl","ɵcmp","ɵɵdefineComponent","MatLegacyChipList_ContentQueries","MatLegacyChipList_HostBindings","MatLegacyChipList_focus_HostBindingHandler","MatLegacyChipList_blur_HostBindingHandler","MatLegacyChipList_keydown_HostBindingHandler","ɵɵhostProperty","errorState","userAriaDescribedBy","errorStateMatcher","ngContentSelectors","decls","vars","consts","template","MatLegacyChipList_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","styles","encapsulation","changeDetection","None","OnPush","descendants","nextUniqueId","MatLegacyChipInput","chipList","_chipList","addOnBlur","_addOnBlur","_defaultOptions","separatorKeyCodes","chipEnd","ngOnChanges","_focusLastChipOnBackspace","setLastItemActive","_emitChipEnd","_keyup","_focus","_isSeparatorKey","input","chipInput","_onInput","Set","has","MatLegacyChipInput_Factory","MatLegacyChipInput_HostBindings","MatLegacyChipInput_keydown_HostBindingHandler","MatLegacyChipInput_keyup_HostBindingHandler","MatLegacyChipInput_blur_HostBindingHandler","MatLegacyChipInput_focus_HostBindingHandler","MatLegacyChipInput_input_HostBindingHandler","invalid","ɵɵNgOnChangesFeature","CHIP_DECLARATIONS","MatLegacyChipsModule","MatLegacyChipsModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","useValue","imports","exports","declarations"],"sources":["C:/Users/CSEG/Desktop/thassign/node_modules/@angular/material/fesm2020/legacy-chips.mjs"],"sourcesContent":["import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Optional, Inject, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport * as i3 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, MatCommonModule, ErrorStateMatcher } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport * as i1$1 from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { MatLegacyFormFieldControl } from '@angular/material/legacy-form-field';\n\n/**\n * Event object emitted by MatChip when selected or deselected.\n * @deprecated Use `MatChipSelectionChange` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipSelectionChange {\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source, \n    /** Whether the chip that emitted the event is selected. */\n    selected, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n * @deprecated Use `MAT_CHIP_REMOVE` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n * @deprecated Use `MAT_CHIP_AVATAR` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n * @deprecated Use `MAT_CHIP_TRAILING_ICON` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n * @deprecated Use `MatChipAvatar` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipAvatar {\n}\nMatLegacyChipAvatar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyChipAvatar, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyChipAvatar.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyChipAvatar, selector: \"mat-chip-avatar, [matChipAvatar]\", host: { classAttribute: \"mat-chip-avatar\" }, providers: [{ provide: MAT_LEGACY_CHIP_AVATAR, useExisting: MatLegacyChipAvatar }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyChipAvatar, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-chip-avatar, [matChipAvatar]',\n                    host: { 'class': 'mat-chip-avatar' },\n                    providers: [{ provide: MAT_LEGACY_CHIP_AVATAR, useExisting: MatLegacyChipAvatar }],\n                }]\n        }] });\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n * @deprecated Use `MatChipTrailingIcon` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipTrailingIcon {\n}\nMatLegacyChipTrailingIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyChipTrailingIcon, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyChipTrailingIcon.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyChipTrailingIcon, selector: \"mat-chip-trailing-icon, [matChipTrailingIcon]\", host: { classAttribute: \"mat-chip-trailing-icon\" }, providers: [{ provide: MAT_LEGACY_CHIP_TRAILING_ICON, useExisting: MatLegacyChipTrailingIcon }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyChipTrailingIcon, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                    host: { 'class': 'mat-chip-trailing-icon' },\n                    providers: [{ provide: MAT_LEGACY_CHIP_TRAILING_ICON, useExisting: MatLegacyChipTrailingIcon }],\n                }]\n        }] });\n/**\n * Material Design styled chip directive. Used inside the MatChipList component.\n * @deprecated Use `MatChip` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChip extends _MatChipMixinBase {\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    get rippleDisabled() {\n        return (this.disabled ||\n            this.disableRipple ||\n            this._animationsDisabled ||\n            !!this.rippleConfig.disabled);\n    }\n    /** Whether the chip is selected. */\n    get selected() {\n        return this._selected;\n    }\n    set selected(value) {\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n    get value() {\n        return this._value !== undefined ? this._value : this._elementRef.nativeElement.textContent;\n    }\n    set value(value) {\n        this._value = value;\n    }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     */\n    get selectable() {\n        return this._selectable && this.chipListSelectable;\n    }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /** Whether the chip is disabled. */\n    get disabled() {\n        return this._chipListDisabled || this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    get removable() {\n        return this._removable;\n    }\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /** The ARIA selected applied to the chip. */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected)\n            ? this.selected.toString()\n            : null;\n    }\n    constructor(elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n        super(elementRef);\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Whether the chip has focus. */\n        this._hasFocus = false;\n        /** Whether the chip list is selectable */\n        this.chipListSelectable = true;\n        /** Whether the chip list is in multi-selection mode. */\n        this._chipListMultiple = false;\n        /** Whether the chip list as a whole is disabled. */\n        this._chipListDisabled = false;\n        /** ARIA role that should be applied to the chip. */\n        this.role = 'option';\n        this._selected = false;\n        this._selectable = true;\n        this._disabled = false;\n        this._removable = true;\n        /** Emits when the chip is focused. */\n        this._onFocus = new Subject();\n        /** Emits when the chip is blurred. */\n        this._onBlur = new Subject();\n        /** Emitted when the chip is selected or deselected. */\n        this.selectionChange = new EventEmitter();\n        /** Emitted when the chip is destroyed. */\n        this.destroyed = new EventEmitter();\n        /** Emitted when a chip is to be removed. */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        // Dynamically create the ripple target, append it within the chip, and use it as the\n        // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n        // the proper styles.\n        this._chipRippleTarget = _document.createElement('div');\n        this._chipRippleTarget.classList.add('mat-chip-ripple');\n        this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n        this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n        this._chipRipple.setupTriggerEvents(elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n        this.tabIndex = tabIndex != null ? parseInt(tabIndex) || -1 : -1;\n    }\n    _addHostClassName() {\n        const basicChipAttrName = 'mat-basic-chip';\n        const element = this._elementRef.nativeElement;\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /** Selects the chip. */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Deselects the chip. */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Select this chip and emit selected event */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._changeDetectorRef.markForCheck();\n        return this.selected;\n    }\n    /** Allows for programmatic focusing of the chip. */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /** Handles click events on the chip. */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n    }\n    /** Handle custom key presses. */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            });\n        });\n    }\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected,\n        });\n    }\n}\nMatLegacyChip.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyChip, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i1.Platform }, { token: MAT_RIPPLE_GLOBAL_OPTIONS, optional: true }, { token: i0.ChangeDetectorRef }, { token: DOCUMENT }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyChip.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyChip, selector: \"mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]\", inputs: { color: \"color\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", role: \"role\", selected: \"selected\", value: \"value\", selectable: \"selectable\", disabled: \"disabled\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, host: { listeners: { \"click\": \"_handleClick($event)\", \"keydown\": \"_handleKeydown($event)\", \"focus\": \"focus()\", \"blur\": \"_blur()\" }, properties: { \"attr.tabindex\": \"disabled ? null : tabIndex\", \"attr.role\": \"role\", \"class.mat-chip-selected\": \"selected\", \"class.mat-chip-with-avatar\": \"avatar\", \"class.mat-chip-with-trailing-icon\": \"trailingIcon || removeIcon\", \"class.mat-chip-disabled\": \"disabled\", \"class._mat-animation-noopable\": \"_animationsDisabled\", \"attr.disabled\": \"disabled || null\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-selected\": \"ariaSelected\" }, classAttribute: \"mat-chip mat-focus-indicator\" }, queries: [{ propertyName: \"avatar\", first: true, predicate: MAT_LEGACY_CHIP_AVATAR, descendants: true }, { propertyName: \"trailingIcon\", first: true, predicate: MAT_LEGACY_CHIP_TRAILING_ICON, descendants: true }, { propertyName: \"removeIcon\", first: true, predicate: MAT_LEGACY_CHIP_REMOVE, descendants: true }], exportAs: [\"matChip\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyChip, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                    inputs: ['color', 'disableRipple', 'tabIndex'],\n                    exportAs: 'matChip',\n                    host: {\n                        'class': 'mat-chip mat-focus-indicator',\n                        '[attr.tabindex]': 'disabled ? null : tabIndex',\n                        '[attr.role]': 'role',\n                        '[class.mat-chip-selected]': 'selected',\n                        '[class.mat-chip-with-avatar]': 'avatar',\n                        '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                        '[class.mat-chip-disabled]': 'disabled',\n                        '[class._mat-animation-noopable]': '_animationsDisabled',\n                        '[attr.disabled]': 'disabled || null',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-selected]': 'ariaSelected',\n                        '(click)': '_handleClick($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': 'focus()',\n                        '(blur)': '_blur()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }]; }, propDecorators: { avatar: [{\n                type: ContentChild,\n                args: [MAT_LEGACY_CHIP_AVATAR]\n            }], trailingIcon: [{\n                type: ContentChild,\n                args: [MAT_LEGACY_CHIP_TRAILING_ICON]\n            }], removeIcon: [{\n                type: ContentChild,\n                args: [MAT_LEGACY_CHIP_REMOVE]\n            }], role: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], selectable: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], removable: [{\n                type: Input\n            }], selectionChange: [{\n                type: Output\n            }], destroyed: [{\n                type: Output\n            }], removed: [{\n                type: Output\n            }] } });\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n *\n * @deprecated Use `MatChipRemove` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipRemove {\n    constructor(_parentChip, elementRef) {\n        this._parentChip = _parentChip;\n        if (elementRef.nativeElement.nodeName === 'BUTTON') {\n            elementRef.nativeElement.setAttribute('type', 'button');\n        }\n    }\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(event) {\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n        event.preventDefault();\n    }\n}\nMatLegacyChipRemove.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyChipRemove, deps: [{ token: MatLegacyChip }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyChipRemove.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyChipRemove, selector: \"[matChipRemove]\", host: { listeners: { \"click\": \"_handleClick($event)\" }, classAttribute: \"mat-chip-remove mat-chip-trailing-icon\" }, providers: [{ provide: MAT_LEGACY_CHIP_REMOVE, useExisting: MatLegacyChipRemove }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyChipRemove, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matChipRemove]',\n                    host: {\n                        'class': 'mat-chip-remove mat-chip-trailing-icon',\n                        '(click)': '_handleClick($event)',\n                    },\n                    providers: [{ provide: MAT_LEGACY_CHIP_REMOVE, useExisting: MatLegacyChipRemove }],\n                }]\n        }], ctorParameters: function () { return [{ type: MatLegacyChip }, { type: i0.ElementRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token to be used to override the default options for the chips module.\n * @deprecated Use `MAT_CHIPS_DEFAULT_OPTIONS` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nconst _MatChipListBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /**\n     * Form control bound to the component.\n     * Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form-field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n    }\n});\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId$1 = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n * @deprecated Use `MatChipListChange` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipListChange {\n    constructor(\n    /** Chip list that emitted the event. */\n    source, \n    /** Value of the chip list when the event was emitted. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n * @deprecated Use `MatChipList` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipList extends _MatChipListBase {\n    /** The array of selected chips inside chip list. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The ARIA role applied to the chip list. */\n    get role() {\n        if (this._explicitRole) {\n            return this._explicitRole;\n        }\n        return this.empty ? null : 'listbox';\n    }\n    set role(role) {\n        this._explicitRole = role;\n    }\n    /** Whether the user should be allowed to select multiple chips. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return !this.empty || this.focused;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n    get selectable() {\n        return this._selectable;\n    }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /** Combined stream of all of the child chips' selection change events. */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /** Combined stream of all of the child chips' focus change events. */\n    get chipFocusChanges() {\n        return merge(...this.chips.map(chip => chip._onFocus));\n    }\n    /** Combined stream of all of the child chips' blur change events. */\n    get chipBlurChanges() {\n        return merge(...this.chips.map(chip => chip._onBlur));\n    }\n    /** Combined stream of all of the child chips' remove change events. */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map(chip => chip.destroyed));\n    }\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Uid of the chip list */\n        this._uid = `mat-chip-list-${nextUniqueId$1++}`;\n        /** Tab index for the chip list. */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /** Function when touched */\n        this._onTouched = () => { };\n        /** Function when changed */\n        this._onChange = () => { };\n        this._multiple = false;\n        this._compareWith = (o1, o2) => o1 === o2;\n        this._disabled = false;\n        /** Orientation of the chip list. */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /** Event emitted when the selected chip list value has been changed by the user. */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHomeAndEnd()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n        }\n        this._keyManager.tabOut.subscribe(() => this._allowFocusEscape());\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            if (this.disabled || !this.selectable) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then(() => {\n                    this._syncChipsState();\n                });\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        });\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            if (this.ngControl.disabled !== this._disabled) {\n                this.disabled = !!this.ngControl.disabled;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /** Associates an HTML input element with this chip list. */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n        // We use this attribute to match the chip list to its input in test harnesses.\n        // Set the attribute directly here to avoid \"changed after checked\" errors.\n        this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /** Attempt to focus an input if we have one. */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keydown(event) {\n        const target = event.target;\n        if (target && target.classList.contains('mat-chip')) {\n            this._keyManager.onKeydown(event);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach(chip => chip.deselect());\n        if (Array.isArray(value)) {\n            value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n            this._sortValues();\n        }\n        else {\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        const correspondingChip = this.chips.find(chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        });\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach(chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach(chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(chip => chip.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatLegacyChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                });\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /** Mark the field as touched */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout(() => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach(chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        });\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n            this._blur();\n            this.stateChanges.next();\n        });\n    }\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n            const chip = event.chip;\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        });\n    }\n    /** Checks whether an event comes from inside a chip element. */\n    _originatesFromChip(event) {\n        let currentElement = event.target;\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /** Checks whether any of the chips is focused. */\n    _hasFocusedChip() {\n        return this.chips && this.chips.some(chip => chip._hasFocus);\n    }\n    /** Syncs the list's state with the individual chips. */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach(chip => {\n                chip._chipListDisabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n                chip.chipListSelectable = this._selectable;\n            });\n        }\n    }\n}\nMatLegacyChipList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyChipList, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1$1.Directionality, optional: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i3.ErrorStateMatcher }, { token: i2.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });\nMatLegacyChipList.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyChipList, selector: \"mat-chip-list\", inputs: { role: \"role\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], errorStateMatcher: \"errorStateMatcher\", multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], selectable: \"selectable\", tabIndex: \"tabIndex\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, host: { listeners: { \"focus\": \"focus()\", \"blur\": \"_blur()\", \"keydown\": \"_keydown($event)\" }, properties: { \"attr.tabindex\": \"disabled ? null : _tabIndex\", \"attr.aria-required\": \"role ? required : null\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-multiselectable\": \"multiple\", \"attr.role\": \"role\", \"class.mat-chip-list-disabled\": \"disabled\", \"class.mat-chip-list-invalid\": \"errorState\", \"class.mat-chip-list-required\": \"required\", \"attr.aria-orientation\": \"ariaOrientation\", \"id\": \"_uid\" }, classAttribute: \"mat-chip-list\" }, providers: [{ provide: MatLegacyFormFieldControl, useExisting: MatLegacyChipList }], queries: [{ propertyName: \"chips\", predicate: MatLegacyChip, descendants: true }], exportAs: [\"matChipList\"], usesInheritance: true, ngImport: i0, template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`, isInline: true, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:rgba(0,0,0,0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-chip::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 2px) * -1)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}.mat-standard-chip._mat-animation-noopable{transition:none !important;animation:none !important}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip.mat-chip-selected{outline-width:3px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden;transform:translateZ(0)}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyChipList, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-chip-list', template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`, exportAs: 'matChipList', host: {\n                        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                        '[attr.aria-required]': 'role ? required : null',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-multiselectable]': 'multiple',\n                        '[attr.role]': 'role',\n                        '[class.mat-chip-list-disabled]': 'disabled',\n                        '[class.mat-chip-list-invalid]': 'errorState',\n                        '[class.mat-chip-list-required]': 'required',\n                        '[attr.aria-orientation]': 'ariaOrientation',\n                        'class': 'mat-chip-list',\n                        '(focus)': 'focus()',\n                        '(blur)': '_blur()',\n                        '(keydown)': '_keydown($event)',\n                        '[id]': '_uid',\n                    }, providers: [{ provide: MatLegacyFormFieldControl, useExisting: MatLegacyChipList }], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:rgba(0,0,0,0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-chip::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 2px) * -1)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}.mat-standard-chip._mat-animation-noopable{transition:none !important;animation:none !important}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip.mat-chip-selected{outline-width:3px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden;transform:translateZ(0)}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i2.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i2.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i3.ErrorStateMatcher }, { type: i2.NgControl, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }]; }, propDecorators: { role: [{\n                type: Input\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], ariaOrientation: [{\n                type: Input,\n                args: ['aria-orientation']\n            }], selectable: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }], chips: [{\n                type: ContentChildren,\n                args: [MatLegacyChip, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n * @deprecated Use `MatChipInput` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipInput {\n    /** Register input for chip list */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    get addOnBlur() {\n        return this._addOnBlur;\n    }\n    set addOnBlur(value) {\n        this._addOnBlur = coerceBooleanProperty(value);\n    }\n    /** Whether the input is disabled. */\n    get disabled() {\n        return this._disabled || (this._chipList && this._chipList.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /** Whether the input is empty. */\n    get empty() {\n        return !this.inputElement.value;\n    }\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /** Whether the control is focused. */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /** Emitted when a chip is to be added. */\n        this.chipEnd = new EventEmitter();\n        /** The input's placeholder text. */\n        this.placeholder = '';\n        /** Unique id for the input. */\n        this.id = `mat-chip-list-input-${nextUniqueId++}`;\n        this._disabled = false;\n        this.inputElement = this._elementRef.nativeElement;\n    }\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.chipEnd.complete();\n    }\n    ngAfterContentInit() {\n        this._focusLastChipOnBackspace = this.empty;\n    }\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event) {\n        if (event) {\n            // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n            // want to do this when going backwards, because focus should go back to the first chip.\n            if (event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n                this._chipList._allowFocusEscape();\n            }\n            // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n            // We focus the last chip on backspace only after the user has released the backspace button,\n            // and the input is empty (see behaviour in _keyup)\n            if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n                this._chipList._keyManager.setLastItemActive();\n                event.preventDefault();\n                return;\n            }\n            else {\n                this._focusLastChipOnBackspace = false;\n            }\n        }\n        this._emitChipEnd(event);\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keyup(event) {\n        // Allow user to move focus to chips next time he presses backspace\n        if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n            this._focusLastChipOnBackspace = true;\n            event.preventDefault();\n        }\n    }\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    _focus() {\n        this.focused = true;\n        this._focusLastChipOnBackspace = this.empty;\n        this._chipList.stateChanges.next();\n    }\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event) {\n        if (!this.inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({\n                input: this.inputElement,\n                value: this.inputElement.value,\n                chipInput: this,\n            });\n            event?.preventDefault();\n        }\n    }\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this.inputElement.focus(options);\n    }\n    /** Clears the input */\n    clear() {\n        this.inputElement.value = '';\n        this._focusLastChipOnBackspace = true;\n    }\n    /** Checks whether a keycode is one of the configured separators. */\n    _isSeparatorKey(event) {\n        return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n    }\n}\nMatLegacyChipInput.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyChipInput, deps: [{ token: i0.ElementRef }, { token: MAT_LEGACY_CHIPS_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyChipInput.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyChipInput, selector: \"input[matChipInputFor]\", inputs: { chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, host: { listeners: { \"keydown\": \"_keydown($event)\", \"keyup\": \"_keyup($event)\", \"blur\": \"_blur()\", \"focus\": \"_focus()\", \"input\": \"_onInput()\" }, properties: { \"id\": \"id\", \"attr.disabled\": \"disabled || null\", \"attr.placeholder\": \"placeholder || null\", \"attr.aria-invalid\": \"_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null\", \"attr.aria-required\": \"_chipList && _chipList.required || null\" }, classAttribute: \"mat-chip-input mat-input-element\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyChipInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[matChipInputFor]',\n                    exportAs: 'matChipInput, matChipInputFor',\n                    host: {\n                        'class': 'mat-chip-input mat-input-element',\n                        '(keydown)': '_keydown($event)',\n                        '(keyup)': '_keyup($event)',\n                        '(blur)': '_blur()',\n                        '(focus)': '_focus()',\n                        '(input)': '_onInput()',\n                        '[id]': 'id',\n                        '[attr.disabled]': 'disabled || null',\n                        '[attr.placeholder]': 'placeholder || null',\n                        '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                        '[attr.aria-required]': '_chipList && _chipList.required || null',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_LEGACY_CHIPS_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { chipList: [{\n                type: Input,\n                args: ['matChipInputFor']\n            }], addOnBlur: [{\n                type: Input,\n                args: ['matChipInputAddOnBlur']\n            }], separatorKeyCodes: [{\n                type: Input,\n                args: ['matChipInputSeparatorKeyCodes']\n            }], chipEnd: [{\n                type: Output,\n                args: ['matChipInputTokenEnd']\n            }], placeholder: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHIP_DECLARATIONS = [\n    MatLegacyChipList,\n    MatLegacyChip,\n    MatLegacyChipInput,\n    MatLegacyChipRemove,\n    MatLegacyChipAvatar,\n    MatLegacyChipTrailingIcon,\n];\n/**\n * @deprecated Use `MatChipsModule` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipsModule {\n}\nMatLegacyChipsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyChipsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatLegacyChipsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyChipsModule, declarations: [MatLegacyChipList,\n        MatLegacyChip,\n        MatLegacyChipInput,\n        MatLegacyChipRemove,\n        MatLegacyChipAvatar,\n        MatLegacyChipTrailingIcon], imports: [MatCommonModule], exports: [MatLegacyChipList,\n        MatLegacyChip,\n        MatLegacyChipInput,\n        MatLegacyChipRemove,\n        MatLegacyChipAvatar,\n        MatLegacyChipTrailingIcon] });\nMatLegacyChipsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyChipsModule, providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_LEGACY_CHIPS_DEFAULT_OPTIONS,\n            useValue: {\n                separatorKeyCodes: [ENTER],\n            },\n        },\n    ], imports: [MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyChipsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: CHIP_DECLARATIONS,\n                    declarations: CHIP_DECLARATIONS,\n                    providers: [\n                        ErrorStateMatcher,\n                        {\n                            provide: MAT_LEGACY_CHIPS_DEFAULT_OPTIONS,\n                            useValue: {\n                                separatorKeyCodes: [ENTER],\n                            },\n                        },\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_LEGACY_CHIPS_DEFAULT_OPTIONS, MAT_LEGACY_CHIP_AVATAR, MAT_LEGACY_CHIP_REMOVE, MAT_LEGACY_CHIP_TRAILING_ICON, MatLegacyChip, MatLegacyChipAvatar, MatLegacyChipInput, MatLegacyChipList, MatLegacyChipListChange, MatLegacyChipRemove, MatLegacyChipSelectionChange, MatLegacyChipTrailingIcon, MatLegacyChipsModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}