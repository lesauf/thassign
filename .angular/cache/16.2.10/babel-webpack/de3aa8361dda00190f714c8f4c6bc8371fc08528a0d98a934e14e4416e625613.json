{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, Optional, PLATFORM_ID, NgZone, NgModule } from '@angular/core';\nimport { asyncScheduler, Observable, from, of } from 'rxjs';\nimport { startWith, pairwise, map, scan, distinctUntilChanged, filter, observeOn } from 'rxjs/operators';\nimport * as i1 from '@angular/fire';\nimport { ɵAngularFireSchedulers, ɵkeepUnstableUntilFirstFactory, ɵfirebaseAppFactory, ɵlogAuthEmulatorError, ɵfetchInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire';\nimport { isPlatformServer } from '@angular/common';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport * as i2 from '@angular/fire/auth';\nimport { USE_EMULATOR as USE_EMULATOR$1 } from '@angular/fire/auth';\nfunction _fromRef(ref, scheduler = asyncScheduler) {\n  return new Observable(subscriber => {\n    let unsubscribe;\n    if (scheduler != null) {\n      scheduler.schedule(() => {\n        unsubscribe = ref.onSnapshot({\n          includeMetadataChanges: true\n        }, subscriber);\n      });\n    } else {\n      unsubscribe = ref.onSnapshot({\n        includeMetadataChanges: true\n      }, subscriber);\n    }\n    return () => {\n      if (unsubscribe != null) {\n        unsubscribe();\n      }\n    };\n  });\n}\nfunction fromRef(ref, scheduler) {\n  return _fromRef(ref, scheduler);\n}\nfunction fromDocRef(ref, scheduler) {\n  return fromRef(ref, scheduler).pipe(startWith(undefined), pairwise(), map(([priorPayload, payload]) => {\n    if (!payload.exists) {\n      return {\n        payload,\n        type: 'removed'\n      };\n    }\n    if (!(priorPayload === null || priorPayload === void 0 ? void 0 : priorPayload.exists)) {\n      return {\n        payload,\n        type: 'added'\n      };\n    }\n    return {\n      payload,\n      type: 'modified'\n    };\n  }));\n}\nfunction fromCollectionRef(ref, scheduler) {\n  return fromRef(ref, scheduler).pipe(map(payload => ({\n    payload,\n    type: 'query'\n  })));\n}\n\n/**\n * Return a stream of document changes on a query. These results are not in sort order but in\n * order of occurence.\n */\nfunction docChanges(query, scheduler) {\n  return fromCollectionRef(query, scheduler).pipe(startWith(undefined), pairwise(), map(([priorAction, action]) => {\n    const docChanges = action.payload.docChanges();\n    const actions = docChanges.map(change => ({\n      type: change.type,\n      payload: change\n    }));\n    // the metadata has changed from the prior emission\n    if (priorAction && JSON.stringify(priorAction.payload.metadata) !== JSON.stringify(action.payload.metadata)) {\n      // go through all the docs in payload and figure out which ones changed\n      action.payload.docs.forEach((currentDoc, currentIndex) => {\n        const docChange = docChanges.find(d => d.doc.ref.isEqual(currentDoc.ref));\n        const priorDoc = priorAction === null || priorAction === void 0 ? void 0 : priorAction.payload.docs.find(d => d.ref.isEqual(currentDoc.ref));\n        if (docChange && JSON.stringify(docChange.doc.metadata) === JSON.stringify(currentDoc.metadata) || !docChange && priorDoc && JSON.stringify(priorDoc.metadata) === JSON.stringify(currentDoc.metadata)) {\n          // document doesn't appear to have changed, don't log another action\n        } else {\n          // since the actions are processed in order just push onto the array\n          actions.push({\n            type: 'modified',\n            payload: {\n              oldIndex: currentIndex,\n              newIndex: currentIndex,\n              type: 'modified',\n              doc: currentDoc\n            }\n          });\n        }\n      });\n    }\n    return actions;\n  }));\n}\n/**\n * Return a stream of document changes on a query. These results are in sort order.\n */\nfunction sortedChanges(query, events, scheduler) {\n  return docChanges(query, scheduler).pipe(scan((current, changes) => combineChanges(current, changes.map(it => it.payload), events), []), distinctUntilChanged(),\n  // cut down on unneed change cycles\n  map(changes => changes.map(c => ({\n    type: c.type,\n    payload: c\n  }))));\n}\n/**\n * Combines the total result set from the current set of changes from an incoming set\n * of changes.\n */\nfunction combineChanges(current, changes, events) {\n  changes.forEach(change => {\n    // skip unwanted change types\n    if (events.indexOf(change.type) > -1) {\n      current = combineChange(current, change);\n    }\n  });\n  return current;\n}\n/**\n * Splice arguments on top of a sliced array, to break top-level ===\n * this is useful for change-detection\n */\nfunction sliceAndSplice(original, start, deleteCount, ...args) {\n  const returnArray = original.slice();\n  returnArray.splice(start, deleteCount, ...args);\n  return returnArray;\n}\n/**\n * Creates a new sorted array from a new change.\n * Build our own because we allow filtering of action types ('added', 'removed', 'modified') before scanning\n * and so we have greater control over change detection (by breaking ===)\n */\nfunction combineChange(combined, change) {\n  switch (change.type) {\n    case 'added':\n      if (combined[change.newIndex] && combined[change.newIndex].doc.ref.isEqual(change.doc.ref)) {\n        // Not sure why the duplicates are getting fired\n      } else {\n        return sliceAndSplice(combined, change.newIndex, 0, change);\n      }\n      break;\n    case 'modified':\n      if (combined[change.oldIndex] == null || combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        // When an item changes position we first remove it\n        // and then add it's new position\n        if (change.oldIndex !== change.newIndex) {\n          const copiedArray = combined.slice();\n          copiedArray.splice(change.oldIndex, 1);\n          copiedArray.splice(change.newIndex, 0, change);\n          return copiedArray;\n        } else {\n          return sliceAndSplice(combined, change.newIndex, 1, change);\n        }\n      }\n      break;\n    case 'removed':\n      if (combined[change.oldIndex] && combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        return sliceAndSplice(combined, change.oldIndex, 1);\n      }\n      break;\n  }\n  return combined;\n}\nfunction validateEventsArray(events) {\n  if (!events || events.length === 0) {\n    events = ['added', 'removed', 'modified'];\n  }\n  return events;\n}\n/**\n * AngularFirestoreCollection service\n *\n * This class creates a reference to a Firestore Collection. A reference and a query are provided in\n * in the constructor. The query can be the unqueried reference if no query is desired.The class\n * is generic which gives you type safety for data update methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionRef = firebase.firestore.collection('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollection<Stock>(collectionRef, query);\n *\n * // NOTE!: the updates are performed on the reference not the query\n * await fakeStock.add({ name: 'FAKE', price: 0.01 });\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n */\nclass AngularFirestoreCollection {\n  /**\n   * The constructor takes in a CollectionReference and Query to provide wrapper methods\n   * for data operations and data streaming.\n   *\n   * Note: Data operation methods are done on the reference not the query. This means\n   * when you update data it is not updating data to the window of your query unless\n   * the data fits the criteria of the query. See the AssociatedRefence type for details\n   * on this implication.\n   */\n  constructor(ref, query, afs) {\n    this.ref = ref;\n    this.query = query;\n    this.afs = afs;\n  }\n  /**\n   * Listen to the latest change in the stream. This method returns changes\n   * as they occur and they are not sorted by query order. This allows you to construct\n   * your own data structure.\n   */\n  stateChanges(events) {\n    let source = docChanges(this.query, this.afs.schedulers.outsideAngular);\n    if (events && events.length > 0) {\n      source = source.pipe(map(actions => actions.filter(change => events.indexOf(change.type) > -1)));\n    }\n    return source.pipe(\n    // We want to filter out empty arrays, but always emit at first, so the developer knows\n    // that the collection has been resolve; even if it's empty\n    startWith(undefined), pairwise(), filter(([prior, current]) => current.length > 0 || !prior), map(([prior, current]) => current), this.afs.keepUnstableUntilFirst);\n  }\n  /**\n   * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n   * but it collects each event in an array over time.\n   */\n  auditTrail(events) {\n    return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n  }\n  /**\n   * Create a stream of synchronized changes. This method keeps the local array in sorted\n   * query order.\n   */\n  snapshotChanges(events) {\n    const validatedEvents = validateEventsArray(events);\n    const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n    return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);\n  }\n  valueChanges(options = {}) {\n    return fromCollectionRef(this.query, this.afs.schedulers.outsideAngular).pipe(map(actions => actions.payload.docs.map(a => {\n      if (options.idField) {\n        return Object.assign(Object.assign({}, a.data()), {\n          [options.idField]: a.id\n        });\n      } else {\n        return a.data();\n      }\n    })), this.afs.keepUnstableUntilFirst);\n  }\n  /**\n   * Retrieve the results of the query once.\n   */\n  get(options) {\n    return from(this.query.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\n  }\n  /**\n   * Add data to a collection reference.\n   *\n   * Note: Data operation methods are done on the reference not the query. This means\n   * when you update data it is not updating data to the window of your query unless\n   * the data fits the criteria of the query.\n   */\n  add(data) {\n    return this.ref.add(data);\n  }\n  /**\n   * Create a reference to a single document in a collection.\n   */\n  doc(path) {\n    // TODO is there a better way to solve this type issue\n    return new AngularFirestoreDocument(this.ref.doc(path), this.afs);\n  }\n}\n\n/**\n * AngularFirestoreDocument service\n *\n * This class creates a reference to a Firestore Document. A reference is provided in\n * in the constructor. The class is generic which gives you type safety for data update\n * methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const fakeStock = new AngularFirestoreDocument<Stock>(doc('stocks/FAKE'));\n * await fakeStock.set({ name: 'FAKE', price: 0.01 });\n * fakeStock.valueChanges().map(snap => {\n *   if(snap.exists) return snap.data();\n *   return null;\n * }).subscribe(value => console.log(value));\n * // OR! Transform using Observable.from() and the data is unwrapped for you\n * Observable.from(fakeStock).subscribe(value => console.log(value));\n */\nclass AngularFirestoreDocument {\n  /**\n   * The constructor takes in a DocumentReference to provide wrapper methods\n   * for data operations, data streaming, and Symbol.observable.\n   */\n  constructor(ref, afs) {\n    this.ref = ref;\n    this.afs = afs;\n  }\n  /**\n   * Create or overwrite a single document.\n   */\n  set(data, options) {\n    return this.ref.set(data, options);\n  }\n  /**\n   * Update some fields of a document without overwriting the entire document.\n   */\n  update(data) {\n    return this.ref.update(data);\n  }\n  /**\n   * Delete a document.\n   */\n  delete() {\n    return this.ref.delete();\n  }\n  /**\n   * Create a reference to a sub-collection given a path and an optional query\n   * function.\n   */\n  collection(path, queryFn) {\n    const collectionRef = this.ref.collection(path);\n    const {\n      ref,\n      query\n    } = associateQuery(collectionRef, queryFn);\n    return new AngularFirestoreCollection(ref, query, this.afs);\n  }\n  /**\n   * Listen to snapshot updates from the document.\n   */\n  snapshotChanges() {\n    const scheduledFromDocRef$ = fromDocRef(this.ref, this.afs.schedulers.outsideAngular);\n    return scheduledFromDocRef$.pipe(this.afs.keepUnstableUntilFirst);\n  }\n  valueChanges(options = {}) {\n    return this.snapshotChanges().pipe(map(({\n      payload\n    }) => options.idField ? Object.assign(Object.assign({}, payload.data()), {\n      [options.idField]: payload.id\n    }) : payload.data()));\n  }\n  /**\n   * Retrieve the document once.\n   */\n  get(options) {\n    return from(this.ref.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\n  }\n}\n\n/**\n * AngularFirestoreCollectionGroup service\n *\n * This class holds a reference to a Firestore Collection Group Query.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionGroup = firebase.firestore.collectionGroup('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollectionGroup<Stock>(query, afs);\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n */\nclass AngularFirestoreCollectionGroup {\n  /**\n   * The constructor takes in a CollectionGroupQuery to provide wrapper methods\n   * for data operations and data streaming.\n   */\n  constructor(query, afs) {\n    this.query = query;\n    this.afs = afs;\n  }\n  /**\n   * Listen to the latest change in the stream. This method returns changes\n   * as they occur and they are not sorted by query order. This allows you to construct\n   * your own data structure.\n   */\n  stateChanges(events) {\n    if (!events || events.length === 0) {\n      return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst);\n    }\n    return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(map(actions => actions.filter(change => events.indexOf(change.type) > -1)), filter(changes => changes.length > 0), this.afs.keepUnstableUntilFirst);\n  }\n  /**\n   * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n   * but it collects each event in an array over time.\n   */\n  auditTrail(events) {\n    return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n  }\n  /**\n   * Create a stream of synchronized changes. This method keeps the local array in sorted\n   * query order.\n   */\n  snapshotChanges(events) {\n    const validatedEvents = validateEventsArray(events);\n    const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n    return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);\n  }\n  valueChanges(options = {}) {\n    const fromCollectionRefScheduled$ = fromCollectionRef(this.query, this.afs.schedulers.outsideAngular);\n    return fromCollectionRefScheduled$.pipe(map(actions => actions.payload.docs.map(a => {\n      if (options.idField) {\n        return Object.assign({\n          [options.idField]: a.id\n        }, a.data());\n      } else {\n        return a.data();\n      }\n    })), this.afs.keepUnstableUntilFirst);\n  }\n  /**\n   * Retrieve the results of the query once.\n   */\n  get(options) {\n    return from(this.query.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\n  }\n}\n\n/**\n * The value of this token determines whether or not the firestore will have persistance enabled\n */\nconst ENABLE_PERSISTENCE = new InjectionToken('angularfire2.enableFirestorePersistence');\nconst PERSISTENCE_SETTINGS = new InjectionToken('angularfire2.firestore.persistenceSettings');\nconst SETTINGS = new InjectionToken('angularfire2.firestore.settings');\nconst USE_EMULATOR = new InjectionToken('angularfire2.firestore.use-emulator');\n/**\n * A utility methods for associating a collection reference with\n * a query.\n *\n * @param collectionRef - A collection reference to query\n * @param queryFn - The callback to create a query\n *\n * Example:\n * const { query, ref } = associateQuery(docRef.collection('items'), ref => {\n *  return ref.where('age', '<', 200);\n * });\n */\nfunction associateQuery(collectionRef, queryFn = ref => ref) {\n  const query = queryFn(collectionRef);\n  const ref = collectionRef;\n  return {\n    query,\n    ref\n  };\n}\n/**\n * AngularFirestore Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for creating Collection and Reference services. These services can\n * then be used to do data updates and observable streams of the data.\n *\n * Example:\n *\n * import { Component } from '@angular/core';\n * import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '@angular/fire/firestore';\n * import { Observable } from 'rxjs/Observable';\n * import { from } from 'rxjs/observable';\n *\n * @Component({\n *   selector: 'app-my-component',\n *   template: `\n *    <h2>Items for {{ (profile | async)?.name }}\n *    <ul>\n *       <li *ngFor=\"let item of items | async\">{{ item.name }}</li>\n *    </ul>\n *    <div class=\"control-input\">\n *       <input type=\"text\" #itemname />\n *       <button (click)=\"addItem(itemname.value)\">Add Item</button>\n *    </div>\n *   `\n * })\n * export class MyComponent implements OnInit {\n *\n *   // services for data operations and data streaming\n *   private readonly itemsRef: AngularFirestoreCollection<Item>;\n *   private readonly profileRef: AngularFirestoreDocument<Profile>;\n *\n *   // observables for template\n *   items: Observable<Item[]>;\n *   profile: Observable<Profile>;\n *\n *   // inject main service\n *   constructor(private readonly afs: AngularFirestore) {}\n *\n *   ngOnInit() {\n *     this.itemsRef = afs.collection('items', ref => ref.where('user', '==', 'davideast').limit(10));\n *     this.items = this.itemsRef.valueChanges().map(snap => snap.docs.map(data => doc.data()));\n *     // this.items = from(this.itemsRef); // you can also do this with no mapping\n *\n *     this.profileRef = afs.doc('users/davideast');\n *     this.profile = this.profileRef.valueChanges();\n *   }\n *\n *   addItem(name: string) {\n *     const user = 'davideast';\n *     this.itemsRef.add({ name, user });\n *   }\n * }\n */\nclass AngularFirestore {\n  /**\n   * Each Feature of AngularFire has a FirebaseApp injected. This way we\n   * don't rely on the main Firebase App instance and we can create named\n   * apps and use multiple apps.\n   */\n  constructor(options, nameOrConfig, shouldEnablePersistence, settings,\n  // tslint:disable-next-line:ban-types\n  platformId, zone, persistenceSettings, _useEmulator, useAuthEmulator) {\n    this.schedulers = new ɵAngularFireSchedulers(zone);\n    this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers);\n    const app = ɵfirebaseAppFactory(options, zone, nameOrConfig);\n    if (!firebase.auth && useAuthEmulator) {\n      ɵlogAuthEmulatorError();\n    }\n    const useEmulator = _useEmulator;\n    [this.firestore, this.persistenceEnabled$] = ɵfetchInstance(`${app.name}.firestore`, 'AngularFirestore', app, () => {\n      const firestore = zone.runOutsideAngular(() => app.firestore());\n      if (settings) {\n        firestore.settings(settings);\n      }\n      if (useEmulator) {\n        firestore.useEmulator(...useEmulator);\n      }\n      if (shouldEnablePersistence && !isPlatformServer(platformId)) {\n        // We need to try/catch here because not all enablePersistence() failures are caught\n        // https://github.com/firebase/firebase-js-sdk/issues/608\n        const enablePersistence = () => {\n          try {\n            return from(firestore.enablePersistence(persistenceSettings || undefined).then(() => true, () => false));\n          } catch (e) {\n            if (typeof console !== 'undefined') {\n              console.warn(e);\n            }\n            return of(false);\n          }\n        };\n        return [firestore, zone.runOutsideAngular(enablePersistence)];\n      } else {\n        return [firestore, of(false)];\n      }\n    }, [settings, useEmulator, shouldEnablePersistence]);\n  }\n  collection(pathOrRef, queryFn) {\n    let collectionRef;\n    if (typeof pathOrRef === 'string') {\n      collectionRef = this.firestore.collection(pathOrRef);\n    } else {\n      collectionRef = pathOrRef;\n    }\n    const {\n      ref,\n      query\n    } = associateQuery(collectionRef, queryFn);\n    const refInZone = this.schedulers.ngZone.run(() => ref);\n    return new AngularFirestoreCollection(refInZone, query, this);\n  }\n  /**\n   * Create a reference to a Firestore Collection Group based on a collectionId\n   * and an optional query function to narrow the result\n   * set.\n   */\n  collectionGroup(collectionId, queryGroupFn) {\n    const queryFn = queryGroupFn || (ref => ref);\n    const collectionGroup = this.firestore.collectionGroup(collectionId);\n    return new AngularFirestoreCollectionGroup(queryFn(collectionGroup), this);\n  }\n  doc(pathOrRef) {\n    let ref;\n    if (typeof pathOrRef === 'string') {\n      ref = this.firestore.doc(pathOrRef);\n    } else {\n      ref = pathOrRef;\n    }\n    const refInZone = this.schedulers.ngZone.run(() => ref);\n    return new AngularFirestoreDocument(refInZone, this);\n  }\n  /**\n   * Returns a generated Firestore Document Id.\n   */\n  createId() {\n    return this.firestore.collection('_').doc().id;\n  }\n}\n/** @nocollapse */\nAngularFirestore.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function AngularFirestore_Factory() {\n    return new AngularFirestore(i0.ɵɵinject(i1.FIREBASE_OPTIONS), i0.ɵɵinject(i1.FIREBASE_APP_NAME, 8), i0.ɵɵinject(ENABLE_PERSISTENCE, 8), i0.ɵɵinject(SETTINGS, 8), i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(PERSISTENCE_SETTINGS, 8), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(i2.USE_EMULATOR, 8));\n  },\n  token: AngularFirestore,\n  providedIn: \"any\"\n});\nAngularFirestore.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'any'\n  }]\n}];\n/** @nocollapse */\nAngularFirestore.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [FIREBASE_OPTIONS]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [FIREBASE_APP_NAME]\n  }]\n}, {\n  type: Boolean,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ENABLE_PERSISTENCE]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [SETTINGS]\n  }]\n}, {\n  type: Object,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [PERSISTENCE_SETTINGS]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [USE_EMULATOR]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [USE_EMULATOR$1]\n  }]\n}];\nclass AngularFirestoreModule {\n  /**\n   * Attempt to enable persistent storage, if possible\n   */\n  static enablePersistence(persistenceSettings) {\n    return {\n      ngModule: AngularFirestoreModule,\n      providers: [{\n        provide: ENABLE_PERSISTENCE,\n        useValue: true\n      }, {\n        provide: PERSISTENCE_SETTINGS,\n        useValue: persistenceSettings\n      }]\n    };\n  }\n}\nAngularFirestoreModule.decorators = [{\n  type: NgModule,\n  args: [{\n    providers: [AngularFirestore]\n  }]\n}];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFirestore, AngularFirestoreCollection, AngularFirestoreCollectionGroup, AngularFirestoreDocument, AngularFirestoreModule, ENABLE_PERSISTENCE, PERSISTENCE_SETTINGS, SETTINGS, USE_EMULATOR, associateQuery, combineChange, combineChanges, docChanges, fromCollectionRef, fromDocRef, fromRef, sortedChanges, validateEventsArray };","map":{"version":3,"names":["i0","InjectionToken","Injectable","Inject","Optional","PLATFORM_ID","NgZone","NgModule","asyncScheduler","Observable","from","of","startWith","pairwise","map","scan","distinctUntilChanged","filter","observeOn","i1","ɵAngularFireSchedulers","ɵkeepUnstableUntilFirstFactory","ɵfirebaseAppFactory","ɵlogAuthEmulatorError","ɵfetchInstance","FIREBASE_OPTIONS","FIREBASE_APP_NAME","isPlatformServer","firebase","i2","USE_EMULATOR","USE_EMULATOR$1","_fromRef","ref","scheduler","subscriber","unsubscribe","schedule","onSnapshot","includeMetadataChanges","fromRef","fromDocRef","pipe","undefined","priorPayload","payload","exists","type","fromCollectionRef","docChanges","query","priorAction","action","actions","change","JSON","stringify","metadata","docs","forEach","currentDoc","currentIndex","docChange","find","d","doc","isEqual","priorDoc","push","oldIndex","newIndex","sortedChanges","events","current","changes","combineChanges","it","c","indexOf","combineChange","sliceAndSplice","original","start","deleteCount","args","returnArray","slice","splice","combined","copiedArray","validateEventsArray","length","AngularFirestoreCollection","constructor","afs","stateChanges","source","schedulers","outsideAngular","prior","keepUnstableUntilFirst","auditTrail","snapshotChanges","validatedEvents","scheduledSortedChanges$","valueChanges","options","a","idField","Object","assign","data","id","get","insideAngular","add","path","AngularFirestoreDocument","set","update","delete","collection","queryFn","collectionRef","associateQuery","scheduledFromDocRef$","AngularFirestoreCollectionGroup","fromCollectionRefScheduled$","ENABLE_PERSISTENCE","PERSISTENCE_SETTINGS","SETTINGS","AngularFirestore","nameOrConfig","shouldEnablePersistence","settings","platformId","zone","persistenceSettings","_useEmulator","useAuthEmulator","app","auth","useEmulator","firestore","persistenceEnabled$","name","runOutsideAngular","enablePersistence","then","e","console","warn","pathOrRef","refInZone","ngZone","run","collectionGroup","collectionId","queryGroupFn","createId","ɵprov","ɵɵdefineInjectable","factory","AngularFirestore_Factory","ɵɵinject","token","providedIn","decorators","ctorParameters","Boolean","AngularFirestoreModule","ngModule","providers","provide","useValue"],"sources":["C:/Users/CSEG/Desktop/thassign/node_modules/@angular/fire/fesm2015/angular-fire-firestore.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, Optional, PLATFORM_ID, NgZone, NgModule } from '@angular/core';\nimport { asyncScheduler, Observable, from, of } from 'rxjs';\nimport { startWith, pairwise, map, scan, distinctUntilChanged, filter, observeOn } from 'rxjs/operators';\nimport * as i1 from '@angular/fire';\nimport { ɵAngularFireSchedulers, ɵkeepUnstableUntilFirstFactory, ɵfirebaseAppFactory, ɵlogAuthEmulatorError, ɵfetchInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire';\nimport { isPlatformServer } from '@angular/common';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport * as i2 from '@angular/fire/auth';\nimport { USE_EMULATOR as USE_EMULATOR$1 } from '@angular/fire/auth';\n\nfunction _fromRef(ref, scheduler = asyncScheduler) {\n    return new Observable(subscriber => {\n        let unsubscribe;\n        if (scheduler != null) {\n            scheduler.schedule(() => {\n                unsubscribe = ref.onSnapshot({ includeMetadataChanges: true }, subscriber);\n            });\n        }\n        else {\n            unsubscribe = ref.onSnapshot({ includeMetadataChanges: true }, subscriber);\n        }\n        return () => {\n            if (unsubscribe != null) {\n                unsubscribe();\n            }\n        };\n    });\n}\nfunction fromRef(ref, scheduler) {\n    return _fromRef(ref, scheduler);\n}\nfunction fromDocRef(ref, scheduler) {\n    return fromRef(ref, scheduler)\n        .pipe(startWith(undefined), pairwise(), map(([priorPayload, payload]) => {\n        if (!payload.exists) {\n            return { payload, type: 'removed' };\n        }\n        if (!(priorPayload === null || priorPayload === void 0 ? void 0 : priorPayload.exists)) {\n            return { payload, type: 'added' };\n        }\n        return { payload, type: 'modified' };\n    }));\n}\nfunction fromCollectionRef(ref, scheduler) {\n    return fromRef(ref, scheduler).pipe(map(payload => ({ payload, type: 'query' })));\n}\n\n/**\n * Return a stream of document changes on a query. These results are not in sort order but in\n * order of occurence.\n */\nfunction docChanges(query, scheduler) {\n    return fromCollectionRef(query, scheduler)\n        .pipe(startWith(undefined), pairwise(), map(([priorAction, action]) => {\n        const docChanges = action.payload.docChanges();\n        const actions = docChanges.map(change => ({ type: change.type, payload: change }));\n        // the metadata has changed from the prior emission\n        if (priorAction && JSON.stringify(priorAction.payload.metadata) !== JSON.stringify(action.payload.metadata)) {\n            // go through all the docs in payload and figure out which ones changed\n            action.payload.docs.forEach((currentDoc, currentIndex) => {\n                const docChange = docChanges.find(d => d.doc.ref.isEqual(currentDoc.ref));\n                const priorDoc = priorAction === null || priorAction === void 0 ? void 0 : priorAction.payload.docs.find(d => d.ref.isEqual(currentDoc.ref));\n                if (docChange && JSON.stringify(docChange.doc.metadata) === JSON.stringify(currentDoc.metadata) ||\n                    !docChange && priorDoc && JSON.stringify(priorDoc.metadata) === JSON.stringify(currentDoc.metadata)) {\n                    // document doesn't appear to have changed, don't log another action\n                }\n                else {\n                    // since the actions are processed in order just push onto the array\n                    actions.push({\n                        type: 'modified',\n                        payload: {\n                            oldIndex: currentIndex,\n                            newIndex: currentIndex,\n                            type: 'modified',\n                            doc: currentDoc\n                        }\n                    });\n                }\n            });\n        }\n        return actions;\n    }));\n}\n/**\n * Return a stream of document changes on a query. These results are in sort order.\n */\nfunction sortedChanges(query, events, scheduler) {\n    return docChanges(query, scheduler)\n        .pipe(scan((current, changes) => combineChanges(current, changes.map(it => it.payload), events), []), distinctUntilChanged(), // cut down on unneed change cycles\n    map(changes => changes.map(c => ({ type: c.type, payload: c }))));\n}\n/**\n * Combines the total result set from the current set of changes from an incoming set\n * of changes.\n */\nfunction combineChanges(current, changes, events) {\n    changes.forEach(change => {\n        // skip unwanted change types\n        if (events.indexOf(change.type) > -1) {\n            current = combineChange(current, change);\n        }\n    });\n    return current;\n}\n/**\n * Splice arguments on top of a sliced array, to break top-level ===\n * this is useful for change-detection\n */\nfunction sliceAndSplice(original, start, deleteCount, ...args) {\n    const returnArray = original.slice();\n    returnArray.splice(start, deleteCount, ...args);\n    return returnArray;\n}\n/**\n * Creates a new sorted array from a new change.\n * Build our own because we allow filtering of action types ('added', 'removed', 'modified') before scanning\n * and so we have greater control over change detection (by breaking ===)\n */\nfunction combineChange(combined, change) {\n    switch (change.type) {\n        case 'added':\n            if (combined[change.newIndex] && combined[change.newIndex].doc.ref.isEqual(change.doc.ref)) {\n                // Not sure why the duplicates are getting fired\n            }\n            else {\n                return sliceAndSplice(combined, change.newIndex, 0, change);\n            }\n            break;\n        case 'modified':\n            if (combined[change.oldIndex] == null || combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n                // When an item changes position we first remove it\n                // and then add it's new position\n                if (change.oldIndex !== change.newIndex) {\n                    const copiedArray = combined.slice();\n                    copiedArray.splice(change.oldIndex, 1);\n                    copiedArray.splice(change.newIndex, 0, change);\n                    return copiedArray;\n                }\n                else {\n                    return sliceAndSplice(combined, change.newIndex, 1, change);\n                }\n            }\n            break;\n        case 'removed':\n            if (combined[change.oldIndex] && combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n                return sliceAndSplice(combined, change.oldIndex, 1);\n            }\n            break;\n    }\n    return combined;\n}\n\nfunction validateEventsArray(events) {\n    if (!events || events.length === 0) {\n        events = ['added', 'removed', 'modified'];\n    }\n    return events;\n}\n/**\n * AngularFirestoreCollection service\n *\n * This class creates a reference to a Firestore Collection. A reference and a query are provided in\n * in the constructor. The query can be the unqueried reference if no query is desired.The class\n * is generic which gives you type safety for data update methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionRef = firebase.firestore.collection('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollection<Stock>(collectionRef, query);\n *\n * // NOTE!: the updates are performed on the reference not the query\n * await fakeStock.add({ name: 'FAKE', price: 0.01 });\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n */\nclass AngularFirestoreCollection {\n    /**\n     * The constructor takes in a CollectionReference and Query to provide wrapper methods\n     * for data operations and data streaming.\n     *\n     * Note: Data operation methods are done on the reference not the query. This means\n     * when you update data it is not updating data to the window of your query unless\n     * the data fits the criteria of the query. See the AssociatedRefence type for details\n     * on this implication.\n     */\n    constructor(ref, query, afs) {\n        this.ref = ref;\n        this.query = query;\n        this.afs = afs;\n    }\n    /**\n     * Listen to the latest change in the stream. This method returns changes\n     * as they occur and they are not sorted by query order. This allows you to construct\n     * your own data structure.\n     */\n    stateChanges(events) {\n        let source = docChanges(this.query, this.afs.schedulers.outsideAngular);\n        if (events && events.length > 0) {\n            source = source.pipe(map(actions => actions.filter(change => events.indexOf(change.type) > -1)));\n        }\n        return source.pipe(\n        // We want to filter out empty arrays, but always emit at first, so the developer knows\n        // that the collection has been resolve; even if it's empty\n        startWith(undefined), pairwise(), filter(([prior, current]) => current.length > 0 || !prior), map(([prior, current]) => current), this.afs.keepUnstableUntilFirst);\n    }\n    /**\n     * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n     * but it collects each event in an array over time.\n     */\n    auditTrail(events) {\n        return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n    }\n    /**\n     * Create a stream of synchronized changes. This method keeps the local array in sorted\n     * query order.\n     */\n    snapshotChanges(events) {\n        const validatedEvents = validateEventsArray(events);\n        const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n        return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);\n    }\n    valueChanges(options = {}) {\n        return fromCollectionRef(this.query, this.afs.schedulers.outsideAngular)\n            .pipe(map(actions => actions.payload.docs.map(a => {\n            if (options.idField) {\n                return Object.assign(Object.assign({}, a.data()), { [options.idField]: a.id });\n            }\n            else {\n                return a.data();\n            }\n        })), this.afs.keepUnstableUntilFirst);\n    }\n    /**\n     * Retrieve the results of the query once.\n     */\n    get(options) {\n        return from(this.query.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\n    }\n    /**\n     * Add data to a collection reference.\n     *\n     * Note: Data operation methods are done on the reference not the query. This means\n     * when you update data it is not updating data to the window of your query unless\n     * the data fits the criteria of the query.\n     */\n    add(data) {\n        return this.ref.add(data);\n    }\n    /**\n     * Create a reference to a single document in a collection.\n     */\n    doc(path) {\n        // TODO is there a better way to solve this type issue\n        return new AngularFirestoreDocument(this.ref.doc(path), this.afs);\n    }\n}\n\n/**\n * AngularFirestoreDocument service\n *\n * This class creates a reference to a Firestore Document. A reference is provided in\n * in the constructor. The class is generic which gives you type safety for data update\n * methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const fakeStock = new AngularFirestoreDocument<Stock>(doc('stocks/FAKE'));\n * await fakeStock.set({ name: 'FAKE', price: 0.01 });\n * fakeStock.valueChanges().map(snap => {\n *   if(snap.exists) return snap.data();\n *   return null;\n * }).subscribe(value => console.log(value));\n * // OR! Transform using Observable.from() and the data is unwrapped for you\n * Observable.from(fakeStock).subscribe(value => console.log(value));\n */\nclass AngularFirestoreDocument {\n    /**\n     * The constructor takes in a DocumentReference to provide wrapper methods\n     * for data operations, data streaming, and Symbol.observable.\n     */\n    constructor(ref, afs) {\n        this.ref = ref;\n        this.afs = afs;\n    }\n    /**\n     * Create or overwrite a single document.\n     */\n    set(data, options) {\n        return this.ref.set(data, options);\n    }\n    /**\n     * Update some fields of a document without overwriting the entire document.\n     */\n    update(data) {\n        return this.ref.update(data);\n    }\n    /**\n     * Delete a document.\n     */\n    delete() {\n        return this.ref.delete();\n    }\n    /**\n     * Create a reference to a sub-collection given a path and an optional query\n     * function.\n     */\n    collection(path, queryFn) {\n        const collectionRef = this.ref.collection(path);\n        const { ref, query } = associateQuery(collectionRef, queryFn);\n        return new AngularFirestoreCollection(ref, query, this.afs);\n    }\n    /**\n     * Listen to snapshot updates from the document.\n     */\n    snapshotChanges() {\n        const scheduledFromDocRef$ = fromDocRef(this.ref, this.afs.schedulers.outsideAngular);\n        return scheduledFromDocRef$.pipe(this.afs.keepUnstableUntilFirst);\n    }\n    valueChanges(options = {}) {\n        return this.snapshotChanges().pipe(map(({ payload }) => options.idField ? Object.assign(Object.assign({}, payload.data()), { [options.idField]: payload.id }) : payload.data()));\n    }\n    /**\n     * Retrieve the document once.\n     */\n    get(options) {\n        return from(this.ref.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\n    }\n}\n\n/**\n * AngularFirestoreCollectionGroup service\n *\n * This class holds a reference to a Firestore Collection Group Query.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionGroup = firebase.firestore.collectionGroup('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollectionGroup<Stock>(query, afs);\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n */\nclass AngularFirestoreCollectionGroup {\n    /**\n     * The constructor takes in a CollectionGroupQuery to provide wrapper methods\n     * for data operations and data streaming.\n     */\n    constructor(query, afs) {\n        this.query = query;\n        this.afs = afs;\n    }\n    /**\n     * Listen to the latest change in the stream. This method returns changes\n     * as they occur and they are not sorted by query order. This allows you to construct\n     * your own data structure.\n     */\n    stateChanges(events) {\n        if (!events || events.length === 0) {\n            return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst);\n        }\n        return docChanges(this.query, this.afs.schedulers.outsideAngular)\n            .pipe(map(actions => actions.filter(change => events.indexOf(change.type) > -1)), filter(changes => changes.length > 0), this.afs.keepUnstableUntilFirst);\n    }\n    /**\n     * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n     * but it collects each event in an array over time.\n     */\n    auditTrail(events) {\n        return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n    }\n    /**\n     * Create a stream of synchronized changes. This method keeps the local array in sorted\n     * query order.\n     */\n    snapshotChanges(events) {\n        const validatedEvents = validateEventsArray(events);\n        const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n        return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);\n    }\n    valueChanges(options = {}) {\n        const fromCollectionRefScheduled$ = fromCollectionRef(this.query, this.afs.schedulers.outsideAngular);\n        return fromCollectionRefScheduled$\n            .pipe(map(actions => actions.payload.docs.map(a => {\n            if (options.idField) {\n                return Object.assign({ [options.idField]: a.id }, a.data());\n            }\n            else {\n                return a.data();\n            }\n        })), this.afs.keepUnstableUntilFirst);\n    }\n    /**\n     * Retrieve the results of the query once.\n     */\n    get(options) {\n        return from(this.query.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\n    }\n}\n\n/**\n * The value of this token determines whether or not the firestore will have persistance enabled\n */\nconst ENABLE_PERSISTENCE = new InjectionToken('angularfire2.enableFirestorePersistence');\nconst PERSISTENCE_SETTINGS = new InjectionToken('angularfire2.firestore.persistenceSettings');\nconst SETTINGS = new InjectionToken('angularfire2.firestore.settings');\nconst USE_EMULATOR = new InjectionToken('angularfire2.firestore.use-emulator');\n/**\n * A utility methods for associating a collection reference with\n * a query.\n *\n * @param collectionRef - A collection reference to query\n * @param queryFn - The callback to create a query\n *\n * Example:\n * const { query, ref } = associateQuery(docRef.collection('items'), ref => {\n *  return ref.where('age', '<', 200);\n * });\n */\nfunction associateQuery(collectionRef, queryFn = ref => ref) {\n    const query = queryFn(collectionRef);\n    const ref = collectionRef;\n    return { query, ref };\n}\n/**\n * AngularFirestore Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for creating Collection and Reference services. These services can\n * then be used to do data updates and observable streams of the data.\n *\n * Example:\n *\n * import { Component } from '@angular/core';\n * import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '@angular/fire/firestore';\n * import { Observable } from 'rxjs/Observable';\n * import { from } from 'rxjs/observable';\n *\n * @Component({\n *   selector: 'app-my-component',\n *   template: `\n *    <h2>Items for {{ (profile | async)?.name }}\n *    <ul>\n *       <li *ngFor=\"let item of items | async\">{{ item.name }}</li>\n *    </ul>\n *    <div class=\"control-input\">\n *       <input type=\"text\" #itemname />\n *       <button (click)=\"addItem(itemname.value)\">Add Item</button>\n *    </div>\n *   `\n * })\n * export class MyComponent implements OnInit {\n *\n *   // services for data operations and data streaming\n *   private readonly itemsRef: AngularFirestoreCollection<Item>;\n *   private readonly profileRef: AngularFirestoreDocument<Profile>;\n *\n *   // observables for template\n *   items: Observable<Item[]>;\n *   profile: Observable<Profile>;\n *\n *   // inject main service\n *   constructor(private readonly afs: AngularFirestore) {}\n *\n *   ngOnInit() {\n *     this.itemsRef = afs.collection('items', ref => ref.where('user', '==', 'davideast').limit(10));\n *     this.items = this.itemsRef.valueChanges().map(snap => snap.docs.map(data => doc.data()));\n *     // this.items = from(this.itemsRef); // you can also do this with no mapping\n *\n *     this.profileRef = afs.doc('users/davideast');\n *     this.profile = this.profileRef.valueChanges();\n *   }\n *\n *   addItem(name: string) {\n *     const user = 'davideast';\n *     this.itemsRef.add({ name, user });\n *   }\n * }\n */\nclass AngularFirestore {\n    /**\n     * Each Feature of AngularFire has a FirebaseApp injected. This way we\n     * don't rely on the main Firebase App instance and we can create named\n     * apps and use multiple apps.\n     */\n    constructor(options, nameOrConfig, shouldEnablePersistence, settings, \n    // tslint:disable-next-line:ban-types\n    platformId, zone, persistenceSettings, _useEmulator, useAuthEmulator) {\n        this.schedulers = new ɵAngularFireSchedulers(zone);\n        this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers);\n        const app = ɵfirebaseAppFactory(options, zone, nameOrConfig);\n        if (!firebase.auth && useAuthEmulator) {\n            ɵlogAuthEmulatorError();\n        }\n        const useEmulator = _useEmulator;\n        [this.firestore, this.persistenceEnabled$] = ɵfetchInstance(`${app.name}.firestore`, 'AngularFirestore', app, () => {\n            const firestore = zone.runOutsideAngular(() => app.firestore());\n            if (settings) {\n                firestore.settings(settings);\n            }\n            if (useEmulator) {\n                firestore.useEmulator(...useEmulator);\n            }\n            if (shouldEnablePersistence && !isPlatformServer(platformId)) {\n                // We need to try/catch here because not all enablePersistence() failures are caught\n                // https://github.com/firebase/firebase-js-sdk/issues/608\n                const enablePersistence = () => {\n                    try {\n                        return from(firestore.enablePersistence(persistenceSettings || undefined).then(() => true, () => false));\n                    }\n                    catch (e) {\n                        if (typeof console !== 'undefined') {\n                            console.warn(e);\n                        }\n                        return of(false);\n                    }\n                };\n                return [firestore, zone.runOutsideAngular(enablePersistence)];\n            }\n            else {\n                return [firestore, of(false)];\n            }\n        }, [settings, useEmulator, shouldEnablePersistence]);\n    }\n    collection(pathOrRef, queryFn) {\n        let collectionRef;\n        if (typeof pathOrRef === 'string') {\n            collectionRef = this.firestore.collection(pathOrRef);\n        }\n        else {\n            collectionRef = pathOrRef;\n        }\n        const { ref, query } = associateQuery(collectionRef, queryFn);\n        const refInZone = this.schedulers.ngZone.run(() => ref);\n        return new AngularFirestoreCollection(refInZone, query, this);\n    }\n    /**\n     * Create a reference to a Firestore Collection Group based on a collectionId\n     * and an optional query function to narrow the result\n     * set.\n     */\n    collectionGroup(collectionId, queryGroupFn) {\n        const queryFn = queryGroupFn || (ref => ref);\n        const collectionGroup = this.firestore.collectionGroup(collectionId);\n        return new AngularFirestoreCollectionGroup(queryFn(collectionGroup), this);\n    }\n    doc(pathOrRef) {\n        let ref;\n        if (typeof pathOrRef === 'string') {\n            ref = this.firestore.doc(pathOrRef);\n        }\n        else {\n            ref = pathOrRef;\n        }\n        const refInZone = this.schedulers.ngZone.run(() => ref);\n        return new AngularFirestoreDocument(refInZone, this);\n    }\n    /**\n     * Returns a generated Firestore Document Id.\n     */\n    createId() {\n        return this.firestore.collection('_').doc().id;\n    }\n}\n/** @nocollapse */ AngularFirestore.ɵprov = i0.ɵɵdefineInjectable({ factory: function AngularFirestore_Factory() { return new AngularFirestore(i0.ɵɵinject(i1.FIREBASE_OPTIONS), i0.ɵɵinject(i1.FIREBASE_APP_NAME, 8), i0.ɵɵinject(ENABLE_PERSISTENCE, 8), i0.ɵɵinject(SETTINGS, 8), i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(PERSISTENCE_SETTINGS, 8), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(i2.USE_EMULATOR, 8)); }, token: AngularFirestore, providedIn: \"any\" });\nAngularFirestore.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'any'\n            },] }\n];\n/** @nocollapse */\nAngularFirestore.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [FIREBASE_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FIREBASE_APP_NAME,] }] },\n    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [ENABLE_PERSISTENCE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SETTINGS,] }] },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [PERSISTENCE_SETTINGS,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [USE_EMULATOR,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [USE_EMULATOR$1,] }] }\n];\n\nclass AngularFirestoreModule {\n    /**\n     * Attempt to enable persistent storage, if possible\n     */\n    static enablePersistence(persistenceSettings) {\n        return {\n            ngModule: AngularFirestoreModule,\n            providers: [\n                { provide: ENABLE_PERSISTENCE, useValue: true },\n                { provide: PERSISTENCE_SETTINGS, useValue: persistenceSettings },\n            ]\n        };\n    }\n}\nAngularFirestoreModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [AngularFirestore]\n            },] }\n];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFirestore, AngularFirestoreCollection, AngularFirestoreCollectionGroup, AngularFirestoreDocument, AngularFirestoreModule, ENABLE_PERSISTENCE, PERSISTENCE_SETTINGS, SETTINGS, USE_EMULATOR, associateQuery, combineChange, combineChanges, docChanges, fromCollectionRef, fromDocRef, fromRef, sortedChanges, validateEventsArray };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}